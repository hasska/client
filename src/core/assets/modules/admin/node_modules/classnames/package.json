{
  "_args": [
    [
      {
        "raw": "classnames@^2.2.5",
        "scope": null,
        "escapedName": "classnames",
        "name": "classnames",
        "rawSpec": "^2.2.5",
        "spec": ">=2.2.5 <3.0.0",
        "type": "range"
      },
      "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/element-react"
    ]
  ],
  "_from": "classnames@>=2.2.5 <3.0.0",
  "_id": "classnames@2.2.5",
  "_inCache": true,
  "_location": "/classnames",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/classnames-2.2.5.tgz_1462195436082_0.17347457958385348"
  },
  "_npmUser": {
    "name": "jedwatson",
    "email": "jed.watson@me.com"
  },
  "_npmVersion": "3.3.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "classnames@^2.2.5",
    "scope": null,
    "escapedName": "classnames",
    "name": "classnames",
    "rawSpec": "^2.2.5",
    "spec": ">=2.2.5 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/element-react",
    "/react-codemirror"
  ],
  "_resolved": "https://registry.npmjs.org/classnames/-/classnames-2.2.5.tgz",
  "_shasum": "fb3801d453467649ef3603c7d61a02bd129bde6d",
  "_shrinkwrap": null,
  "_spec": "classnames@^2.2.5",
  "_where": "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/element-react",
  "author": {
    "name": "Jed Watson"
  },
  "bugs": {
    "url": "https://github.com/JedWatson/classnames/issues"
  },
  "dependencies": {},
  "description": "A simple utility for conditionally joining classNames together",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "mocha": "^2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "fb3801d453467649ef3603c7d61a02bd129bde6d",
    "tarball": "https://registry.npmjs.org/classnames/-/classnames-2.2.5.tgz"
  },
  "gitHead": "1fc62c0490bfc7d67a1178bbb60897cfa0580c7b",
  "homepage": "https://github.com/JedWatson/classnames#readme",
  "keywords": [
    "react",
    "css",
    "classes",
    "classname",
    "classnames",
    "util",
    "utility"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jedwatson",
      "email": "jed.watson@me.com"
    }
  ],
  "name": "classnames",
  "optionalDependencies": {},
  "readme": "Classnames\n===========\n\n[![Version](http://img.shields.io/npm/v/classnames.svg)](https://www.npmjs.org/package/classnames)\n[![Build Status](https://travis-ci.org/JedWatson/classnames.svg?branch=master)](https://travis-ci.org/JedWatson/classnames)\n\nA simple javascript utility for conditionally joining classNames together.\n\nInstall with npm or Bower.\n\n```sh\nnpm install classnames\n```\n\nUse with node.js, browserify or webpack:\n\n```js\nvar classNames = require('classnames');\nclassNames('foo', 'bar'); // => 'foo bar'\n```\n\nAlternatively, you can simply include `index.js` on your page with a standalone `<script>` tag and it will export a global `classNames` method, or define the module if you are using RequireJS.\n\n### Project philosophy\n\nWe take the stability and performance of this package seriously, because it is run millions of times a day in browsers all around the world. Updates are thoroughly reviewed for performance impacts before being released, and we have a comprehensive test suite.\n\nClassnames follows the [SemVer](http://semver.org/) standard for versioning.\n\nThere is also a [Changelog](https://github.com/JedWatson/classnames/blob/master/HISTORY.md).\n\n## Usage\n\nThe `classNames` function takes any number of arguments which can be a string or object.\nThe argument `'foo'` is short for `{ foo: true }`. If the value of the key is falsy, it won't be included in the output.\n\n```js\nclassNames('foo', 'bar'); // => 'foo bar'\nclassNames('foo', { bar: true }); // => 'foo bar'\nclassNames({ 'foo-bar': true }); // => 'foo-bar'\nclassNames({ 'foo-bar': false }); // => ''\nclassNames({ foo: true }, { bar: true }); // => 'foo bar'\nclassNames({ foo: true, bar: true }); // => 'foo bar'\n\n// lots of arguments of various types\nclassNames('foo', { bar: true, duck: false }, 'baz', { quux: true }); // => 'foo bar baz quux'\n\n// other falsy values are just ignored\nclassNames(null, false, 'bar', undefined, 0, 1, { baz: null }, ''); // => 'bar 1'\n```\n\nArrays will be recursively flattened as per the rules above:\n\n```js\nvar arr = ['b', { c: true, d: false }];\nclassNames('a', arr); // => 'a b c'\n```\n\n### Dynamic class names with ES2015\n\nIf you're in an environment that supports [computed keys](http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer) (available in ES2015 and Babel) you can use dynamic class names:\n\n```js\nlet buttonType = 'primary';\nclassNames({ [`btn-${buttonType}`]: true });\n```\n\n### Usage with React.js\n\nThis package is the official replacement for `classSet`, which was originally shipped in the React.js Addons bundle.\n\nOne of its primary use cases is to make dynamic and conditional className props simpler to work with (especially more so than conditional string manipulation). So where you may have the following code to generate a `className` prop for a `<button>` in React:\n\n```js\nvar Button = React.createClass({\n  // ...\n  render () {\n    var btnClass = 'btn';\n    if (this.state.isPressed) btnClass += ' btn-pressed';\n    else if (this.state.isHovered) btnClass += ' btn-over';\n    return <button className={btnClass}>{this.props.label}</button>;\n  }\n});\n```\n\nYou can express the conditional classes more simply as an object:\n\n```js\nvar classNames = require('classnames');\n\nvar Button = React.createClass({\n  // ...\n  render () {\n    var btnClass = classNames({\n      'btn': true,\n      'btn-pressed': this.state.isPressed,\n      'btn-over': !this.state.isPressed && this.state.isHovered\n    });\n    return <button className={btnClass}>{this.props.label}</button>;\n  }\n});\n```\n\nBecause you can mix together object, array and string arguments, supporting optional className props is also simpler as only truthy arguments get included in the result:\n\n```js\nvar btnClass = classNames('btn', this.props.className, {\n  'btn-pressed': this.state.isPressed,\n  'btn-over': !this.state.isPressed && this.state.isHovered\n});\n```\n\n\n### Alternate `dedupe` version\n\nThere is an alternate version of `classNames` available which correctly dedupes classes and ensures that falsy classes specified in later arguments are excluded from the result set.\n\nThis version is slower (about 5x) so it is offered as an opt-in.\n\nTo use the dedupe version with node, browserify or webpack:\n\n```js\nvar classNames = require('classnames/dedupe');\n\nclassNames('foo', 'foo', 'bar'); // => 'foo bar'\nclassNames('foo', { foo: false, bar: true }); // => 'bar'\n```\n\nFor standalone (global / AMD) use, include `dedupe.js` in a `<script>` tag on your page.\n\n\n### Alternate `bind` version (for [css-modules](https://github.com/css-modules/css-modules))\n\nIf you are using [css-modules](https://github.com/css-modules/css-modules), or a similar approach to abstract class \"names\" and the real `className` values that are actually output to the DOM, you may want to use the `bind` variant.\n\n_Note that in ES2015 environments, it may be better to use the \"dynamic class names\" approach documented above._\n\n```js\nvar classNames = require('classnames/bind');\n\nvar styles = {\n  foo: 'abc',\n  bar: 'def',\n  baz: 'xyz'\n};\n\nvar cx = classNames.bind(styles);\n\nvar className = cx('foo', ['bar'], { baz: true }); // => \"abc def xyz\"\n```\n\nReal-world example:\n\n```js\n/* components/submit-button.js */\nimport { Component } from 'react';\nimport classNames from 'classnames/bind';\nimport styles from './submit-button.css';\n\nlet cx = classNames.bind(styles);\n\nexport default class SubmitButton extends Component {\n  render () {\n    let text = this.props.store.submissionInProgress ? 'Processing...' : 'Submit';\n    let className = cx({\n      base: true,\n      inProgress: this.props.store.submissionInProgress,\n      error: this.props.store.errorOccurred,\n      disabled: this.props.form.valid,\n    });\n    return <button className={className}>{text}</button>;\n  }\n};\n\n```\n\n\n## Polyfills needed to support older browsers\n\n#### `classNames >=2.0.0`\n\n`Array.isArray`: see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray) for details about unsupported older browsers (e.g. <= IE8) and a simple polyfill.\n\n`Object.keys`: see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys) for details about unsupported older browsers (e.g. <= IE8) and a simple polyfill. This is only used in `dedupe.js`.\n\n## License\n\n[MIT](LICENSE). Copyright (c) 2016 Jed Watson.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/JedWatson/classnames.git"
  },
  "scripts": {
    "benchmarks": "node ./benchmarks/run",
    "test": "npm run unit",
    "unit": "mocha tests/*.js"
  },
  "version": "2.2.5"
}

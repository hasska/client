{
  "_args": [
    [
      {
        "raw": "ast-types-flow@0.0.7",
        "scope": null,
        "escapedName": "ast-types-flow",
        "name": "ast-types-flow",
        "rawSpec": "0.0.7",
        "spec": "0.0.7",
        "type": "version"
      },
      "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/eslint-plugin-jsx-a11y"
    ]
  ],
  "_from": "ast-types-flow@0.0.7",
  "_id": "ast-types-flow@0.0.7",
  "_inCache": true,
  "_location": "/ast-types-flow",
  "_nodeVersion": "4.2.1",
  "_npmUser": {
    "name": "kyldvs",
    "email": "kyldvs@gmail.com"
  },
  "_npmVersion": "2.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ast-types-flow@0.0.7",
    "scope": null,
    "escapedName": "ast-types-flow",
    "name": "ast-types-flow",
    "rawSpec": "0.0.7",
    "spec": "0.0.7",
    "type": "version"
  },
  "_requiredBy": [
    "/aria-query",
    "/axobject-query",
    "/eslint-plugin-jsx-a11y"
  ],
  "_resolved": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.7.tgz",
  "_shasum": "f70b735c6bca1a5c9c22d982c3e39e7feba3bdad",
  "_shrinkwrap": null,
  "_spec": "ast-types-flow@0.0.7",
  "_where": "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/eslint-plugin-jsx-a11y",
  "author": {
    "name": "kyldvs"
  },
  "bugs": {
    "url": "https://github.com/kyldvs/ast-types-flow/issues"
  },
  "dependencies": {},
  "description": "Flow types for the Javascript AST",
  "devDependencies": {
    "gulp": "^3.9.0",
    "gulp-util": "^3.0.6",
    "jscodeshift": "^0.3.7",
    "nuclide-node-transpiler": "0.0.30",
    "through2": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f70b735c6bca1a5c9c22d982c3e39e7feba3bdad",
    "tarball": "https://registry.npmjs.org/ast-types-flow/-/ast-types-flow-0.0.7.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "003086278fe72acf0c9ecc12e569a3ec01c4f0af",
  "homepage": "https://github.com/kyldvs/ast-types-flow#readme",
  "keywords": [
    "flow",
    "ast",
    "javascript"
  ],
  "license": "ISC",
  "main": "lib/types.js",
  "maintainers": [
    {
      "name": "kyldvs",
      "email": "kyldvs@gmail.com"
    }
  ],
  "name": "ast-types-flow",
  "optionalDependencies": {},
  "readme": "# ast-types-flow\n\nFlow types for the Javascript AST. Based off of [benjamn/ast-types](https://github.com/benjamn/ast-types).\n\n## Usage\n\nFirst install `ast-types-flow` via npm, then you can import any of the types\nthat are exported.\n\n```javascript\n/* @flow */\n\nimport type {Node} from 'ast-types-flow';\n\nfunction getName(node: Node): string {\n  switch (node.type) {\n    case 'Identifier':\n      return node.name;\n\n    case 'ClassDeclaration':\n      return node.id.name; // Error, id could be null.\n\n    case 'FunctionDeclaration':\n      return node.id.name; // Fine if it's always there.\n\n    case 'FunctionExpression':\n      if (node.id) {\n        return node.id.name; // Can refine id to make sure it exists.\n      } else {\n        return 'Unknown';\n      }\n\n    case 'Literal':\n      return node.name; // Error, Literals don't have names, don't be silly.\n  }\n  return 'Unknown';\n}\n```\n\n## How it works\n\nA notion of \"extends\" is added to the Flow syntax via comments. A transform is\nincluded that will compile the source code into useful disjoint union types\nbased on how the different types extend each other. For example:\n\n```javascript\ntype Node = {\n  common: string,\n};\n\ntype Foo = {\n  // extends Node\n  foo: string,\n};\n\ntype Bar = {\n  // extends Node\n  bar: number,\n};\n```\n\nWill be transformed into:\n\n```javascript\ntype Node = {\n  type: 'Foo',\n  _Foo: void,\n  common: string,\n  foo: string,\n} | {\n  type: 'Bar',\n  _Bar: void,\n  common: string,\n  bar: number,\n};\n\ntype Foo = {\n  type: 'Foo',\n  _Foo: void,\n  common: string,\n  foo: string,\n};\n\ntype Bar = {\n  type: 'Bar',\n  _Foo: void,\n  common: string,\n  bar: number,\n};\n```\n\nA few things to note:\n\n1. The type `Node` would more ideally be compiled into `Foo | Bar` but then the\ndisjoint union cannot be properly refined. For now we have to duplicate the\ncomplete definitions.\n2. Each entry in a disjoint union has to be structurally unique or Flow will\nhave an error on the definition. That is why the private `_Foo: void` fields\nappear in the types.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kyldvs/ast-types-flow.git"
  },
  "scripts": {
    "build": "gulp build",
    "test": "flow"
  },
  "version": "0.0.7"
}

{
  "_args": [
    [
      {
        "raw": "sw-precache@^5.1.1",
        "scope": null,
        "escapedName": "sw-precache",
        "name": "sw-precache",
        "rawSpec": "^5.1.1",
        "spec": ">=5.1.1 <6.0.0",
        "type": "range"
      },
      "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/sw-precache-webpack-plugin"
    ]
  ],
  "_from": "sw-precache@>=5.1.1 <6.0.0",
  "_id": "sw-precache@5.2.1",
  "_inCache": true,
  "_location": "/sw-precache",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/sw-precache-5.2.1.tgz_1516815979530_0.6643214335199445"
  },
  "_npmUser": {
    "name": "jeffposnick",
    "email": "jeffy@google.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "sw-precache@^5.1.1",
    "scope": null,
    "escapedName": "sw-precache",
    "name": "sw-precache",
    "rawSpec": "^5.1.1",
    "spec": ">=5.1.1 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sw-precache-webpack-plugin"
  ],
  "_resolved": "https://registry.npmjs.org/sw-precache/-/sw-precache-5.2.1.tgz",
  "_shasum": "06134f319eec68f3b9583ce9a7036b1c119f7179",
  "_shrinkwrap": null,
  "_spec": "sw-precache@^5.1.1",
  "_where": "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/sw-precache-webpack-plugin",
  "author": {
    "name": "Jeff Posnick",
    "email": "jeffy@google.com",
    "url": "https://jeffy.info"
  },
  "bin": {
    "sw-precache": "cli.js"
  },
  "bugs": {
    "url": "https://github.com/googlechrome/sw-precache/issues"
  },
  "dependencies": {
    "dom-urls": "^1.1.0",
    "es6-promise": "^4.0.5",
    "glob": "^7.1.1",
    "lodash.defaults": "^4.2.0",
    "lodash.template": "^4.4.0",
    "meow": "^3.7.0",
    "mkdirp": "^0.5.1",
    "pretty-bytes": "^4.0.2",
    "sw-toolbox": "^3.4.0",
    "update-notifier": "^2.3.0"
  },
  "description": "Generates a service worker to cache your local App Shell resources.",
  "devDependencies": {
    "del": "^2.2.2",
    "eslint": "^3.15.0",
    "eslint-config-google": "^0.7.1",
    "express": "^4.14.1",
    "gh-pages": "^0.12.0",
    "grunt": "^1.0.1",
    "gulp": "^3.9.1",
    "gulp-doctoc": "^0.1.4",
    "gulp-eslint": "^3.0.1",
    "gulp-load-plugins": "^1.5.0",
    "gulp-mocha": "^3.0.1",
    "gulp-replace": "^0.5.4",
    "gulp-util": "^3.0.8",
    "jade": "^1.11.0",
    "mocha": "^3.2.0",
    "node-fetch": "^1.6.3",
    "run-sequence": "^1.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8FAy+BP/FXE+ILfiVTt+GQJ6UEf4CVHD9OfhzH0JX+3zoy2uFk7Vn9EfXASOtVmmIVbL3jE/W8Z66VgPSZcMhw==",
    "shasum": "06134f319eec68f3b9583ce9a7036b1c119f7179",
    "tarball": "https://registry.npmjs.org/sw-precache/-/sw-precache-5.2.1.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "cli.js",
    "lib",
    "service-worker.tmpl"
  ],
  "gitHead": "2ee24a96bb4812e83f47f6859361ba5e1bd535f5",
  "homepage": "https://github.com/googlechrome/sw-precache",
  "keywords": [
    "caching",
    "offline",
    "precaching",
    "service-worker",
    "serviceworker",
    "appshell",
    "pwa"
  ],
  "license": "Apache-2.0",
  "main": "lib/sw-precache.js",
  "maintainers": [
    {
      "name": "addyosmani",
      "email": "addyosmani@gmail.com"
    },
    {
      "name": "gauntface",
      "email": "matt@gauntface.co.uk"
    },
    {
      "name": "jeffposnick",
      "email": "jeffy@google.com"
    },
    {
      "name": "wibblymat",
      "email": "mat@wibbly.org.uk"
    }
  ],
  "name": "sw-precache",
  "optionalDependencies": {},
  "readme": "#  [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][daviddm-url]][daviddm-image]\n\n# Service Worker Precache\n\nService Worker Precache is a module for generating a service worker that\nprecaches resources. It integrates with your build process. Once configured, it\ndetects all your static resources (HTML, JavaScript, CSS, images, etc.) and\ngenerates a hash of each file's contents. Information about each file's URL and\nversioned hash are stored in the generated service worker file, along with logic\nto serve those files cache-first, and automatically keep those files up to date\nwhen changes are detected in subsequent builds.\n\nServing your local static resources cache-first means that you can get all the\ncrucial scaffolding for your web app—your App Shell—on the screen without having\nto wait for any network responses.\n\nThe module can be used in JavaScript-based build scripts,\nlike those written with [`gulp`](http://gulpjs.com/), and it also provides a\n[command-line interface](#command-line-interface). You can use the module\ndirectly, or if you'd prefer, use one of the [wrappers](#wrappers-and-starter-kits)\naround `sw-precache` for specific build environments, like\n[`webpack`](https://webpack.github.io/).\n\nIt can be [used alongside](sw-precache-and-sw-toolbox.md) the [`sw-toolbox`](https://github.com/GoogleChrome/sw-toolbox)\nlibrary, which works well when following the App Shell + dynamic content model.\n\nThe full documentation is in this README, and the\n[getting started guide](GettingStarted.md) provides a quicker jumping off point.\n\nTo learn more about the internals of the generated service worker, you can read\n[this deep-dive](https://medium.com/@Huxpro/how-does-sw-precache-works-2d99c3d3c725)\nby [Huang Xuan](https://twitter.com/Huxpro).\n\n\n# Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n- [Usage](#usage)\n  - [Overview](#overview)\n  - [Example](#example)\n  - [Considerations](#considerations)\n  - [Command-line interface](#command-line-interface)\n- [Runtime Caching](#runtime-caching)\n- [API](#api)\n  - [Methods](#methods)\n    - [generate(options, callback)](#generateoptions-callback)\n    - [write(filePath, options, callback)](#writefilepath-options-callback)\n  - [Options Parameter](#options-parameter)\n    - [cacheId [String]](#cacheid-string)\n    - [clientsClaim [Boolean]](#clientsclaim-boolean)\n    - [directoryIndex [String]](#directoryindex-string)\n    - [dontCacheBustUrlsMatching [Regex]](#dontcachebusturlsmatching-regex)\n    - [dynamicUrlToDependencies [Object&#x27e8;String,Buffer,Array&#x27e8;String&#x27e9;&#x27e9;]](#dynamicurltodependencies-objectstringbufferarraystring)\n    - [handleFetch [boolean]](#handlefetch-boolean)\n    - [ignoreUrlParametersMatching [Array&#x27e8;Regex&#x27e9;]](#ignoreurlparametersmatching-arrayregex)\n    - [importScripts [Array&#x27e8;String&#x27e9;]](#importscripts-arraystring)\n    - [logger [function]](#logger-function)\n    - [maximumFileSizeToCacheInBytes [Number]](#maximumfilesizetocacheinbytes-number)\n    - [navigateFallback [String]](#navigatefallback-string)\n    - [navigateFallbackWhitelist [Array&#x27e8;RegExp&#x27e9;]](#navigatefallbackwhitelist-arrayregexp)\n    - [replacePrefix [String]](#replaceprefix-string)\n    - [runtimeCaching [Array&#x27e8;Object&#x27e9;]](#runtimecaching-arrayobject)\n    - [skipWaiting [Boolean]](#skipwaiting-boolean)\n    - [staticFileGlobs [Array&#x27e8;String&#x27e9;]](#staticfileglobs-arraystring)\n    - [stripPrefix [String]](#stripprefix-string)\n    - [stripPrefixMulti [Object]](#stripprefixmulti-object)\n    - [templateFilePath [String]](#templatefilepath-string)\n    - [verbose [boolean]](#verbose-boolean)\n- [Wrappers and Starter Kits](#wrappers-and-starter-kits)\n  - [CLIs](#clis)\n  - [Starter Kits](#starter-kits)\n  - [Recipes for writing a custom wrapper](#recipes-for-writing-a-custom-wrapper)\n- [Acknowledgements](#acknowledgements)\n- [Support](#support)\n- [License](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n## Install\n\nLocal build integration:\n```sh\n$ npm install --save-dev sw-precache\n```\n\nGlobal command-line interface:\n```sh\n$ npm install --global sw-precache\n```\n\n\n## Usage\n\n### Overview\n\n1. **Make sure your site is served using HTTPS!**\nService worker functionality is only available on pages that are accessed via HTTPS.\n(`http://localhost` will also work, to facilitate testing.) The rationale for this restriction is\noutlined in the\n[\"Prefer Secure Origins For Powerful New Features\" document](http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features).\n\n2. **Incorporate `sw-precache` into your `node`-based build script.** It should\nwork well with either `gulp` or `Grunt`, or other build scripts that run on\n`node`. In fact, we've provided examples of both in the `demo/` directory. Each\nbuild script in `demo` has a function called `writeServiceWorkerFile()` that\nshows how to use the API. Both scripts generate fully-functional JavaScript code\nthat takes care of precaching and fetching all the resources your site needs to\nfunction offline. There is also a [command-line interface](#command-line-interface)\navailable, for those using alternate build setups.\n\n3. **Register the service worker JavaScript.** The JavaScript that's generated\nneeds to be registered as the controlling service worker for your pages. This\ntechnically only needs to be done from within a top-level \"entry\" page for your\nsite, since the registration includes a [`scope`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-registration-scope)\nwhich will apply to all pages underneath your top-level page. [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) is a sample\nscript that illustrates the best practices for registering the generated service\nworker and handling the various [lifecycle](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-state.1) events.\n\n### Example\n\nThe project's [sample `gulpfile.js`](/demo/gulpfile.js) illustrates the full use of sw-precache\nin context. (Note that the sample gulpfile.js is the one in the `demo` folder,\nnot the one in the root of the project.) You can run the sample by cloning this\nrepo, using [`npm install`](https://docs.npmjs.com/) to pull in the\ndependencies, changing to the `demo/` directory, running `` `npm bin`/gulp serve-dist ``, and\nthen visiting http://localhost:3000.\n\nThere's also a [sample `Gruntfile.js`](/demo/Gruntfile.js) that shows service worker generation in\nGrunt. Though, it doesn't run a server on localhost.\n\nHere's a simpler gulp example for a basic use case. It assumes your site's resources are located under\n`app` and that you'd like to cache *all* your JavaScript, HTML, CSS, and image files.\n\n```js\ngulp.task('generate-service-worker', function(callback) {\n  var swPrecache = require('sw-precache');\n  var rootDir = 'app';\n\n  swPrecache.write(`${rootDir}/service-worker.js`, {\n    staticFileGlobs: [rootDir + '/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff}'],\n    stripPrefix: rootDir\n  }, callback);\n});\n```\n\nThis task will create `app/service-worker.js`, which your client pages need to\n[register](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register) before it can take control of your site's\npages. [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) is a ready-to-\nuse script to handle registration.\n\n\n### Considerations\n\n- Service worker caching should be considered a progressive enhancement. If you follow the model of\nconditionally registering a service worker only if it's supported (determined by\n`if('serviceWorker' in navigator)`), you'll get offline support on browsers with service workers and\non browsers that don't support service workers, the offline-specific code will never be called.\nThere's no overhead/breakage for older browsers if you add `sw-precache` to your build.\n\n- **All** resources that are precached will be fetched by a service worker running in a separate\nthread as soon as the service worker is installed. You should be judicious in what you list in the\n`dynamicUrlToDependencies` and `staticFileGlobs` options, since listing files that are non-essential\n(large images that are not shown on every page, for instance) will result in browsers downloading\nmore data than is strictly necessary.\n\n- Precaching doesn't make sense for all types of resources (see the previous\npoint). Other caching strategies, like those outlined in the [Offline Cookbook](https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/), can be used in\nconjunction with `sw-precache` to provide the best experience for your users. If\nyou do implement additional caching logic, put the code in a separate JavaScript\nfile and include it using the `importScripts()` method.\n\n- `sw-precache` uses a [cache-first](http://jakearchibald.com/2014/offline-cookbook/#cache-falling-back-to-network) strategy, which results in a copy of\nany cached content being returned without consulting the network. A useful\npattern to adopt with this strategy is to display a toast/alert to your users\nwhen there's new content available, and give them an opportunity to reload the\npage to pick up that new content (which the service worker will have added to\nthe cache, and will be available at the next page load). The sample [`service-worker-registration.js`](/demo/app/js/service-worker-registration.js) file [illustrates](https://github.com/GoogleChrome/sw-precache/blob/7688ee8ccdaddd9171af352384d04d16d712f9d3/demo/app/js/service-worker-registration.js#L51)\nthe service worker lifecycle event you can listen for to trigger this message.\n\n\n### Command-line interface\n\nFor those who would prefer not to use `sw-precache` as part of a `gulp` or\n`Grunt` build, there's a [command-line interface](cli.js) which supports the\n[options listed](#options-parameter) in the API, provided via flags or an\nexternal JavaScript configuration file.\n\nHypenated flags are converted to camelCase [options](#options-parameter).  \nOptions starting with `--no` prefix negate the boolean value. For example, `--no-clients-claim` sets the value of `clientsClaim` to `false`.\n\n**Warning:** When using `sw-precache` \"by hand\", outside of an automated build process, it's your\nresponsibility to re-run the command each time there's a change to any local resources! If `sw-precache`\nis not run again, the previously cached local resources will be reused indefinitely.\n\nSensible defaults are assumed for options that are not provided. For example, if you are inside\nthe top-level directory that contains your site's contents, and you'd like to generate a\n`service-worker.js` file that will automatically precache all of the local files, you can simply run\n\n```sh\n$ sw-precache\n```\n\nAlternatively, if you'd like to only precache `.html` files that live within `dist/`, which is a\nsubdirectory of the current directory, you could run\n\n```sh\n$ sw-precache --root=dist --static-file-globs='dist/**/*.html'\n```\n\n**Note:** Be sure to use quotes around parameter values that have special meanings\nto your shell (such as the `*` characters in the sample command line above,\nfor example).\n\nFinally, there's support for passing complex configurations using `--config <file>`.\nAny of the options from the file can be overridden via a command-line flag.\nWe strongly recommend passing it an external JavaScript file defining config via\n[`module.exports`](https://nodejs.org/api/modules.html#modules_module_exports).\nFor example, assume there's a `path/to/sw-precache-config.js` file that contains:\n\n```js\nmodule.exports = {\n  staticFileGlobs: [\n    'app/css/**.css',\n    'app/**.html',\n    'app/images/**.*',\n    'app/js/**.js'\n  ],\n  stripPrefix: 'app/',\n  runtimeCaching: [{\n    urlPattern: /this\\\\.is\\\\.a\\\\.regex/,\n    handler: 'networkFirst'\n  }]\n};\n```\n\nThat file could be passed to the command-line interface, while also setting the\n`verbose` option, via\n\n```sh\n$ sw-precache --config=path/to/sw-precache-config.js --verbose\n```\n\nThis provides the most flexibility, such as providing a regular expression for\nthe `runtimeCaching.urlPattern` option.\n\nWe also support passing in a JSON file for `--config`, though this provides\nless flexibility:\n\n```json\n{\n  \"staticFileGlobs\": [\n    \"app/css/**.css\",\n    \"app/**.html\",\n    \"app/images/**.*\",\n    \"app/js/**.js\"\n  ],\n  \"stripPrefix\": \"app/\",\n  \"runtimeCaching\": [{\n    \"urlPattern\": \"/express/style/path/(.*)\",\n    \"handler\": \"networkFirst\"\n  }]\n}\n```\n\n## Runtime Caching\n\nIt's often desireable, even necessary to use precaching and runtime caching together. You may have seen our [`sw-toolbox`](https://github.com/GoogleChrome/sw-toolbox) tool, which handles runtime caching, and wondered how to use them together. Fortunately, `sw-precache` handles this for you.\n\nThe `sw-precache` module has the ability to include the `sw-toolbox` code and configuration alongside its own configuration. Using the `runtimeCaching` configuration option in `sw-precache` ([see below](#runtimecaching-arrayobject)) is a shortcut that accomplishes what you could do manually by importing `sw-toolbox` in your service worker and writing your own routing rules.\n\n## API\n\n### Methods\n\nThe `sw-precache` module exposes two methods: `generate` and `write`.\n\n#### generate(options, callback)\n\n`generate` takes in [options](#options), generates a service worker\nfrom them and passes the result to a callback function, which must\nhave the following interface:\n\n`callback(error, serviceWorkerString)`\n\nIn the 1.x releases of `sw-precache`, this was the default and only method\nexposed by the module.\n\nSince 2.2.0, `generate()` also returns a\n[`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n#### write(filePath, options, callback)\n`write` takes in [options](#options), generates a service worker from them,\nand writes the service worker to a specified file. This method always\ninvokes `callback(error)`. If no error was found, the `error` parameter will\nbe `null`\n\nSince 2.2.0, `write()` also returns a [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n\n### Options Parameter\n\nBoth the `generate()` and `write()` methods take the same options.\n\n#### cacheId [String]\nA string used to distinguish the caches created by different web applications that are served off\nof the same origin and path. While serving completely different sites from the same URL is not\nlikely to be an issue in a production environment, it avoids cache-conflicts when testing various\nprojects all served off of `http://localhost`. You may want to set it to, e.g., the `name`\nproperty from your `package.json`.\n\n_Default_: `''`\n\n#### clientsClaim [Boolean]\nControls whether or not the generated service worker will call\n[`clients.claim()`](https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim)\ninside the `activate` handler.\n\nCalling `clients.claim()` allows a newly registered service worker to take\ncontrol of a page immediately, instead of having to wait until the next page\nnavigation.\n\n_Default_: `true`\n\n#### directoryIndex [String]\nSets a default filename to return for URL's formatted like directory paths (in\nother words, those ending in `'/'`). `sw-precache` will take that translation\ninto account and serve the contents a relative `directoryIndex` file when\nthere's no other match for a URL ending in `'/'`. To turn off this behavior,\nset `directoryIndex` to `false` or `null`. To override this behavior for one\nor more URLs, use the `dynamicUrlToDependencies` option to explicitly set up\nmappings between a directory URL and a corresponding file.\n\n_Default_: `'index.html'`\n\n#### dontCacheBustUrlsMatching [Regex]\nIt's very important that the requests `sw-precache` makes to populate your cache\nresult in the most up-to-date version of a resource at a given URL. Requests\nthat are fulfilled with out-of-date responses (like those found in your\nbrowser's HTTP cache) can end up being read from the service worker's cache\nindefinitely. Jake Archibald's [blog post](https://jakearchibald.com/2016/caching-best-practices/#a-service-worker-can-extend-the-life-of-these-bugs)\nprovides more context about this problem.\n\nIn the interest of avoiding that scenario, `sw-precache` will, by default,\nappend a cache-busting parameter to the end of each URL it requests when\npopulating or updating its cache. Developers who are explicitly doing \"the right\nthing\" when it comes to setting HTTP caching headers on their responses might\nwant to opt out of this cache-busting. For example, if all of your static\nresources already include versioning information in their URLs (via a tool like\n[`gulp-rev`](https://github.com/sindresorhus/gulp-rev)), and are served with\nlong-lived HTTP caching headers, then the extra cache-busting URL parameter\nis not needed, and can be safely excluded.\n\n`dontCacheBustUrlsMatching` gives you a way of opting-in to skipping the cache\nbusting behavior for a subset of your URLs (or all of them, if a catch-all value\nlike `/./` is used).\nIf set, then the [pathname](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname)\nof each URL that's prefetched will be matched against this value.\nIf there's a match, then the URL will be prefetched as-is, without an additional\ncache-busting URL parameter appended.\n\nNote: Prior to `sw-precache` v5.0.0, `dontCacheBustUrlsMatching` matched against\nthe entire request URL. As of v5.0.0, it only matches against the URL's\n[pathname](https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname).\n\n_Default_: not set\n\n#### dynamicUrlToDependencies [Object&#x27e8;String,Buffer,Array&#x27e8;String&#x27e9;&#x27e9;]\nMaps a dynamic URL string to an array of all the files that URL's contents\ndepend on. E.g., if the contents of `/pages/home` are generated server-side via\nthe templates `layout.jade` and `home.jade`, then specify `'/pages/home':\n['layout.jade', 'home.jade']`. The MD5 hash is used to determine whether\n`/pages/home` has changed will depend on the hashes of both `layout.jade` and\n`home.jade`.\n\nAn alternative value for the mapping is supported as well. You can specify\na string or a Buffer instance rather than an array of file names. If you use this option, then the\nhash of the string/Buffer will be used to determine whether the URL used as a key has changed.\nFor example, `'/pages/dynamic': dynamicStringValue` could be used if the contents of\n`/pages/dynamic` changes whenever the string stored in `dynamicStringValue` changes.\n\n_Default_: `{}`\n\n#### handleFetch [boolean]\nDetermines whether the `fetch` event handler is included in the generated\nservice worker code. It is useful to set this to `false` in development builds,\nto ensure that features like live reload still work. Otherwise, the content\nwould always be served from the service worker cache.\n\n_Default_: `true`\n\n#### ignoreUrlParametersMatching [Array&#x27e8;Regex&#x27e9;]\n`sw-precache` finds matching cache entries by doing a comparison with the full request URL. It's\ncommon for sites to support URL query parameters that don't affect the site's content and should\nbe effectively ignored for the purposes of cache matching. One example is the\n[`utm_`-prefixed](https://support.google.com/analytics/answer/1033867) parameters used for tracking\ncampaign performance. By default, `sw-precache` will ignore `key=value` when `key` matches _any_ of\nthe regular expressions provided in this option.\nTo ignore all parameters, use `[/./]`. To take all parameters into account when matching, use `[]`.\n\n_Default_: `[/^utm_/]`\n\n#### importScripts [Array&#x27e8;String&#x27e9;]\nWrites calls to [`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/basic_usage#Importing_scripts_and_libraries)\nto the resulting service worker to import the specified scripts.\n\n_Default_: `[]`\n\n#### logger [function]\n\nSpecifies a callback function for logging which resources are being precached and\na precache size. Use `function() {}` if you'd prefer that nothing is logged.\nWithin a `gulp` script, it's recommended that you use [`gulp-util`](https://github.com/gulpjs/gulp-util) and pass in `gutil.log`.\n\n_Default_: `console.log`\n\n#### maximumFileSizeToCacheInBytes [Number]\nSets the maximum allowed size for a file in the precache list.\n\n_Default_: `2097152` (2 megabytes)\n\n#### navigateFallback [String]\nSets an HTML document to use as a fallback for URLs not found in the `sw-precache` cache. This\nfallback URL needs to be cached via `staticFileGlobs` or `dynamicUrlToDependencies` otherwise it\nwon't work.\n\n```js\n// via staticFileGlobs\nstaticFileGlobs: ['/shell.html']\nnavigateFallback: '/shell.html'\n\n// via dynamicUrlToDependencies\ndynamicUrlToDependencies: {\n  '/shell': ['/shell.hbs']\n},\nnavigateFallback: '/shell'\n```\n\nThis comes in handy when used with a web application that performs client-side URL routing\nusing the [History API](https://developer.mozilla.org/en-US/docs/Web/API/History). It allows any\narbitrary URL that the client generates to map to a fallback cached HTML entry. This fallback entry\nideally should serve as an \"application shell\" that is able to load the appropriate resources\nclient-side, based on the request URL.\n\n**Note:** This is **not** intended to be used to route failed navigations to a\ngeneric \"offline fallback\" page. The `navigateFallback` page is used whether the\nbrowser is online or offline. If you want to implement an \"offline fallback\",\nthen using an approach similar to [this example](https://googlechrome.github.io/samples/service-worker/custom-offline-page/)\nis more appropriate.\n\n_Default_: `''`\n\n#### navigateFallbackWhitelist [Array&#x27e8;RegExp&#x27e9;]\nWorks to limit the effect of `navigateFallback`, so that the fallback only\napplies to requests for URLs with paths that match at least one\n[`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n\nThis option is useful if you want to fallback to the cached App Shell for\ncertain specific subsections of your site, but not have that behavior apply\nto all of your site's URLs.\n\nFor example, if you would like to have `navigateFallback` only apply to\nnavigation requests to URLs whose path begins with `/guide/`\n(e.g. `https://example.com/guide/1234`), the following configuration could be\nused:\n\n```js\nnavigateFallback: '/shell',\nnavigateFallbackWhitelist: [/^\\/guide\\//]\n```\n\nIf set to `[]` (the default), the whitelist will be effectively bypassed, and\n`navigateFallback` will apply to all navigation requests, regardless of URL.\n\n_Default_: `[]`\n\n#### replacePrefix [String]\nReplaces a specified string at the beginning of path URL's at runtime. Use this\noption when you are serving static files from a different directory at runtime\nthan you are at build time. For example, if your local files are under\n`dist/app/` but your static asset root is at `/public/`, you'd strip 'dist/app/'\nand replace it with '/public/'.\n\n_Default_: `''`\n\n#### runtimeCaching [Array&#x27e8;Object&#x27e9;]\nConfigures runtime caching for dynamic content. If you use this option, the `sw-toolbox`\nlibrary configured with the caching strategies you specify will automatically be included in\nyour generated service worker file.\n\nEach `Object` in the `Array` needs a `urlPattern`, which is either a\n[`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\nor a string, following the conventions of the `sw-toolbox` library's\n[routing configuration](https://googlechromelabs.github.io/sw-toolbox/api.html#main). Also required is\na `handler`, which should be either a string corresponding to one of the\n[built-in handlers](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers) under the `toolbox.` namespace, or a function corresponding to your custom\n[request handler](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers).\nOptionally, `method` can be added to specify one of the [supported HTTP methods](https://googlechromelabs.github.io/sw-toolbox/api.html#expressive-approach) (_default: `'get'`_). There is also\nsupport for `options`, which corresponds to the same options supported by a\n[`sw-toolbox` handler](https://googlechromelabs.github.io/sw-toolbox/api.html#handlers).\n\nFor example, the following defines runtime caching behavior for two different URL patterns. It uses a\ndifferent handler for each, and specifies a dedicated cache with maximum size for requests\nthat match `/articles/`:\n\n```js\nruntimeCaching: [{\n  urlPattern: /^https:\\/\\/example\\.com\\/api/,\n  handler: 'networkFirst'\n}, {\n  urlPattern: /\\/articles\\//,\n  handler: 'fastest',\n  options: {\n    cache: {\n      maxEntries: 10,\n      name: 'articles-cache'\n    }\n  }\n}]\n```\n\nThe [`sw-precache` + `sw-toolbox` explainer](sw-precache-and-sw-toolbox.md) has\nmore information about how and why you'd use both libraries together.\n\n_Default_: `[]`\n\n#### skipWaiting [Boolean]\nControls whether or not the generated service worker will call\n[`skipWaiting()`](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting)\ninside the `install` handler.\n\nBy default, when there's an update to a previously installed\nservice worker, then the new service worker delays activation and stays in a\n`waiting` state until all pages controlled by the old service worker are\nunloaded. Calling `skipWaiting()` allows a newly registered service worker to\nbypass the `waiting` state.\n\nWhen `skipWaiting` is `true`, the new service worker's `activate` handler will\nbe called immediately, and any out of date cache entries from the previous\nservice worker will be deleted. Please keep this in mind if you rely on older\ncached resources to be available throughout the page's lifetime, because, for\nexample, you [defer the loading of some resources](https://github.com/GoogleChrome/sw-precache/issues/180)\nuntil they're needed at runtime.\n\n_Default_: `true`\n\n#### staticFileGlobs [Array&#x27e8;String&#x27e9;]\nAn array of one or more string patterns that will be passed in to\n[`glob`](https://github.com/isaacs/node-glob).\nAll files matching these globs will be automatically precached by the generated service worker.\nYou'll almost always want to specify something for this.\n\n_Default_: `[]`\n\n#### stripPrefix [String]\nRemoves a specified string from the beginning of path URL's at runtime. Use this\noption when there's a discrepancy between a relative path at build time and\nthe same path at run time. For example, if all your local files are under\n`dist/app/` and your web root is also at `dist/app/`, you'd strip that prefix\nfrom the start of each local file's path in order to get the correct relative\nURL.\n\n_Default_: `''`\n\n#### stripPrefixMulti [Object]\nMaps multiple strings to be stripped and replaced from the beginning of URL paths at runtime.\nUse this option when you have multiple discrepancies between relative paths at build time and\nthe same path at run time.\nIf `stripPrefix` and `replacePrefix` are not equal to `''`, they are automatically added to this option.\n```js\nstripPrefixMulti: {\n  'www-root/public-precached/': 'public/',\n  'www-root/public/': 'public/'\n}\n```\n\n_Default_: `{}`\n\n#### templateFilePath [String]\n\nThe path to the  ([lo-dash](https://lodash.com/docs#template)) template used to\ngenerate `service-worker.js`. If you need to add additional functionality to the\ngenerated service worker code, it's recommended that you use the\n[`importScripts`](#importscripts-arraystring) option to include extra JavaScript rather than\nusing a different template. But if you do need to change the basic generated\nservice worker code, please make a copy of the [original template](https://github.com/googlechrome/sw-precache/blob/master/service-worker.tmpl),\nmodify it locally, and use this option to point to your template file.\n\n_Default_: `service-worker.tmpl` (in the directory that this module lives in)\n\n#### verbose [boolean]\nDetermines whether there's log output for each individual static/dynamic resource that's precached.\nEven if this is set to false, there will be a final log entry indicating the total size of all\nprecached resources.\n\n_Default_: `false`\n\n\n## Wrappers and Starter Kits\n\nWhile it's possible to use the `sw-precache` module's API directly within any\nJavaScript environment, several wrappers have been developed by members of the\ncommunity tailored to specific build environments. They include:\n- [`sw-precache-webpack-plugin`](https://www.npmjs.com/package/sw-precache-webpack-plugin)\n- [`sw-precache-brunch`](https://www.npmjs.com/package/sw-precache-brunch)\n- [`grunt-sw-precache`](https://www.npmjs.com/package/grunt-sw-precache)\n- [`exhibit-builder-sw-precache`](https://www.npmjs.com/package/exhibit-builder-sw-precache)\n\nThere are also several starter kits or scaffolding projects that incorporate\n`sw-precache` into their build process, giving you a full service worker out of\nthe box. The include:\n\n### CLIs\n\n- [`polymer-cli`](https://github.com/Polymer/polymer-cli)\n- [`create-react-pwa`](https://github.com/jeffposnick/create-react-pwa)\n\n### Starter Kits\n\n- [`react-redux-universal-hot-example`](https://github.com/bertho-zero/react-redux-universal-hot-example)\n- [Polymer Starter Kit](https://github.com/polymerelements/polymer-starter-kit)\n- [Web Starter Kit](https://github.com/google/web-starter-kit)\n\n### Recipes for writing a custom wrapper\n\nWhile there are not always ready-to-use wrappers for specific environments, this list contains some recipes to integrate `sw-precache` in your workflow:\n\n- [Gradle wrapper for offline JavaDoc](https://gist.github.com/TimvdLippe/4c39b99e3b0ffbcdd8814a31e2969ed1)\n- [Brunch starter for Phoenix Framework](https://gist.github.com/natecox/b19c4e08408a5bf0d4cf4d74f1902260)\n\n## Acknowledgements\n\nThanks to [Sindre Sorhus](https://github.com/sindresorhus) and\n[Addy Osmani](https://github.com/addyosmani) for their advice and code reviews.\n[Jake Archibald](https://github.com/jakearchibald) was kind enough to review the service worker logic.\n\n## Support\n\nThe team behind `sw-toolbox` and `sw-precache` have been busy creating [Workbox](https://workboxjs.org), which is a collection of libraries and tools that make it easy to build offline web apps. It’s a joining of [sw-toolbox](https://github.com/GoogleChrome/sw-toolbox) and [sw-precache](https://github.com/GoogleChrome/sw-precache) with more features and a modern codebase.\n\n### What does this mean for sw-toolbox?\n\nFor now, it means we’ll continue to support both `sw-toolbox` and `sw-precache` with critical bug fixes and releases. However, non-critical bugs are unlikely to be addressed.\n\n### Should you switch to Workbox?\n\nWe would recommend Workbox for new projects, but there is no immediate need to switch if `sw-toolbox` / `sw-precache` meets all your needs in your current project. We will announce a deprecation plan for these modules once Workbox has feature parity with `sw-toolbox` and `sw-precache`.\n\nIn the meantime, you can get updates by following [@workboxjs](https://twitter.com/workboxjs).\n\n## License\n\nCopyright © 2017 Google, Inc.\n\nLicensed under the [Apache License, Version 2.0](LICENSE) (the \"License\");\nyou may not use this file except in compliance with the License. You may\nobtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n[npm-url]: https://npmjs.org/package/sw-precache\n[npm-image]: https://badge.fury.io/js/sw-precache.svg\n[travis-url]: https://travis-ci.org/GoogleChrome/sw-precache\n[travis-image]: https://travis-ci.org/GoogleChrome/sw-precache.svg?branch=master\n[daviddm-url]: https://david-dm.org/googlechrome/sw-precache.svg?theme=shields.io\n[daviddm-image]: https://david-dm.org/googlechrome/sw-precache\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/googlechrome/sw-precache.git"
  },
  "scripts": {
    "doctoc": "doctoc",
    "test": "gulp test lint"
  },
  "version": "5.2.1"
}

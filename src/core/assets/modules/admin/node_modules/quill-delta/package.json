{
  "_args": [
    [
      {
        "raw": "quill-delta@^3.6.2",
        "scope": null,
        "escapedName": "quill-delta",
        "name": "quill-delta",
        "rawSpec": "^3.6.2",
        "spec": ">=3.6.2 <4.0.0",
        "type": "range"
      },
      "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/quill"
    ]
  ],
  "_from": "quill-delta@>=3.6.2 <4.0.0",
  "_id": "quill-delta@3.6.2",
  "_inCache": true,
  "_location": "/quill-delta",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/quill-delta-3.6.2.tgz_1505684790070_0.6287770438939333"
  },
  "_npmUser": {
    "name": "jhchen",
    "email": "jhchen7@gmail.com"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "quill-delta@^3.6.2",
    "scope": null,
    "escapedName": "quill-delta",
    "name": "quill-delta",
    "rawSpec": "^3.6.2",
    "spec": ">=3.6.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/quill"
  ],
  "_resolved": "https://registry.npmjs.org/quill-delta/-/quill-delta-3.6.2.tgz",
  "_shasum": "76eed0163b8b09a076fba6ade29307c42b40b8d8",
  "_shrinkwrap": null,
  "_spec": "quill-delta@^3.6.2",
  "_where": "/Users/vt/Desktop/projects/newv1/dashboard/node_modules/quill",
  "author": {
    "name": "Jason Chen",
    "email": "jhchen7@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/quilljs/delta/issues"
  },
  "dependencies": {
    "deep-equal": "^1.0.1",
    "extend": "^3.0.1",
    "fast-diff": "1.1.2"
  },
  "description": "Format for representing rich text documents and changes.",
  "devDependencies": {
    "coveralls": "^2.13.1",
    "istanbul": "~0.4.5",
    "jasmine": "^2.8.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-grWEQq9woEidPDogtDNxQKmy2LFf9zBC0EU/YTSw6TwKmMjtihTxdnPtPRfrqazB2MSJ7YdCWxmsJ7aQKRSEgg==",
    "shasum": "76eed0163b8b09a076fba6ade29307c42b40b8d8",
    "tarball": "https://registry.npmjs.org/quill-delta/-/quill-delta-3.6.2.tgz"
  },
  "engines": {
    "node": ">=0.10"
  },
  "gitHead": "dafd991d7d1afa4e0fa3ecbe6bb81f063d18f32c",
  "homepage": "https://github.com/quilljs/delta",
  "keywords": [
    "rich text",
    "ot",
    "operational transform",
    "delta"
  ],
  "license": "MIT",
  "main": "lib/delta.js",
  "maintainers": [
    {
      "name": "jhchen",
      "email": "jhchen7@gmail.com"
    }
  ],
  "name": "quill-delta",
  "optionalDependencies": {},
  "readme": "# Delta [![Build Status](https://travis-ci.org/quilljs/delta.svg?branch=master)](http://travis-ci.org/quilljs/delta) [![Coverage Status](https://img.shields.io/coveralls/quilljs/delta.svg)](https://coveralls.io/r/quilljs/delta)\n\nDeltas are a simple, yet expressive format that can be used to describe contents and changes. The format is JSON based, and is human readable, yet easily parsible by machines. Deltas can describe any rich text document, includes all text and formatting information, without the ambiguity and complexity of HTML.\n\nA Delta is made up of an [Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array) of Operations, which describe changes to a document. They can be an [`insert`](#insert-operation), [`delete`](#delete-operation) or [`retain`](#retain-operation). Note operations do not take an index. They always describe the change at the current index. Use retains to \"keep\" or \"skip\" certain parts of the document.\n\nDonâ€™t be confused by its name Delta&mdash;Deltas represents both documents and changes to documents. If you think of Deltas as the instructions from going from one document to another, the way Deltas represent a document is by expressing the instructions starting from an empty document.\n\n\n## Quick Example\n\n```js\n// Document with text \"Gandalf the Grey\"\n// with \"Gandalf\" bolded, and \"Grey\" in grey\nvar delta = new Delta([\n  { insert: 'Gandalf', attributes: { bold: true } },\n  { insert: ' the ' },\n  { insert: 'Grey', attributes: { color: '#ccc' } }\n]);\n\n// Change intended to be applied to above:\n// Keep the first 12 characters, delete the next 4,\n// and insert a white 'White'\nvar death = new Delta().retain(12)\n                       .delete(4)\n                       .insert('White', { color: '#fff' });\n// {\n//   ops: [\n//     { retain: 12 },\n//     { delete: 4 },\n//     { insert: 'White', attributes: { color: '#fff' } }\n//   ]\n// }\n\n// Applying the above:\nvar restored = delta.compose(death);\n// {\n//   ops: [\n//     { insert: 'Gandalf ', attributes: { bold: true } },\n//     { insert: 'the ' },\n//     { insert: 'White', attributes: { color: '#fff' } }\n//   ]\n// }\n\n```\n\nThis README describes Deltas in its general form and API functionality. Additional information on the way Quill specifically uses Deltas can be found on its own [Delta docs](http://quilljs.com/docs/delta/). A walkthough of the motivation and design thinking behind Deltas are on [Designing the Delta Format](http://quilljs.com/guides/designing-the-delta-format/).\n\nThis format is suitable for [Operational Transform](https://en.wikipedia.org/wiki/Operational_transformation) and defines several functions to support this use case.\n\n\n## Contents\n\n#### Operations\n\n- [`insert`](#insert-operation)\n- [`delete`](#delete-operation)\n- [`retain`](#retain-operation)\n\n#### Construction\n\n- [`constructor`](#constructor)\n- [`insert`](#insert)\n- [`delete`](#delete)\n- [`retain`](#retain)\n\n#### Documents\n\nThese methods called on or with non-document Deltas will result in undefined behavior.\n\n- [`concat`](#concat)\n- [`diff`](#diff)\n- [`eachLine`](#eachline)\n\n#### Utility\n\n- [`filter`](#filter)\n- [`forEach`](#foreach)\n- [`length`](#length)\n- [`map`](#map)\n- [`partition`](#partition)\n- [`reduce`](#reduce)\n- [`slice`](#slice)\n\n#### Operational Transform\n\n- [`compose`](#compose)\n- [`transform`](#transform)\n- [`transformPosition`](#transformposition)\n\n\n## Operations\n\n### Insert Operation\n\nInsert operations have an `insert` key defined. A String value represents inserting text. Any other type represents inserting an embed (however only one level of object comparison will be performed for equality).\n\nIn both cases of text and embeds, an optional `attributes` key can be defined with an Object to describe additonal formatting information. Formats can be changed by the [retain](#retain) operation.\n\n```js\n// Insert a bolded \"Text\"\n{ insert: \"Text\", attributes: { bold: true } }\n\n// Insert a link\n{ insert: \"Google\", attributes: { link: 'https://www.google.com' } }\n\n// Insert an embed\n{\n  insert: { image: 'https://octodex.github.com/images/labtocat.png' },\n  attributes: { alt: \"Lab Octocat\" }\n}\n\n// Insert another embed\n{\n  insert: { video: 'https://www.youtube.com/watch?v=dMH0bHeiRNg' },\n  attributes: {\n    width: 420,\n    height: 315\n  }\n}\n```\n\n### Delete Operation\n\nDelete operations have a Number `delete` key defined representing the number of characters to delete. All embeds have a length of 1.\n\n```js\n// Delete the next 10 characters\n{ delete: 10 }\n```\n\n### Retain Operation\n\nRetain operations have a Number `retain` key defined representing the number of characters to keep (other libraries might use the name keep or skip). An optional `attributes` key can be defined with an Object to describe formatting changes to the character range. A value of `null` in the `attributes` Object represents removal of that key.\n\n*Note: It is not necessary to retain the last characters of a document as this is implied.*\n\n```js\n// Keep the next 5 characters\n{ retain: 5 }\n\n// Keep and bold the next 5 characters\n{ retain: 5, attributes: { bold: true } }\n\n// Keep and unbold the next 5 characters\n// More specifically, remove the bold key in the attributes Object\n// in the next 5 characters\n{ retain: 5, attributes: { bold: null } }\n```\n\n\n## Construction\n\n### constructor\n\nCreates a new Delta object.\n\n#### Methods\n\n- `new Delta()`\n- `new Delta(ops)`\n- `new Delta(delta)`\n\n#### Parameters\n\n- `ops` - Array of operations\n- `delta` - Object with an `ops` key set to an array of operations\n\n*Note: No validity/sanity check is performed when constructed with ops or delta. The new delta's internal ops array will also be assigned from ops or delta.ops without deep copying.*\n\n#### Example\n\n```js\nvar delta = new Delta([\n  { insert: 'Hello World' },\n  { insert: '!', attributes: { bold: true }}\n]);\n\nvar packet = JSON.stringify(delta);\n\nvar other = new Delta(JSON.parse(packet));\n\nvar chained = new Delta().insert('Hello World').insert('!', { bold: true });\n```\n\n---\n\n### insert()\n\nAppends an insert operation. Returns `this` for chainability.\n\n#### Methods\n\n- `insert(text, attributes)`\n- `insert(embed, attributes)`\n\n#### Parameters\n\n- `text` - String representing text to insert\n- `embed` - Number representing embed type to insert\n- `attributes` - Optional attributes to apply\n\n#### Example\n\n```js\ndelta.insert('Text', { bold: true, color: '#ccc' });\ndelta.insert(1, { src: 'https://octodex.github.com/images/labtocat.png' });\n```\n\n---\n\n### delete()\n\nAppends a delete operation. Returns `this` for chainability.\n\n#### Methods\n\n- `delete(length)`\n\n#### Parameters\n\n- `length` - Number of characters to delete\n\n#### Example\n\n```js\ndelta.delete(5);\n```\n\n---\n\n### retain()\n\nAppends a retain operation. Returns `this` for chainability.\n\n#### Methods\n\n- `retain(length, attributes)`\n\n#### Parameters\n\n- `length` - Number of characters to retain\n- `attributes` - Optional attributes to apply\n\n#### Example\n\n```js\ndelta.retain(4).retain(5, { color: '#0c6' });\n```\n\n## Documents\n\n### concat()\n\nReturns a new Delta representing the concatenation of this and another document Delta's operations.\n\n#### Methods\n\n- `concat(other)`\n\n#### Parameters\n\n- `other` - Document Delta to concatenate\n\n#### Returns\n\n- `Delta` - Concatenated document Delta\n\n#### Example\n\n```js\nvar a = new Delta().insert('Hello');\nvar b = new Delta().insert('!', { bold: true });\n\n\n// {\n//   ops: [\n//     { insert: 'Hello' },\n//     { insert: '!', attributes: { bold: true } }\n//   ]\n// }\nvar concat = a.concat(b);\n```\n\n---\n\n### diff()\n\nReturns a Delta representing the difference between two documents. Optionally, accepts a suggested index where change took place, often representing a cursor position *before* change.\n\n#### Methods\n\n- `diff(other)`\n- `diff(other, index)`\n\n#### Parameters\n\n- `other` - Document Delta to diff against\n- `index` - Suggested index where change took place\n\n#### Returns\n\n- `Delta` - difference between the two documents\n\n#### Example\n\n```js\nvar a = new Delta().insert('Hello');\nvar b = new Delta().insert('Hello!');\n\nvar diff = a.diff(b);  // { ops: [{ retain: 5 }, { insert: '!' }] }\n                       // a.compose(diff) == b\n\n```\n\n---\n\n### eachLine()\n\nIterates through document Delta, calling a given function with a Delta and attributes object, representing the line segment.\n\n#### Methods\n\n- `eachLine(predicate, newline)`\n\n#### Parameters\n\n- `predicate` - function to call on each line group\n- `newline` - newline character, defaults to `\\n`\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello\\n\\n')\n                       .insert('World')\n                       .insert({ image: 'octocat.png' })\n                       .insert('\\n', { align: 'right' })\n                       .insert('!');\n\ndelta.eachLine(function(line, attributes, i) {\n  console.log(line, attributes, i);\n  // Can return false to exit loop early\n});\n// Should log:\n// { ops: [{ insert: 'Hello' }] }, {}, 0\n// { ops: [] }, {}, 1\n// { ops: [{ insert: 'World' }, { insert: { image: 'octocat.png' } }] }, { align: 'right' }, 2\n// { ops: [{ insert: '!' }] }, {}, 3\n```\n\n\n## Utility\n\n### filter()\n\nReturns an array of operations that passes a given function.\n\n#### Methods\n\n- `filter(predicate)`\n\n#### Parameters\n\n- `predicate` - Function to test each operation against. Return `true` to keep the operation, `false` otherwise.\n\n#### Returns\n\n- `Array` - Filtered resulting array\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello', { bold: true })\n                       .insert({ image: 'https://octodex.github.com/images/labtocat.png' })\n                       .insert('World!');\n\nvar text = delta.filter(function(op) {\n  return typeof op.insert === 'string';\n}).map(function(op) {\n  return op.insert;\n}).join('');\n```\n\n---\n\n### forEach()\n\nIterates through operations, calling the provided function for each operation.\n\n#### Methods\n\n- `forEach(predicate)`\n\n#### Parameters\n\n- `predicate` - Function to call during iteration, passing in the current operation.\n\n#### Example\n\n```js\ndelta.forEach(function(op) {\n  console.log(op);\n});\n```\n\n---\n\n### length()\n\nReturns length of a Delta, which is the sum of the lengths of its operations.\n\n#### Methods\n\n- `length()`\n\n#### Example\n\n```js\nnew Delta().insert('Hello').length();  // Returns 5\n\nnew Delta().insert('A').retain(2).delete(1) // Returns 4\n```\n\n---\n\n### map()\n\nReturns a new array with the results of calling provided function on each operation.\n\n#### Methods\n\n- `map(predicate)`\n\n#### Parameters\n\n- `predicate` - Function to call, passing in the current operation, returning an element of the new array to be returned\n\n#### Returns\n\n- `Array` - A new array with each element being the result of the given function.\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello', { bold: true })\n                       .insert({ image: 'https://octodex.github.com/images/labtocat.png' })\n                       .insert('World!');\n\nvar text = delta.map(function(op) {\n  if (typeof op.insert === 'string') {\n    return op.insert;\n  } else {\n    return '';\n  }\n}).join('');\n```\n\n---\n\n### partition()\n\nCreate an array of two arrays, the first with operations that pass the given function, the other that failed.\n\n#### Methods\n\n- `partition(predicate)`\n\n#### Parameters\n\n- `predicate` - Function to call, passing in the current operation, returning whether that operation passed\n\n#### Returns\n\n- `Array` - A new array of two Arrays, the first with passed operations, the other with failed operations\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello', { bold: true })\n                       .insert({ image: 'https://octodex.github.com/images/labtocat.png' })\n                       .insert('World!');\n\nvar results = delta.partition(function(op) {\n  return typeof op.insert === 'string';\n});\nvar passed = results[0];  // [{ insert: 'Hello', attributes: { bold: true }},\n                              { insert: 'World'}]\nvar failed = results[1];  // [{ insert: { image: 'https://octodex.github.com/images/labtocat.png' }}]\n```\n\n---\n\n### reduce()\n\nApplies given function against an accumulator and each operation to reduce to a single value.\n\n#### Methods\n\n- `reduce(predicate, initialValue)`\n\n#### Parameters\n\n- `predicate` - Function to call per iteration, returning an accumulated value\n- `initialValue` - Initial value to pass to first call to predicate\n\n#### Returns\n\n- `any` - the accumulated value\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello', { bold: true })\n                       .insert({ image: 'https://octodex.github.com/images/labtocat.png' })\n                       .insert('World!');\n\nvar length = delta.reduce(function(length, op) {\n  return length + (op.insert.length || 1);\n}, 0);\n```\n\n---\n\n### slice()\n\nReturns copy of delta with subset of operations.\n\n#### Methods\n\n- `slice()`\n- `slice(start)`\n- `slice(start, end)`\n\n#### Parameters\n\n- `start` - Start index of subset, defaults to 0\n- `end` - End index of subset, defaults to rest of operations\n\n#### Example\n\n```js\nvar delta = new Delta().insert('Hello', { bold: true }).insert(' World');\n\n// {\n//   ops: [\n//     { insert: 'Hello', attributes: { bold: true } },\n//     { insert: ' World' }\n//   ]\n// }\nvar copy = delta.slice();\n\n// { ops: [{ insert: 'World' }] }\nvar world = delta.slice(6);\n\n// { ops: [{ insert: ' ' }] }\nvar space = delta.slice(5, 6);\n```\n\n\n## Operational Transform\n\n### compose()\n\nReturns a Delta that is equivalent to applying the operations of own Delta, followed by another Delta.\n\n#### Methods\n\n- `compose(other)`\n\n#### Parameters\n\n- `other` - Delta to compose\n\n#### Example\n\n```js\nvar a = new Delta().insert('abc');\nvar b = new Delta().retain(1).delete(1);\n\nvar composed = a.compose(b);  // composed == new Delta().insert('ac');\n\n```\n\n---\n\n### transform()\n\nTransform given Delta against own operations.\n\n#### Methods\n\n- `transform(other, priority)`\n- `transform(index)` - Alias for [`transformPosition`](#tranformposition)\n\n#### Parameters\n\n- `other` - Delta to transform\n- `priority` - Boolean used to break ties. If `true`, then `this` takes priority\n  over `other`, that is, its actions are considered to happen \"first.\"\n\n#### Returns\n\n- `Delta` - transformed Delta\n\n#### Example\n\n```js\nvar a = new Delta().insert('a');\nvar b = new Delta().insert('b').retain(5).insert('c');\n\na.transform(b, true);  // new Delta().retain(1).insert('b').retain(5).insert('c');\na.transform(b, false); // new Delta().insert('b').retain(6).insert('c');\n```\n\n---\n\n### transformPosition()\n\nTransform an index against the delta. Useful for representing cursor/selection positions.\n\n#### Methods\n\n- `transformPosition(index)`\n\n#### Parameters\n\n- `index` - index to transform\n\n#### Returns\n\n- `Number` - transformed index\n\n#### Example\n\n```js\nvar delta = new Delta().retain(5).insert('a');\ndelta.transformPosition(4); // 4\ndelta.transformPosition(5); // 6\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/quilljs/delta.git"
  },
  "scripts": {
    "test": "jasmine test/**/*.js",
    "test:coverage": "istanbul cover jasmine test/**/*.js",
    "test:coverage:report": "cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js"
  },
  "version": "3.6.2"
}

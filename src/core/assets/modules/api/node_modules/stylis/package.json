{
  "_args": [
    [
      {
        "raw": "stylis@^3.3.2",
        "scope": null,
        "escapedName": "stylis",
        "name": "stylis",
        "rawSpec": "^3.3.2",
        "spec": ">=3.3.2 <4.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/emotion"
    ]
  ],
  "_from": "stylis@>=3.3.2 <4.0.0",
  "_id": "stylis@3.5.0",
  "_inCache": true,
  "_location": "/stylis",
  "_nodeVersion": "9.7.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/stylis_3.5.0_1520534772211_0.16393660434602486"
  },
  "_npmUser": {
    "name": "thysultan",
    "email": "sultantarimo@me.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stylis@^3.3.2",
    "scope": null,
    "escapedName": "stylis",
    "name": "stylis",
    "rawSpec": "^3.3.2",
    "spec": ">=3.3.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/emotion"
  ],
  "_resolved": "https://registry.npmjs.org/stylis/-/stylis-3.5.0.tgz",
  "_shasum": "016fa239663d77f868fef5b67cf201c4b7c701e1",
  "_shrinkwrap": null,
  "_spec": "stylis@^3.3.2",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/emotion",
  "author": {
    "name": "Sultan Tarimo",
    "email": "sultantarimo@me.com"
  },
  "bugs": {
    "url": "https://github.com/thysultan/stylis.js/issues"
  },
  "dependencies": {},
  "description": "light - weight css preprocessor",
  "devDependencies": {
    "uglify-js": "^3.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-pP7yXN6dwMzAR29Q0mBrabPCe0/mNO1MSr93bhay+hcZondvMMTpeGyd8nbhYJdyperNT2DRxONQuUGcJr5iPw==",
    "shasum": "016fa239663d77f868fef5b67cf201c4b7c701e1",
    "tarball": "https://registry.npmjs.org/stylis/-/stylis-3.5.0.tgz",
    "fileCount": 8,
    "unpackedSize": 98409
  },
  "files": [
    "stylis.js",
    "stylis.min.js",
    "stylis.min.js.map",
    "stylis.d.ts"
  ],
  "gitHead": "fa94aa72ba1b65bfe66c012225e6fccbde736c54",
  "homepage": "https://github.com/thysultan/stylis.js",
  "jsdelivr": "stylis.min.js",
  "keywords": [
    "css",
    "preprocessor"
  ],
  "license": "MIT",
  "main": "stylis.js",
  "maintainers": [
    {
      "name": "thysultan",
      "email": "sultantarimo@me.com"
    }
  ],
  "name": "stylis",
  "optionalDependencies": {},
  "readme": "# STYLIS\n\n[![stylis](https://stylis.js.org/assets/logo.svg)](https://github.com/thysultan/stylis.js)\n\nlight â€“ weight css preprocessor\n\n- 3Kb\n\n[![npm](https://img.shields.io/npm/v/stylis.svg?style=flat)](https://www.npmjs.com/package/stylis) [![licence](https://img.shields.io/badge/licence-MIT-blue.svg?style=flat)](https://github.com/thysultan/stylis.js/blob/master/LICENSE.md) [![Build Status](https://semaphoreci.com/api/v1/thysultan/stylis-js/branches/master/shields_badge.svg)](https://semaphoreci.com/thysultan/stylis-js) ![dependencies](https://img.shields.io/badge/dependencies-none-green.svg?style=flat)\n\n## Supports\n\n* Edge\n* IE 8+\n* Chrome\n* Firefox\n* Safari\n* Node\n\n---\n\n## Installation\n\n#### direct download\n\n```html\n<script src=stylis.min.js></script>\n```\n\n#### CDN\n\n\n```html\n<script src=https://unpkg.com/stylis@latest/stylis.min.js></script>\n```\n\n#### npm\n\n```\nnpm install stylis --save\n```\n\n## Features\n\n- selector namespacing/isolation\n- inline global injection ex. `:global(selector)`\n- nesting `a { &:hover {} }`\n- vendor prefixing (flex-box, etc...)\n- flat stylesheets `color: red; h1 { color: red; }`\n- keyframe and animation namespacing\n- plugins\n- minification\n- built to support [closure-compiler advanced mode](https://developers.google.com/closure/compiler)\n\n---\n\n## Input\n\n```javascript\nstylis('#id', `\nfont-size: 2em;\n\n// line comments\n/* block comments */\n\n:global(body) {background:red}\n\nh1 {\n\th2 {\n\t\th3 {\n\t\t\tcontent:'nesting'\n\t\t}\n\t}\n}\n\n@media (max-width: 600px) {\n\t& {display:none}\n}\n\n&:before {\n\tanimation: slide 3s ease infinite\n}\n\n@keyframes slide {\n\tfrom { opacity: 0}\n\tto { opacity: 1}\n}\n\n& {\n\tdisplay: flex\n}\n\n&::placeholder {\n\tcolor:red\n}\n`);\n```\n\n## Output\n\n```css\n#id {font-size: 2em;}\n\nbody {background:red}\nh1 h2 h3 {content: 'nesting'}\n\n@media (max-width: 600px) {\n\t#id {display:none}\n}\n\n#id:before {\n\t-webkit-animation: slide-id 3s ease infinite;\n\tanimation: slide-id 3s ease infinite;\n}\n\n\n@-webkit-keyframes slide-id {\n\tfrom { opacity: 0}\n\tto { opacity: 1}\n}\n@keyframes slide-id {\n\tfrom { opacity: 0}\n\tto { opacity: 1}\n}\n\n#id {\n\tdisplay:-webkit-box;\n\tdisplay:-webkit-flex;\n\tdisplay:-ms-flexbox;\n\tdisplay:flex;\n}\n\n#id::-webkit-input-placeholder {color:red;}\n#id::-moz-placeholder {color:red;}\n#id:-ms-input-placeholder {color:red;}\n#id::placeholder {color:red;}\n```\n\n## API\n\n#### Stylis\n\n```javascript\nstylis(selector: {String}, css: {String})\n```\n\n#### Factory\n\n```js\n// factory pattern\nvar stylis = new stylis(options)\n\n// singleton pattern\nvar stylis = stylis\n```\n\nWhen using the factory pattern the if an object is passed as optional `options` argument, this will be passed to `stylis.set(options)`\n\n#### Set\n\n```javascript\n// all options except compress and cascade are enabled by default\nstylis.set({\n\t// (dis/en)able :global selectors\n\tglobal: {Boolean}\n\n\t// (dis/en)able aggressive cascade isolation\n\t// true for normal cascade(default) false for no cascading\n\tcascade: {Boolean}\n\n\t// (dis/en)able namespace keyframes + animations\n\tkeyframe: {Boolean}\n\n\t// (dis/en)able vendor prefixing\n\tprefix: {Boolean|Function(key: string, value: string, context: number)}\n\n\t// (dis/en)able aggressive minification\n\tcompress: {Boolean}\n\n\t// (dis/en)able (no)semicolon support\n\t// false to enable no-semicolons (default)\n\tsemicolon: {Boolean},\n\n\t// tell stylis to make an effort to preserve empty rules,\n\t// i.e `.selector{ }`\n\tpreserve: {Boolean}\n})\n```\n\n#### Vendor Prefixing\n\nBy default vendor is enabled, however there is an option to disable vendor prefixing, either completely or dynamically.\n\nThe following would disable prefixing.\n\n```js\nstylis.set({prefix: false})\n```\n\nAlternatively you can disable prefixing on a case by case basis by providing a function that returns a `boolean` indiciating whether to prefixing that particular rule.\n\n```js\nstylis.set({\n\tprefix: (key, value, context) => {\n\t\treturn false\n\t}\n})\n```\n\nThe arguments correspond to the rule that is about to be vendor prefixed. For example:\n\n```js\n// transform: none;\nkey = 'transform'\nvalue = 'none'\ncontext = 1\n\n// :read-only {...}\nkey = ':read-only'\nvalue = '...'\ncontext = 2\n\n// @keyframes {...}\nkey = '@keyframes'\nvalue = '...'\ncontext = 3\n```\n\n#### Use\n\n```javascript\nstylis.use(plugin: {Function|Array<Function>|null})\n```\n\nThe use function is chainable ex. `stylis.use()()()`\n\n## Plugins\n\nThe optional middleware function accepts four arguments with `this` pointing to a reference of the current stylis instance.\n\n```js\n(context, content, selectors, parent, line, column, length)\n```\n\nPlugins are executed in stages identified by an `context` interger value.\n\n```\n-2 /* post-process context */\n-1 /* preparation context */\n0  /* newline context */\n\n1  /* property context */\n2  /* selector block context */\n3  /* @at-rule block context */\n```\n\n> Note: Since the newline context is intended for source-map plugins by default stylis will not execute plugins in this context unless enabled, this can be done through `stylis.use(true)` or disabled after that through `stylis.use(false)`.\n\n- `-2` post processed context, before the compiled css output is returned\n- `-1` preparation context, before the compiler starts\n- `0` after every newline\n- `1` on a property declaration ex. `color: red;`\n- `2` after a selector block of css has been processed ex. `.foo {color:red;}`\n- `3` after a `@at-rule` block of css has been processed ex. `@media {h1{color:red;}}`\n\nIf at any context(except 0) that the middleware returns a different string the content of css will be replaced with the return value.\n\nTo remove all plugins just call `.use` with null/no arguments.\n\n```js\n// removes all previously added plugins, then adds one\nstylis.use(null)(ctx => {})\n```\n\nFor example we can add a feature `random()` to our css that when used prints a random number.\n\n```javascript\n/**\n * plugin\n *\n * @param  {number} context\n * @param  {Array<string>} selector\n * @param  {Array<string>} parent\n * @param  {string} content\n * @param  {number} line\n * @param  {number} column\n * @param  {number} length\n * @return {(string|void)?}\n */\nconst plugin = (context, content, selectors, parent, line, column, length) => {\n\tswitch (context) {\n\t\tcase 1: return content.replace(/random\\(\\)/g, Math.random())\n\t}\n}\n\n/**\n * use\n *\n * @param {(Array<function>|function|null|boolean)} plugin\n * @return {Function} use\n */\nstylis.use(plugin)\n\nstylis(``, `h1 { width: calc(random()*10); }`)\n```\n\nThis will replace all instances of `random()` with a random number.\n\nInternally Before stylis processes `calc(random()*10);` it passes it to the plugin if a plugin exists; If in turn the plugin returns something different from what it received stylis will replace the content of the property with the return value and continue processing that.\n\nThe same can be said for a selector block, in both contexts an argument `selector` is passed that contains the current array of selectors that the block of css/property stylis is working on.\n\nThis array of selectors is mutable and will reflect the output of selectors if changed.\n\n## Benchmark\n\nStylis is fast, and though it does not generate an AST you can with a plugin create an AST out of the resulting input, this and other aspects allow it to be very small(3KB).\n\nThe benchmark results are using [https://github.com/postcss/benchmark](https://github.com/postcss/benchmark)\n\n> Note that the benchmark is not a one-2-one comparison because each library was developed for different goals and different set of features.\n\nStylis appears in all the benchmarks because by default stylis both parsers, processes and auto prefixes in one pass.\n\n#### Parsers\n\n```\nStylis       x 54.28 ops/sec Â±4.45% (58 runs sampled)\nCSSTree      x 39.73 ops/sec Â±9.18% (56 runs sampled)\nPostCSS      x 21.11 ops/sec Â±8.46% (57 runs sampled)\nCSSOM        x 19.20 ops/sec Â±6.53% (36 runs sampled)\nMensch       x 17.85 ops/sec Â±13.39% (37 runs sampled)\nRework       x 12.80 ops/sec Â±4.42% (36 runs sampled)\nPostCSS Full x 8.15 ops/sec Â±7.79% (45 runs sampled)\nGonzales     x 5.21 ops/sec Â±7.75% (18 runs sampled)\nGonzales PE  x 3.99 ops/sec Â±10.37% (15 runs sampled)\nStylecow     x 3.97 ops/sec Â±9.48% (15 runs sampled)\nParserLib    x 1.79 ops/sec Â±8.58% (9 runs sampled)\n\nFastest test is Stylis at 1.37x faster than CSSTree\n```\n\n---\n\n#### Preprocessors\n\n```\nStylis    x 26.26 ops/sec Â±5.95% (49 runs sampled)\nPostCSS   x 16.23 ops/sec Â±11.21% (47 runs sampled)\nRework    x 10.65 ops/sec Â±3.86% (55 runs sampled)\nlibsass   x 6.83 ops/sec Â±2.29% (22 runs sampled)\nLess      x 4.75 ops/sec Â±9.14% (29 runs sampled)\nStylus    x 3.67 ops/sec Â±28.12% (25 runs sampled)\nStylecow  x 2.15 ops/sec Â±6.36% (15 runs sampled)\nRuby Sass x 0.31 ops/sec Â±8.12% (6 runs sampled)\n\nFastest test is Stylis at 1.62x faster than PostCSS\n```\n\n---\n\n#### Prefixers\n\n```\nStylis       x 45.52 ops/sec Â±14.61% (77 runs sampled)\nAutoprefixer x 13.32 ops/sec Â±6.51% (67 runs sampled)\nStylecow     x 2.28 ops/sec Â±5.97% (16 runs sampled)\nnib          x 1.79 ops/sec Â±25.32% (15 runs sampled)\nCompass      x 0.15 ops/sec Â±9.34% (5 runs sampled)\n\nFastest test is Stylis at 3.4x faster than Autoprefixer\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/thysultan/stylis.js.git"
  },
  "scripts": {
    "minify": "uglifyjs stylis.js -o stylis.min.js --compress 'conditionals=false,if_return=false,booleans=false' --mangle --screw-ie8 --source-map url=stylis.min.js.map",
    "prepublish": "npm run minify",
    "test": "node ./tests"
  },
  "types": "stylis.d.ts",
  "unpkg": "stylis.min.js",
  "version": "3.5.0"
}

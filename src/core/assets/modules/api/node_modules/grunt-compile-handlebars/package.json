{
  "_args": [
    [
      {
        "raw": "grunt-compile-handlebars@^2.0.0",
        "scope": null,
        "escapedName": "grunt-compile-handlebars",
        "name": "grunt-compile-handlebars",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle-docs"
    ]
  ],
  "_from": "grunt-compile-handlebars@>=2.0.0 <3.0.0",
  "_id": "grunt-compile-handlebars@2.0.2",
  "_inCache": true,
  "_location": "/grunt-compile-handlebars",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/grunt-compile-handlebars-2.0.2.tgz_1463642155215_0.2067973257508129"
  },
  "_npmUser": {
    "name": "patrickkettner",
    "email": "patrickkettner@gmail.com"
  },
  "_npmVersion": "3.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-compile-handlebars@^2.0.0",
    "scope": null,
    "escapedName": "grunt-compile-handlebars",
    "name": "grunt-compile-handlebars",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/spectacle-docs"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-compile-handlebars/-/grunt-compile-handlebars-2.0.2.tgz",
  "_shasum": "b9f60263771f7dd7f17bcc05e6e1e329e2772cc3",
  "_shrinkwrap": null,
  "_spec": "grunt-compile-handlebars@^2.0.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle-docs",
  "author": {
    "name": "Patrick Kettner",
    "email": "patrick@patrickkettner.com",
    "url": "https://github.com/patrickkettner"
  },
  "bin": {
    "grunt-compile-handlebars": "bin/grunt-compile-handlebars"
  },
  "bugs": {
    "url": "https://github.com/patrickkettner/grunt-compile-handlebars/issues"
  },
  "dependencies": {
    "alce": "^1.0.0",
    "handlebars": ">= 1",
    "lodash.merge": "^3.0.0",
    "lodash.toarray": "^3.0.0"
  },
  "description": "Compile handlebar templates, outputting static HTML",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-jshint": "~0.2.0",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "directories": {},
  "dist": {
    "shasum": "b9f60263771f7dd7f17bcc05e6e1e329e2772cc3",
    "tarball": "https://registry.npmjs.org/grunt-compile-handlebars/-/grunt-compile-handlebars-2.0.2.tgz"
  },
  "engines": {
    "node": "*>= 0.8.0"
  },
  "gitHead": "92d7fb401340892a8f04d497d4e1508c9ed1f8bb",
  "homepage": "https://github.com/patrickkettner/grunt-compile-handlebars",
  "keywords": [
    "gruntplugin",
    "handlebars"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/patrickkettner/grunt-compile-handlebars/blob/master/LICENSE-MIT"
    }
  ],
  "main": "grunt.js",
  "maintainers": [
    {
      "name": "patrickkettner",
      "email": "patrickkettner@gmail.com"
    }
  ],
  "name": "grunt-compile-handlebars",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.0"
  },
  "readme": "# grunt-compile-handlebars [![Build Status](https://secure.travis-ci.org/patrickkettner/grunt-compile-handlebars.png?branch=master)](http://travis-ci.org/patrickkettner/grunt-compile-handlebars)\n\nCompiles handlebar templates, outputs static HTML\n\n## Getting Started\nInstall this grunt plugin next to your project's [grunt.js gruntfile][getting_started] with: `npm install grunt-compile-handlebars`\n\nThen add this line to your project's `Gruntfile.js` gruntfile:\n\n```javascript\ngrunt.loadNpmTasks('grunt-compile-handlebars');\n```\n\n[grunt]: https://github.com/gruntjs/grunt\n[getting_started]: https://github.com/gruntjs/grunt/blob/master/docs/getting_started.md\n\n## Documentation\n### Who\npatrick kettner - a web developer who consistently worked with large static data sets.\n\n### What\ngrunt-compile-handlebars takes in a handlebars template (and optionally static pre and post html), runs a dataset over it, and outputs static html.\n\n### Where\ninside of a grunt task. I assume you know what gruntjs is, but if not - [gruntjs.com](http://gruntjs.com)\n\n### When\nYou have ton of data that rarely changes that you want to template.\n\n### How\nThere are a lot of different ways to input data, it accepts most any dynamic and static\ninput.\nHeres a few of the ways you can use it\n\n```javascript\n'compile-handlebars': {\n  allStatic: {\n    files: [{\n      src: 'test/fixtures/template.handlebars',\n      dest: 'tmp/allStatic.html'\n    }],\n    preHTML: 'test/fixtures/pre-dev.html',\n    postHTML: 'test/fixtures/post-dev.html',\n    templateData: 'test/fixtures/data.json'\n  },\n  dynamicHandlebars: {\n    files: [{\n        src: '<h1></h1>',\n        dest: 'tmp/dynamicHandlebars.html'\n    }],\n    templateData: {},\n    handlebars: 'node_modules/handlebars'\n  },\n  jsonHandlebars: {\n    files: [{\n      src: 'test/fixtures/sweedishTemplate.json',\n      dest: 'tmp/sweedish.json'\n    }],\n    templateData: 'test/fixtures/sweedishData.json'\n  },\n  dynamicTemplate: {\n    files: [{\n        src: '<h1>{{salutation}}{{punctuation}} {{location}}</h1>',\n        dest: 'tmp/dynamicTemplate.html'\n    }],\n    template: '<h1>{{salutation}}{{punctuation}} {{location}}</h1>',\n    templateData: 'test/fixtures/data.json'\n  },\n  dynamicTemplateData: {\n    files: [{\n      src: 'test/fixtures/template.handlebars',\n      dest: 'tmp/dynamicTemplateData.html'\n    }],\n    templateData: {\n      \"salutation\": \"Hallo\",\n      \"punctuation\": \",\",\n      \"location\": \"Welt\"\n    }\n  },\n  dynamicPre: {\n    files: [{\n      src: 'test/fixtures/template.handlebars',\n      dest: 'tmp/dynamicPre.html'\n    }],\n    preHTML: '<header>INLINE HEADER</header>',\n    templateData: 'test/fixtures/data.json'\n  },\n  dynamicPost: {\n    files: [{\n      src: 'test/fixtures/template.handlebars',\n      dest: 'tmp/dynamicPost.html'\n    }],\n    postHTML: '<footer>INLINE FOOTER</footer>',\n    templateData: 'test/fixtures/data.json'\n  },\n  anyArray: {\n    files: [{\n      src: ['test/fixtures/deep/romanian.handlebars', 'test/fixtures/deep/german.handlebars'],\n      dest: ['tmp/deep/romanian.html','tmp/deep/german.html']\n    }],\n    templateData: ['test/fixtures/deep/romanian.json', 'test/fixtures/deep/german.json'],\n    helpers: ['test/helpers/super_helper.js'],\n    partials: ['test/fixtures/deep/shared/foo.handlebars']\n  },\n  globbedTemplateAndOutput: {\n    files: [{\n        expand: true,\n        cwd: 'test/fixtures/',\n        src: 'deep/**/*.handlebars',\n        dest: 'tmp/',\n        ext: '.html'\n    }],\n    templateData: 'test/fixtures/deep/**/*.json',\n    helpers: 'test/helpers/**/*.js',\n    partials: 'test/fixtures/deep/shared/**/*.handlebars'\n  },\n  globalJsonGlobbedTemplate: {\n    files: [{\n        expand: true,\n        cwd: 'test/fixtures/',\n        src: 'deep/**/*.handlebars',\n        dest: 'tmp/',\n        ext: '.html'\n    }],\n    templateData: 'test/fixtures/deep/**/*.json',\n    helpers: 'test/helpers/**/*.js',\n    partials: 'test/fixtures/deep/shared/**/*.handlebars',\n    globals: [\n      'test/globals/info.json',\n      'test/globals/textspec.json',\n      {\n        textspec: {\n          \"ps\": \"P.S. from Gruntfile.js\"\n        }\n      }\n    ]\n  },\n  registerFullPath: {\n    files: [{\n        src: '<h1>{{salutation}}{{punctuation}} {{location}}</h1>{{> test/fixtures/deep/shared/pathTest}}',\n        dest: 'tmp/fullPath.html'\n    }],\n    templateData: {\n      \"salutation\": \"Hallo\",\n      \"punctuation\": \",\",\n      \"location\": \"Welt\"\n    },\n    partials: 'test/fixtures/deep/shared/**/*.handlebars',\n    registerFullPath: true\n  },\n  concatGlobbed: {\n    files: [{\n      src: 'test/fixtures/deep/**/*.handlebars',\n      dest: 'tmp/concatGlobbed.html'\n    }],\n    templateData: 'test/fixtures/deep/**/*.json'\n  },\n  oneTemplateToManyOutputs: {\n    files: [{\n      src: 'test/fixtures/template.handlebars',\n      dest: ['tmp/oneTemplateToManyOutputs1.html', 'tmp/oneTemplateToManyOutputs2.html']\n    }],\n    templateData: ['test/fixtures/oneTemplateToManyOutputs1.json', 'test/fixtures/oneTemplateToManyOutputs2.json']\n  }\n},\n```\n\nThe available configuration options are as follows\n\nUnless otherwise noted, all configurable values can be represented as\n* a string representing the path to a specific file\n* a string representing the path to a [globbed representation](http://gruntjs.com/api/grunt.file#globbing-patterns) of the files, matched up against the values resolved from the `template` configuration\n* an array of literal paths, globbed paths, or a combination of the two\n\n__`files`__ - A typical [grunt files object](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically). The `src` are your handlebar templates, the `dest` is your html ouput. See the grunt documentation and the usage examples above for more info on how to use this object.\n\n__`preHTML`__ - Static text to be inserted before the compiled template\n__`postHTML`__ - Static text to be inserted after the compiled template\n\n__`templateData` ~~ The data being fed to compiled template, in addition to the normal configurable values, this can be\n* an inline string representation of a data (I don't know why you would do that though, when you can do...)\n* an inline JSON representation of a data\n\n__`globals`__ - globals that can be included, useful for when you have template specific data, but want some data available to all templates\n__`helpers`__ - handlebars helpers\n__`partials`__ - handlebars partials\n\n__`registerFullPath`__ - normally, helpers and partials are registered under their basename, rather than their path (e.g. partial at `partials/deep/awesomePartial.handlebars` is registered as `{{> awesomePartial}}`). When set to `true`, helpers and partials are registered under their full paths (e.g. {{> partials/deep/awesomePartial}}), to prevent clobbering after resolving globbed values.\n\n`handlebars` - a string representing the path to an instance of handlebars (if you don't want to use the bundeled version).\nNote: This __cannot__ be `require('handlebars')`, as that creates a circular reference. You need to pass the path to the instance you want to use, i.e. `handlebars: \"./node_modules/handlebars\"`\n\n#### A note on globing\n\nWhen you specify templates using globs, the values from `template` are used to create the values for output, for example, if your file structure looks like this\n\n```\n|-foo\n  |-bar.handlebars\n  |-baz.handlebars\n  |-bar.json\n  |-baz.json\n```\n\nand your configuration looks like this\n\n```\nfiles: [{\n    expand: true,\n    cwd: './foo/',\n    src: '*.handlebars',\n    dest: './foo/',\n    ext: '.html'\n}],\n\"templateData\": \"./foo/*.json\",\n```\n\nthe output would be `./foo/bar.html` and `./foo/baz.html`\n\n\n### Why\nI had to work with several hundred repeated data structures that never changed. Keeping them all in html was silly, but pushing out a template engine for the end user to compile the same information multiple times was even sillier. This allows you to have your templated cake and eat it too.\n\n## Release History\n * 2.0.2 - Gadge - fixup Grunt PeerDeps requirement for 1.0 compatibility, have templateData return an empty object when omitted\n * 2.0.1 - Candy - @jrylander updated the lodash dependency to fix breakages introduced in lodash v4\n * 2.0.0 - Jed - @timhettler rewrote larges swaths of the task to use the [Grunt file object](http://gruntjs.com/configuring-tasks#files-object-format)\n * 1.0.1 - Lazy-Eye - @gapipro added path cache for partials and helpers, and fixed using mulitple templates with the same filename\n * 1.0.0 - Serge - Add inline object support for `globals`, fix `outputInInput`\n * 0.7.8 - Eli - add `outputInInput` setting to send outputted files back to their handlebars directory\n * 0.7.7 - Uzi - swap out `JSON.parse` for `alce.parse`, allowing for (technically invalid) single quoted json\n * 0.7.6 - Kristofferson - explicitly check that `isGlob` is undefined, preventing a false negative on empty strings\n * 0.7.5 - Redford - add `registerFullPath` option to prevent partial/helper registration clobbering, update README\n * 0.7.4 - M. Jean - don't send objects to handlebars.compile, code cleanup\n * 0.7.3 - Cousin Ben - switch from require to readFile to allow for html in partials\n * 0.7.2 - Bernice - @stimmins improved handling of templateData and globals\n * 0.7.1 - Margaret - fix 0.8 compatibility\n * 0.7.0 - Rosemary - Allow for arrays instead of globbing, remove depreicated grunt methods\n * 0.6.3 - Pelé  - @mattcg fixed an issue with large amounts of templates\n * 0.6.2 - Dignan  - @goette added support for a global json config\n * 0.6.1 - Grace  - @robinqu added support for handlebars partials\n * 0.6.0 - Future Man - added globbing, lots more test\n * 0.4.0 - Oseary - upgraded to grunt 0.4, removed extra tasks, added tests\n * 0.0.2 - Inez - changed to grunt's native json parser (thanks to @sebslomski). Updated Readme\n * 0.0.1 - Dudley - Initial commit\n\n## License\nCopyright (c) 2014 Patrick Kettner\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/patrickkettner/grunt-compile-handlebars.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "2.0.2"
}

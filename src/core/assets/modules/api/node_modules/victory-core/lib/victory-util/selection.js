Object.defineProperty(exports,"__esModule",{value:true});var _isFunction2=require("lodash/isFunction");var _isFunction3=_interopRequireDefault(_isFunction2);var _react=require("react");var _react2=_interopRequireDefault(_react);

var _data=require("./data");var _data2=_interopRequireDefault(_data);
var _collection=require("./collection");var _collection2=_interopRequireDefault(_collection);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}exports.default=

{
getParentSVG:function getParentSVG(target){
if(target.nodeName==="svg"){
return target;
}else{
return this.getParentSVG(target.parentNode);
}
},

getTransformationMatrix:function getTransformationMatrix(svg){
return svg.getScreenCTM().inverse();
},

getSVGEventCoordinates:function getSVGEventCoordinates(evt){
if(typeof document==="undefined"){


return{
x:evt.nativeEvent.locationX,
y:evt.nativeEvent.locationY};

}
var svg=this.getParentSVG(evt.target);
var matrix=this.getTransformationMatrix(svg);
return{
x:this.transformTarget(evt.clientX,matrix,"x"),
y:this.transformTarget(evt.clientY,matrix,"y")};

},

transformTarget:function transformTarget(target,matrix,dimension){var
a=matrix.a,d=matrix.d,e=matrix.e,f=matrix.f;
return dimension==="y"?
d*target+f:a*target+e;
},

getDomainCoordinates:function getDomainCoordinates(scale,domain){
domain=domain||{x:scale.x.domain(),y:scale.y.domain()};
return{
x:[scale.x(domain.x[0]),scale.x(domain.x[1])],
y:[scale.y(domain.y[0]),scale.y(domain.y[1])]};

},

getDataCoordinates:function getDataCoordinates(scale,x,y){
return{
x:scale.x.invert(x),
y:scale.y.invert(y)};

},

getBounds:function getBounds(props){var
x1=props.x1,x2=props.x2,y1=props.y1,y2=props.y2,scale=props.scale;
var point1=this.getDataCoordinates(scale,x1,y1);
var point2=this.getDataCoordinates(scale,x2,y2);
var makeBound=function makeBound(a,b){
return[_collection2.default.getMinValue([a,b]),_collection2.default.getMaxValue([a,b])];
};

return{
x:makeBound(point1.x,point2.x),
y:makeBound(point1.y,point2.y)};

},

getDatasets:function getDatasets(props){
if(props.data){
return[{data:props.data}];
}
var getData=function getData(childProps){
var data=_data2.default.getData(childProps);
return Array.isArray(data)&&data.length>0?data:undefined;
};



var children=_react2.default.Children.toArray(props.children).reverse();
var childrenLength=children.length;
var dataArr=[];
var dataArrLength=0;
var childIndex=0;
while(childrenLength>0){
var child=children[--childrenLength];
var childName=child.props.name||childIndex;
childIndex++;
if(child.type&&child.type.role==="axis"){
childIndex++;
}else if(child.type&&(0,_isFunction3.default)(child.type.getData)){
dataArr[dataArrLength++]={childName:childName,data:child.type.getData(child.props)};
}else if(child.props&&child.props.children){
var newChildren=_react2.default.Children.toArray(child.props.children);
var newChildrenLength=newChildren.length;
for(var index=0;index<newChildrenLength;index++){
children[childrenLength++]=newChildren[index];
}
}else{
dataArr[dataArrLength++]={childName:childName,data:getData(child.props)};
}
}
return dataArr;
},

filterDatasets:function filterDatasets(datasets,bounds){var _this=this;
var filtered=datasets.reduce(function(memo,dataset){
var selectedData=_this.getSelectedData(dataset.data,bounds);
memo=selectedData?
memo.concat({
childName:dataset.childName,eventKey:selectedData.eventKey,data:selectedData.data}):

memo;
return memo;
},[]);
return filtered.length?filtered:null;
},

getSelectedData:function getSelectedData(dataset,bounds){var
x=bounds.x,y=bounds.y;
var withinBounds=function withinBounds(d){
return d._x>=x[0]&&d._x<=x[1]&&d._y>=y[0]&&d._y<=y[1];
};

var selectedData=dataset.reduce(function(accum,datum,index){
if(withinBounds(datum)){
accum.data.push(datum);
accum.eventKey.push(datum.eventKey===undefined?index:datum.eventKey);
}

return accum;
},{
data:[],
eventKey:[]});


return selectedData.data.length>0?selectedData:null;
}};
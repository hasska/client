{
  "_args": [
    [
      {
        "raw": "babel-macros@^1.2.0",
        "scope": null,
        "escapedName": "babel-macros",
        "name": "babel-macros",
        "rawSpec": "^1.2.0",
        "spec": ">=1.2.0 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/babel-plugin-emotion"
    ]
  ],
  "_from": "babel-macros@>=1.2.0 <2.0.0",
  "_id": "babel-macros@1.2.0",
  "_inCache": true,
  "_location": "/babel-macros",
  "_nodeVersion": "8.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/babel-macros-1.2.0.tgz_1509076753955_0.36827468662522733"
  },
  "_npmUser": {
    "name": "kentcdodds",
    "email": "kent@doddsfamily.us"
  },
  "_npmVersion": "5.4.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "babel-macros@^1.2.0",
    "scope": null,
    "escapedName": "babel-macros",
    "name": "babel-macros",
    "rawSpec": "^1.2.0",
    "spec": ">=1.2.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/babel-plugin-emotion"
  ],
  "_resolved": "https://registry.npmjs.org/babel-macros/-/babel-macros-1.2.0.tgz",
  "_shasum": "39e47ed6d286d4a98f1948d8bab45dac17e4e2d4",
  "_shrinkwrap": null,
  "_spec": "babel-macros@^1.2.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/babel-plugin-emotion",
  "author": {
    "name": "Kent C. Dodds",
    "email": "kent@doddsfamily.us",
    "url": "http://kentcdodds.com/"
  },
  "babel": {
    "presets": [
      "./.babelrc.js"
    ]
  },
  "bugs": {
    "url": "https://github.com/kentcdodds/babel-macros/issues"
  },
  "dependencies": {
    "cosmiconfig": "3.1.0"
  },
  "description": "Enables zero-config, importable babel plugins",
  "devDependencies": {
    "ast-pretty-print": "2.0.1",
    "babel-core": "^6.25.0",
    "babel-plugin-tester": "^4.0.0",
    "babylon": "6.18.0",
    "cpy": "6.0.0",
    "kcd-scripts": "0.27.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/GIwkOeNHQU9R27Bkt0jHrJgaXBX5KLKrIH5h/iGebvKppvL9e4wKCgrl4qwUj0qssBHQFeSavk3lG2lQgdq8w==",
    "shasum": "39e47ed6d286d4a98f1948d8bab45dac17e4e2d4",
    "tarball": "https://registry.npmjs.org/babel-macros/-/babel-macros-1.2.0.tgz"
  },
  "eslintConfig": {
    "extends": "./node_modules/kcd-scripts/eslint.js"
  },
  "eslintIgnore": [
    "node_modules",
    "coverage",
    "dist"
  ],
  "files": [
    "dist"
  ],
  "gitHead": "9cc676543d7a98f7c5d76d0063b11e8adb9a1dc7",
  "homepage": "https://github.com/kentcdodds/babel-macros#readme",
  "keywords": [
    "babel-plugin",
    "macros",
    "macro",
    "babel-macro",
    "babel-plugin-macro"
  ],
  "license": "MIT",
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "kentcdodds",
      "email": "kent@doddsfamily.us"
    }
  ],
  "name": "babel-macros",
  "optionalDependencies": {},
  "readme": "<div align=\"center\">\n<h1>babel-macros 🎣</h1>\n\nEnables zero-config, importable babel plugins\n\n</div>\n\n<hr />\n\n[![Build Status][build-badge]][build]\n[![Code Coverage][coverage-badge]][coverage]\n[![version][version-badge]][package]\n[![downloads][downloads-badge]][npmchart]\n[![MIT License][license-badge]][LICENSE]\n\n[![All Contributors](https://img.shields.io/badge/all_contributors-9-orange.svg?style=flat-square)](#contributors)\n[![PRs Welcome][prs-badge]][prs]\n[![Donate][donate-badge]][donate]\n[![Code of Conduct][coc-badge]][coc]\n\n[![Watch on GitHub][github-watch-badge]][github-watch]\n[![Star on GitHub][github-star-badge]][github-star]\n[![Tweet][twitter-badge]][twitter]\n\n<a href=\"https://app.codesponsor.io/link/PKGFLnhDiFvsUA5P4kAXfiPs/kentcdodds/babel-macros\" rel=\"nofollow\"><img src=\"https://app.codesponsor.io/embed/PKGFLnhDiFvsUA5P4kAXfiPs/kentcdodds/babel-macros.svg\" style=\"width: 888px; height: 68px;\" alt=\"Sponsor\" /></a>\n\n## The problem\n\nCheck out <a href=\"https://babeljs.io/blog/2017/09/11/zero-config-with-babel-macros\" rel=\"nofollow\">this guest post</a> on the Babel.js blog for a complete write up on the problem, motivation, and solution. \n\nCurrently, each babel plugin in the babel ecosystem requires that you configure\nit individually. This is fine for things like language features, but can be\nfrustrating overhead for libraries that allow for compile-time code\ntransformation as an optimization.\n\n## This solution\n\nbabel-macros defines a standard interface for libraries that want to use\ncompile-time code transformation without requiring the user to add a babel\nplugin to their build system (other than `babel-macros`, which is ideally\nalready in place).\n\n<details>\n\n<summary>Expand for more details on the motivation</summary>\n\nFor instance, many css-in-js libraries have a css tagged template string\nfunction:\n\n```js\nconst styles = css`\n  .red {\n    color: red;\n  }\n`;\n```\n\nThe function compiles your css into (for example) an object with generated class\nnames for each of the classes you defined in your css:\n\n```js\nconsole.log(styles); // { red: \"1f-d34j8rn43y587t\" }\n```\n\nThis class name can be generated at runtime (in the browser), but this has some\ndisadvantages:\n\n* There is cpu usage/time overhead; the client needs to run the code to generate\n  these classes every time the page loads\n* There is code bundle size overhead; the client needs to receive a CSS parser\n  in order to generate these class names, and shipping this makes the amount of\n  js the client needs to parse larger.\n\nTo help solve those issues, many css-in-js libraries write their own babel\nplugin that generates the class names at compile-time instead of runtime:\n\n```js\n// Before running through babel:\nconst styles = css`\n  .red {\n    color: red;\n  }\n`;\n// After running through babel, with the library-specific plugin:\nconst styles = { red: \"1f-d34j8rn43y587t\" };\n```\n\nIf the css-in-js library supported babel-macros instead, then they wouldn't need\ntheir own babel plugin to compile these out; they could instead rely on\nbabel-macros to do it for them. So if a user already had babel-macros installed\nand configured with babel, then they wouldn't need to change their babel\nconfiguration to get the compile-time benefits of the library. This would be\nmost useful if the boilerplate they were using came with babel-macros out of the\nbox, which is what we're hoping will be true for create-react-app in the future.\n\nAlthough css-in-js is the most common example, there are lots of other things\nyou could use `babel-macros` for, like:\n\n* Compiling GraphQL fragments into objects so that the client doesn't need a\n  GraphQL parser\n* Eval-ing out code at compile time that will be baked into the runtime code,\n  for instance to get a list of directories in the filesystem (see\n  [preval][preval])\n\n</details>\n\n## Table of Contents\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [FAQ](#faq)\n- [Inspiration](#inspiration)\n- [Other Solutions](#other-solutions)\n- [Contributors](#contributors)\n- [LICENSE](#license)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Installation\n\nThis module is distributed via [npm][npm] which is bundled with [node][node] and\nshould be installed as one of your project's `devDependencies`:\n\n```\nnpm install --save-dev babel-macros\n```\n\n## Usage\n\nAre you trying to use `babel-macros`? Go to\n[`other/docs/user.md`](https://github.com/kentcdodds/babel-macros/blob/master/other/docs/user.md).\n\nAre you trying to make your own macros that works with `babel-macros`? Go to\n[`other/docs/author.md`](https://github.com/kentcdodds/babel-macros/blob/master/other/docs/author.md).\n(you should probably read the user docs too).\n\n## FAQ\n\n### What's the difference between babel plugins and macros?\n\nSuppose we have a plugin `node-eval`, which evaluates a node expression at compile time.\n\nIf we used `babel-plugin-node-eval`, it would look like this:\n\n1. Add `babel-plugin-node-eval` to `.babelrc`\n2. Use it in a code:\n\n```js\nconst val = nodeEval`fs.readDirSync('./fleet')`\n\n// ↓ ↓ ↓  compiles to  ↓ ↓ ↓\n\nconst val = ['red_leader', 'blue_leader']\n```\n\nInstead, if there were a macro called `node-eval.macro`, we could use\nit like this:\n\n1. Add `babel-macros` to `.babelrc` (only once for all macros)\n2. Use it in a code:\n\n```js\nimport nodeEval from 'node-eval.macro'\nconst val = nodeEval`fs.readDirSync('./fleet')`\n\n// ↓ ↓ ↓  compiles to  ↓ ↓ ↓\n\nconst val = ['red_leader', 'blue_leader']\n```\n\nAdvantages:\n\n- requires only one entry in `.babelrc` for all macros used in project\n- boilerplates, like Create React App ([soon hopefully][cra-issue]), might already support `babel-macros`, so no configuration is needed\n- it's explicit, that `node-eval` is macro and does something with the code at compile time\n- macros are safer and easier to write, because they receive exactly the AST node to process\n\n> By the way, something like `node-eval` actually exists and it's called [babel-plugin-preval][preval].\n\n### In what order are macros executed?\n\nIn the same order as imported. The order of execution is clear, explicit\nand in full control of the user:\n\n```js\nimport nodeEval from 'node-eval.macro'\nimport css from 'css-in-js.macro'\n\n# First are evaluated `node-eval` macros, then `css` macros\n```\n\nThis differs from the current situation with babel plugins where\nit's prohibitively difficult to control the order plugins run in\na particular file.\n\n### Does it work with tagged template literals only?\n\nNo! Any AST node type is supported.\n\nIt can be tagged template literal:\n\n```js\nimport eval from 'eval.macro'\nconst val = eval`7 * 6`\n```\n\nA function:\n\n```js\nimport eval from 'eval.macro'\nconst val = eval('7 * 6')\n```\n\nJSX Element:\n\n```js\nimport Eval from 'eval.macro'\nconst val = <Eval>7 * 6</Eval>\n```\n\nReally, anything...\n\nSee the [testing snapshot](https://github.com/kentcdodds/babel-macros/blob/master/src/__tests__/__snapshots__/index.js.snap) for more examples.\n\n### How about implicit optimizations at compile time?\n\nAll examples above were *explicit* - a macro was imported and then evaluated\nwith a specific AST node.\n\nCompletely different story are *implicit* babel plugins, like\n[transform-react-constant-elements](https://babeljs.io/docs/plugins/transform-react-constant-elements/),\nwhich process whole AST tree.\n\nExplicit is often a better pattern than implicit because it requires others to understand\nhow things are globally configured. This is in this spirit are `babel-macros` designed.\nHowever, some things _do_ need to be implicit, and those kinds of babel plugins can't be\nturned into macros.\n\n## Inspiration\n\n- [threepointone/babel-macros](https://github.com/threepointone/babel-macros)\n- [facebookincubator/create-react-app#2730][cra-issue]\n\n## Other Solutions\n\n- [sweetjs](http://sweetjs.org/)\n- [babel-plugin-macros](https://github.com/codemix/babel-plugin-macros)\n\n## Contributors\n\nThanks goes to these people ([emoji key][emojis]):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n| [<img src=\"https://avatars.githubusercontent.com/u/1500684?v=3\" width=\"100px;\"/><br /><sub>Kent C. Dodds</sub>](https://kentcdodds.com)<br />[💻](https://github.com/kentcdodds/babel-macros/commits?author=kentcdodds \"Code\") [📖](https://github.com/kentcdodds/babel-macros/commits?author=kentcdodds \"Documentation\") [🚇](#infra-kentcdodds \"Infrastructure (Hosting, Build-Tools, etc)\") [⚠️](https://github.com/kentcdodds/babel-macros/commits?author=kentcdodds \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/18808?v=3\" width=\"100px;\"/><br /><sub>Sunil Pai</sub>](https://github.com/threepointone)<br />[🤔](#ideas-threepointone \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/1341513?v=3\" width=\"100px;\"/><br /><sub>Stephen Scott</sub>](http://suchipi.com/)<br />[💬](#question-suchipi \"Answering Questions\") [📖](https://github.com/kentcdodds/babel-macros/commits?author=suchipi \"Documentation\") | [<img src=\"https://avatars1.githubusercontent.com/u/767261?v=4\" width=\"100px;\"/><br /><sub>Michiel Dral</sub>](http://twitter.com/dralletje)<br />[🤔](#ideas-dralletje \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars2.githubusercontent.com/u/662750?v=4\" width=\"100px;\"/><br /><sub>Kye Hohenberger</sub>](https://github.com/tkh44)<br />[🤔](#ideas-tkh44 \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars1.githubusercontent.com/u/11481355?v=4\" width=\"100px;\"/><br /><sub>Mitchell Hamilton</sub>](https://hamil.town)<br />[💻](https://github.com/kentcdodds/babel-macros/commits?author=mitchellhamilton \"Code\") [⚠️](https://github.com/kentcdodds/babel-macros/commits?author=mitchellhamilton \"Tests\") | [<img src=\"https://avatars1.githubusercontent.com/u/1288694?v=4\" width=\"100px;\"/><br /><sub>Justin Hall</sub>](https://github.com/wKovacs64)<br />[📖](https://github.com/kentcdodds/babel-macros/commits?author=wKovacs64 \"Documentation\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars3.githubusercontent.com/u/1903016?v=4\" width=\"100px;\"/><br /><sub>Brian Pedersen</sub>](https://github.com/PiereDome)<br />[💻](https://github.com/kentcdodds/babel-macros/commits?author=PiereDome \"Code\") [📖](https://github.com/kentcdodds/babel-macros/commits?author=PiereDome \"Documentation\") | [<img src=\"https://avatars3.githubusercontent.com/u/4495237?v=4\" width=\"100px;\"/><br /><sub>Andrew Palm</sub>](https://github.com/apalm)<br />[💻](https://github.com/kentcdodds/babel-macros/commits?author=apalm \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors][all-contributors] specification.\nContributions of any kind welcome!\n\n## LICENSE\n\nMIT\n\n[npm]: https://www.npmjs.com/\n[node]: https://nodejs.org\n[build-badge]: https://img.shields.io/travis/kentcdodds/babel-macros.svg?style=flat-square\n[build]: https://travis-ci.org/kentcdodds/babel-macros\n[coverage-badge]: https://img.shields.io/codecov/c/github/kentcdodds/babel-macros.svg?style=flat-square\n[coverage]: https://codecov.io/github/kentcdodds/babel-macros\n[version-badge]: https://img.shields.io/npm/v/babel-macros.svg?style=flat-square\n[package]: https://www.npmjs.com/package/babel-macros\n[downloads-badge]: https://img.shields.io/npm/dm/babel-macros.svg?style=flat-square\n[npmchart]: http://npmcharts.com/compare/babel-macros\n[license-badge]: https://img.shields.io/npm/l/babel-macros.svg?style=flat-square\n[license]: https://github.com/kentcdodds/babel-macros/blob/master/LICENSE\n[prs-badge]: https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square\n[prs]: http://makeapullrequest.com\n[donate-badge]: https://img.shields.io/badge/$-support-green.svg?style=flat-square\n[donate]: http://kcd.im/donate\n[coc-badge]: https://img.shields.io/badge/code%20of-conduct-ff69b4.svg?style=flat-square\n[coc]: https://github.com/kentcdodds/babel-macros/blob/master/other/CODE_OF_CONDUCT.md\n[github-watch-badge]: https://img.shields.io/github/watchers/kentcdodds/babel-macros.svg?style=social\n[github-watch]: https://github.com/kentcdodds/babel-macros/watchers\n[github-star-badge]: https://img.shields.io/github/stars/kentcdodds/babel-macros.svg?style=social\n[github-star]: https://github.com/kentcdodds/babel-macros/stargazers\n[twitter]: https://twitter.com/intent/tweet?text=Check%20out%20babel-macros!%20https://github.com/kentcdodds/babel-macros%20%F0%9F%91%8D\n[twitter-badge]: https://img.shields.io/twitter/url/https/github.com/kentcdodds/babel-macros.svg?style=social\n[emojis]: https://github.com/kentcdodds/all-contributors#emoji-key\n[all-contributors]: https://github.com/kentcdodds/all-contributors\n[preval]: https://github.com/kentcdodds/babel-plugin-preval\n[cra-issue]: https://github.com/facebookincubator/create-react-app/issues/2730\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/kentcdodds/babel-macros.git"
  },
  "scripts": {
    "add-contributor": "kcd-scripts contributors add",
    "build": "kcd-scripts build",
    "lint": "kcd-scripts lint",
    "precommit": "kcd-scripts precommit",
    "setup": "npm install && npm run validate -s",
    "test": "kcd-scripts test",
    "test:update": "npm test -- --updateSnapshot --coverage",
    "validate": "kcd-scripts validate"
  },
  "version": "1.2.0"
}

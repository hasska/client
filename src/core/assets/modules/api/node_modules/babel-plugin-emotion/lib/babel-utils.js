'use strict';

exports.__esModule = true;
exports.minify = undefined;
exports.getIdentifierName = getIdentifierName;
exports.getRuntimeImportPath = getRuntimeImportPath;
exports.buildMacroRuntimeNode = buildMacroRuntimeNode;
exports.addRuntimeImports = addRuntimeImports;
exports.getName = getName;
exports.createRawStringFromTemplateLiteral = createRawStringFromTemplateLiteral;
exports.omit = omit;

var _index = require('./index');

function getDeclaratorName(path, t) {
  var parent = path.findParent(function (p) {
    return p.isVariableDeclarator();
  });
  return parent && t.isIdentifier(parent.node.id) ? parent.node.id.name : '';
}

function getIdentifierName(path, t) {
  var classParent = path.findParent(function (p) {
    return t.isClass(p);
  });
  if (classParent && classParent.node.id) {
    return t.isIdentifier(classParent.node.id) ? classParent.node.id.name : '';
  } else if (classParent && classParent.node.superClass && classParent.node.superClass.name) {
    return getDeclaratorName(path, t) + '(' + classParent.node.superClass.name + ')';
  }

  return getDeclaratorName(path, t);
}

function getRuntimeImportPath(path, t) {
  var binding = path.scope.getBinding(path.node.name);
  if (!t.isImportDeclaration(binding.path.parentPath)) {
    throw binding.path.buildCodeFrameError('the emotion macro must be imported with es modules');
  }
  var importPath = binding.path.parentPath.node.source.value;
  return importPath.match(/(.*)\/macro/)[1];
}

function buildMacroRuntimeNode(path, state, importName, t) {
  var runtimeImportPath = getRuntimeImportPath(path, t);
  if (state.emotionImports === undefined) state.emotionImports = {};
  if (state.emotionImports[runtimeImportPath] === undefined) {
    state.emotionImports[runtimeImportPath] = {};
  }
  if (state.emotionImports[runtimeImportPath][importName] === undefined) {
    state.emotionImports[runtimeImportPath][importName] = path.scope.generateUidIdentifier(path.node.name);
  }
  return state.emotionImports[runtimeImportPath][importName];
}

function addRuntimeImports(state, t) {
  if (state.emotionImports === undefined) return;
  Object.keys(state.emotionImports).forEach(function (importPath) {
    var importSpecifiers = [];
    Object.keys(state.emotionImports[importPath]).forEach(function (importName) {
      var identifier = state.emotionImports[importPath][importName];
      if (importName === 'default') {
        importSpecifiers.push(t.importDefaultSpecifier(identifier));
      } else {
        importSpecifiers.push(t.importSpecifier(identifier, t.identifier(importName)));
      }
    });
    state.file.path.node.body.unshift(t.importDeclaration(importSpecifiers, t.stringLiteral(importPath)));
  });
  state.emotionImports = undefined;
}
function getName(identifierName, prefix) {
  var parts = [];
  parts.push(prefix);
  if (identifierName) {
    parts.push(identifierName);
  }
  return parts.join('-');
}

function createRawStringFromTemplateLiteral(quasi) {
  var strs = quasi.quasis.map(function (x) {
    return x.value.cooked;
  });
  var hash = (0, _index.hashArray)([].concat(strs));

  var src = strs.reduce(function (arr, str, i) {
    arr.push(str);
    if (i !== strs.length - 1) {
      arr.push('xxx' + i + 'xxx');
    }
    return arr;
  }, []).join('').trim();
  return { src: src, hash: hash };
}

function omit(obj, testFn) {
  var target = {};
  var i = void 0;
  for (i in obj) {
    if (!testFn(i, obj)) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }
  return target;
}

// babel-plugin-styled-components
// https://github.com/styled-components/babel-plugin-styled-components/blob/8d44acc36f067d60d4e09f9c22ff89695bc332d2/src/minify/index.js

var symbolRegex = /(\s*[;:{},]\s*)/g;

// Counts occurences of substr inside str
var countOccurences = function countOccurences(str, substr) {
  return str.split(substr).length - 1;
};

var minify = exports.minify = function minify(code) {
  return code.split(symbolRegex).reduce(function (str, fragment, index) {
    // Even-indices are non-symbol fragments
    if (index % 2 === 0) {
      return str + fragment;
    }

    // Only manipulate symbols outside of strings
    if (countOccurences(str, "'") % 2 === 0 && countOccurences(str, '"') % 2 === 0) {
      return str + fragment.trim();
    }

    return str + fragment;
  }, '');
};
{
  "_args": [
    [
      {
        "raw": "dom-iterator@^1.0.0",
        "scope": null,
        "escapedName": "dom-iterator",
        "name": "dom-iterator",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/react-live"
    ]
  ],
  "_from": "dom-iterator@>=1.0.0 <2.0.0",
  "_id": "dom-iterator@1.0.0",
  "_inCache": true,
  "_location": "/dom-iterator",
  "_nodeVersion": "9.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dom-iterator-1.0.0.tgz_1515134706394_0.8109441564884037"
  },
  "_npmUser": {
    "name": "mattmueller",
    "email": "mattmuelle@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dom-iterator@^1.0.0",
    "scope": null,
    "escapedName": "dom-iterator",
    "name": "dom-iterator",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-live"
  ],
  "_resolved": "https://registry.npmjs.org/dom-iterator/-/dom-iterator-1.0.0.tgz",
  "_shasum": "9c09899846ec41c2d257adc4d6015e4759ef05ad",
  "_shrinkwrap": null,
  "_spec": "dom-iterator@^1.0.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/react-live",
  "author": {
    "name": "Matthew Mueller"
  },
  "bugs": {
    "url": "https://github.com/MatthewMueller/dom-iterator/issues"
  },
  "dependencies": {
    "component-props": "1.1.1",
    "component-xor": "0.0.4"
  },
  "description": "iterator for mini-html-parser",
  "devDependencies": {
    "chalk": "2.1.0",
    "component-test": "~0.1.3",
    "mini-html-parser": "0.0.3",
    "mocha": "~1.17.1"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-7dsMOQI07EMU98gQM8NSB3GsAiIeBYIPKpnxR3c9xOvdvBjChAcOM0iJ222I3p5xyiZO9e5oggkNaCusuTdYig==",
    "shasum": "9c09899846ec41c2d257adc4d6015e4759ef05ad",
    "tarball": "https://registry.npmjs.org/dom-iterator/-/dom-iterator-1.0.0.tgz"
  },
  "gitHead": "91121a41d04a09d28bcd4d0e8cd535b8582d2c08",
  "homepage": "https://github.com/MatthewMueller/dom-iterator",
  "keywords": [
    "iterator",
    "dom",
    "mini-html-parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tootallnate",
      "email": "nathan@tootallnate.net"
    },
    {
      "name": "mattmueller",
      "email": "mattmuelle@gmail.com"
    }
  ],
  "name": "dom-iterator",
  "optionalDependencies": {},
  "readme": "\n# dom-iterator\n\n  Feature-rich, well-tested Iterator for traversing DOM nodes. A better version of [NodeIterator](https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator). Travels in both directions.\n\n  Can be used in node.js with [mini-html-parser](http://github.com/matthewmueller/mini-html-parser).\n\n## Installation\n\n  Install with [component(1)](http://component.io):\n\n    $ component install matthewmueller/dom-iterator\n\n  With node.js:\n\n    $ npm install dom-iterator\n\n## Example\n\n```js\nvar it = iterator(node);\nvar next;\n\nwhile (next = it.next(Node.TEXT_NODE)) {\n  console.log(next.nodeValue) // next textnodes after node\n}\n```\n\n## API\n\n### `iterator(node, root)`\n\nInitialize an iterator starting on the `node`. Optionally you can\nspecify a `root` to limit your traversal to a particular subtree.\n`root` must be either a parent or an ancestor of `node`.\n\n```js\nvar it = iterator(el.firstChild, el)\n```\n\n### `iterator#next([expr], [n])`\n\nGets the next DOM `node`. If no `node` exists, return `null`.\nYou may pass an expression `expr`, to grab the first node that\nmatches `expr`.\n\nAdditionally, you can pass a number to select the `nth` node.\nDefaults to `1` or the `1st` node.\n\n```js\nvar node = it.next()\n// select the 2nd element node we come across\nvar next = it.next(Node.ELEMENT_NODE, 2)\n```\n\nHere's a look at how the DOM is traversed:\n\n![next](https://i.cloudup.com/kl80e5axNP.png)\n\n### `iterator#prev()`, `iterator#previous()`\n\nGets the previous DOM `node`. If no `node` exists, return `null`.\nYou may pass an expression `expr`, to grab the first node that\nmatches `expr`.\n\nAdditionally, you can pass a number to select the `nth` node.\nDefaults to `1` or the `1st` node.\n\n```js\nvar node = it.prev()\n// select the 2nd element node we come across\nvar prev = it.prev(Node.ELEMENT_NODE, 2)\n```\n\nHere's a look at how the DOM is traversed:\n\n![prev](https://i.cloudup.com/EkaCyvdwvF.png)\n\n### `iterator.select(expr)`\n\niterate over nodes that pass the expression `expr`. The `expr` can be an\nenum, number, string or function. If it's a number, the `nodeType` is compared.\n\nThis function can be chained where all expressions are OR-ed.\n\n```js\nit.select(Node.ELEMENT_NODE)\n  .select(8)\n  .select('nodeValue == \"sloth\"')\n  .select(fn)\n```\n\nThis is saying:\n\n> select all element nodes or comment nodes\n> or nodes with the nodeValue \"sloth\" or\n> nodes that pass the function `fn`.\n\n### `iterator.reject(expr)`\n\niterate over nodes that do not pass the expression `expr`. The `expr` can be an\nenum, number, string or function. If it's a number, the `nodeType` is compared.\n\nThis function can be chained where all expressions are AND-ed.\n\n```js\nit.reject(Node.ELEMENT_NODE)\n  .reject(8)\n  .reject('nodeValue == \"sloth\"')\n  .reject(fn)\n```\n\nThis is saying:\n\n> reject all element nodes and comment nodes\n> and nodes with the nodeValue sloth and\n> nodes that pass the function `fn`\".\n\n### `iterator.revisit(revisit)`\n\nYou can also skip over elements you already visited, by setting `revisit` to false. By default, `revisit` is set to `true`.\n\n```js\nit.revisit(false);\n```\n\nHere's how that would change the iterator:\n\n**it.next():**\n\n![next](https://i.cloudup.com/VX6BbZEuzf.png)\n\n**it.prev()**\n\n![prev](https://i.cloudup.com/NEKe6F4EUX.png)\n\n### `iterator.opening()`\n\nJump to the opening tag of an element. This is the default.\n\n```js\nvar dom = domify('<em>hi</em>');\nvar it = it(dom).opening()\nit.next() // 'hi'\n```\n\n### `iterator.closing()`\n\nJump to the closing tag of an element\n\n```js\nvar dom = domify('<em>hi</em>');\nvar it = it(dom).closing()\nit.prev() // 'hi'\n```\n\n### `iterator.peek([expr], [n])`\n\nSometimes you want to peek on the following or previous node without actually visiting it. With `peek` you can peek forward or backwards `n` steps. If no `n` is given, peek forward 1 step.\n\nPeaking forward:\n\n```js\nit.peek(); // peek forward 1\nit.peek(3); // peek forward 3 steps\n```\n\nPeaking backwards:\n\n```js\nit.peek(Node.ELEMENT_NODE, -3) // peek backwards 3 steps, only selecting element nodes\n```\n\n### `iterator.reset([newNode])`\n\nReset the iterator to the original `node`. Optionally pass a `newNode` to start at.\n\n```js\nit.reset();\n```\n\n### `iterator.use(fn)`\n\nAdd a plugin to the iterator.\n\n## Run Tests\n\nOn the server:\n\n```js\nnpm install\nmake test\n```\n\nOr in the browser:\n\n```js\nnpm install\nmake test-browser\n```\n\n## License\n\n  MIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MatthewMueller/dom-iterator.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "1.0.0"
}

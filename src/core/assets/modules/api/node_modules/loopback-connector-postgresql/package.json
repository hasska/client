{
  "_args": [
    [
      {
        "raw": "loopback-connector-postgresql",
        "scope": null,
        "escapedName": "loopback-connector-postgresql",
        "name": "loopback-connector-postgresql",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode"
    ]
  ],
  "_from": "loopback-connector-postgresql@latest",
  "_id": "loopback-connector-postgresql@3.3.0",
  "_inCache": true,
  "_location": "/loopback-connector-postgresql",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/loopback-connector-postgresql-3.3.0.tgz_1515769964626_0.6989768713247031"
  },
  "_npmUser": {
    "name": "bajtos",
    "email": "mbajtoss@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {
    "ms": "2.0.0"
  },
  "_requested": {
    "raw": "loopback-connector-postgresql",
    "scope": null,
    "escapedName": "loopback-connector-postgresql",
    "name": "loopback-connector-postgresql",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/loopback-connector-postgresql/-/loopback-connector-postgresql-3.3.0.tgz",
  "_shasum": "33481c26b50b267a9d67c2f8f33041c7ccefd93f",
  "_shrinkwrap": null,
  "_spec": "loopback-connector-postgresql",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode",
  "bugs": {
    "url": "https://github.com/strongloop/loopback-connector-postgresql/issues"
  },
  "dependencies": {
    "async": "^0.9.0",
    "bluebird": "^3.4.6",
    "debug": "^3.1.0",
    "loopback-connector": "^4.2.2",
    "pg": "^7.0.0",
    "strong-globalize": "^3.1.0",
    "uuid": "^3.0.1"
  },
  "description": "Loopback PostgreSQL Connector",
  "devDependencies": {
    "eslint": "^2.13.1",
    "eslint-config-loopback": "^4.0.0",
    "lodash": "^4.17.4",
    "loopback-datasource-juggler": "^3.0.0",
    "mocha": "^3.0.0",
    "rc": "^1.0.0",
    "should": "^8.0.2",
    "sinon": "^1.15.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-tUAjO/4xcElSqMYf/VuR/vm84Gq8N7jP7S+Em+SXyHTs84D4BVrgKtZASaDVP2IGF2CsrSRTZ240l4CDC36Baw==",
    "shasum": "33481c26b50b267a9d67c2f8f33041c7ccefd93f",
    "tarball": "https://registry.npmjs.org/loopback-connector-postgresql/-/loopback-connector-postgresql-3.3.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "090dff3d9de8b4ee10f71427fbc4b1a28ee249f1",
  "homepage": "https://github.com/strongloop/loopback-connector-postgresql#readme",
  "keywords": [
    "StrongLoop",
    "LoopBack",
    "PostgreSQL",
    "DataSource",
    "Connector"
  ],
  "license": "Artistic-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mahesh.patsute",
      "email": "mahesh.patsute@ibm.com"
    },
    {
      "name": "dhmlau",
      "email": "dianahmlau@gmail.com"
    },
    {
      "name": "tonyf-ibm",
      "email": "tffrench@us.ibm.com"
    },
    {
      "name": "thegman",
      "email": "gpandya@live.com"
    },
    {
      "name": "rashmihunt",
      "email": "rashmihunt@gmail.com"
    },
    {
      "name": "qpresley",
      "email": "qpresley@ca.ibm.com"
    },
    {
      "name": "loay",
      "email": "gewily@ca.ibm.com"
    },
    {
      "name": "kjdelisle",
      "email": "kjdelisle@gmail.com"
    },
    {
      "name": "jannyhou2016",
      "email": "juehou@ca.ibm.com"
    },
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    },
    {
      "name": "davidcheung",
      "email": "davidcheung@live.ca"
    },
    {
      "name": "b-admike",
      "email": "binadmt@hotmail.com"
    },
    {
      "name": "amir-61",
      "email": "amirali.jfr61@gmail.com"
    },
    {
      "name": "0candy",
      "email": "ngcandy@ca.ibm.com"
    },
    {
      "name": "superkhau",
      "email": "superkhau@gmail.com"
    },
    {
      "name": "rmg",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "kraman",
      "email": "kraman@gmail.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    },
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    },
    {
      "name": "bajtos",
      "email": "mbajtoss@gmail.com"
    },
    {
      "name": "virkt25",
      "email": "taranveer@virk.cc"
    }
  ],
  "name": "loopback-connector-postgresql",
  "optionalDependencies": {},
  "readme": "# loopback-connector-postgresql\n\n[PostgreSQL](https://www.postgresql.org/), is a popular open-source object-relational database.\nThe `loopback-connector-postgresql` module is the PostgreSQL connector for the LoopBack framework.\n\n<div class=\"gh-only\">For more information, see the <a href=\"http://loopback.io/doc/en/lb3/PostgreSQL-connector.html\">documentation</a>.\n<br/><br/>\nNOTE: The PostgreSQL connector requires PostgreSQL 8.x or 9.x.\n</div>\n\n## Installation\n\nIn your application root directory, enter this command to install the connector:\n\n```shell\n$ npm install loopback-connector-postgresql --save\n```\n\nThis installs the module from npm and adds it as a dependency to the application's `package.json` file.\n\nIf you create a PostgreSQL data source using the data source generator as described below, you don't have to do this, since the generator will run `npm install` for you.\n\n## Creating a data source\n\nUse the [Data source generator](http://loopback.io/doc/en/lb3/Data-source-generator.html) to add a PostgreSQL data source to your application.  \nThe generator will prompt for the database server hostname, port, and other settings\nrequired to connect to a PostgreSQL database.  It will also run the `npm install` command above for you.\n\nThe entry in the application's `/server/datasources.json` will look like this:\n\n{% include code-caption.html content=\"/server/datasources.json\" %}\n```javascript\n\"mydb\": {\n  \"name\": \"mydb\",\n  \"connector\": \"postgresql\"\n  \"host\": \"mydbhost\",\n  \"port\": 5432,\n  \"url\": \"postgres://admin:admin@mydbhost:5432/db1?ssl=false\",\n  \"database\": \"db1\",\n  \"password\": \"admin\",\n  \"user\": \"admin\",\n  \"ssl\": false\n}\n```\n\nEdit `datasources.json` to add other properties that enable you to connect the data source to a PostgreSQL database.\n\n### Connection Pool Settings\n\nYou can also specify connection pool settings in `datasources.json`. For instance you can specify the minimum and the maximum pool size, and the maximum pool client's idle time before closing the client.\n\nExample of `datasource.json`:\n```\n{\n  \"mypostgresdb\": {\n    \"host\": \"mydbhost\",\n    \"port\": 5432,\n    \"url\": \"postgres://admin:password1@mydbhost:5432/db1?ssl=false\",\n    \"database\": \"db1\",\n    \"password\": \"password1\",\n    \"name\": \"mypostgresdb\",\n    \"user\": \"admin\",\n    \"connector\": \"postgresql\",\n    \"min\": 5,\n    \"max\": 200,\n    \"idleTimeoutMillis\": 60000,\n    \"ssl\": false\n  }\n}\n```\nCheck out [node-pg-pool](https://github.com/brianc/node-pg-pool) and [node postgres pooling example](https://github.com/brianc/node-postgres#pooling-example) for more information.\n\n### Properties\n\n<table>\n  <thead>\n    <tr>\n      <th>Property</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n    <tbody>    \n    <tr>\n      <td>connector</td>\n      <td>String</td>\n      <td>\n        Connector name, either \"loopback-connector-postgresql\" or \"postgresql\"\n      </td>\n    </tr>\n    <tr>\n      <td>database</td>\n      <td>String</td>\n      <td>Database name</td>\n    </tr>\n    <tr>\n      <td>debug</td>\n      <td>Boolean</td>\n      <td>If true, turn on verbose mode to debug database queries and lifecycle.</td>\n    </tr>\n    <tr>\n      <td>host</td>\n      <td>String</td>\n      <td>Database host name</td>\n    </tr>\n    <tr>\n      <td>password</td>\n      <td>String</td>\n      <td>Password to connect to database</td>\n    </tr>\n    <tr>\n      <td>port</td>\n      <td>Number</td>\n      <td>Database TCP port</td>\n    </tr>\n    <tr>\n      <td>url</td>\n      <td>String</td>\n      <td>Use instead of the<code>host</code>,<code>port</code>,<code>user</code>,<code>password</code>,\n        and<code>database</code>properties. For example:'postgres://test:mypassword@localhost:5432/dev'.\n      </td>\n    </tr>\n    <tr>\n      <td>username</td>\n      <td>String</td>\n      <td>Username to connect to database</td>\n    </tr>\n    <tr>\n      <td>min</td>\n      <td>Integer</td>\n      <td>Minimum number of clients in the connection pool</td>\n    </tr>\n    <tr>\n      <td>max</td>\n      <td>Integer</td>\n      <td>Maximum number of clients in the connection pool</td>\n    </tr>\n    <tr>\n      <td>idleTimeoutMillis</td>\n      <td>Integer</td>\n      <td>Maximum time a client in the pool has to stay idle before closing it</td>\n    </tr>\n    <tr>\n      <td>ssl</td>\n      <td>Boolean</td>\n      <td>Whether to try SSL/TLS to connect to server</td>\n    </tr>\n  </tbody>\n</table>\n\n**NOTE**: By default, the 'public' schema is used for all tables.\n\nThe PostgreSQL connector uses [node-postgres](https://github.com/brianc/node-postgres) as the driver. For more\ninformation about configuration parameters, see [node-postgres documentation](https://github.com/brianc/node-postgres/wiki/Client#constructors).\n\n### Connecting to UNIX domain socket\n\nA common PostgreSQL configuration is to connect to the UNIX domain socket `/var/run/postgresql/.s.PGSQL.5432` instead of using the TCP/IP port. For example:\n\n```javascript\n{\n  \"postgres\": {\n    \"host\": \"/var/run/postgresql/\",\n    \"port\": \"5432\",\n    \"database\": \"dbname\",\n    \"username\": \"dbuser\",\n    \"password\": \"dbpassword\",\n    \"name\": \"postgres\",\n    \"debug\": true,\n    \"connector\": \"postgresql\"\n  }\n}\n```\n\n## Defining models\n\nThe model definition consists of the following properties.\n\n<table>\n  <thead>\n    <tr>\n      <th>Property</th>\n      <th>Default</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>    \n    <tr>\n      <td>name</td>\n      <td>Camel-case of the database table name</td>\n      <td>Name of the model.</td>\n    </tr>\n    <tr>\n      <td>options</td>\n      <td>N/A</td>\n      <td>Model level operations and mapping to PostgreSQL schema/table</td>\n    </tr>\n    <tr>\n      <td>properties</td>\n      <td>N/A</td>\n      <td>Property definitions, including mapping to PostgreSQL column</td>\n    </tr>\n  </tbody>\n</table>\n\nFor example:\n\n{% include code-caption.html content=\"/common/models/model.json\" %}\n```javascript\n{\n  \"name\": \"Inventory\",\n  \"options\": {\n    \"idInjection\": false,\n    \"postgresql\": {\n      \"schema\": \"strongloop\",\n      \"table\": \"inventory\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 64,\n      \"precision\": null,\n      \"scale\": null,\n      \"postgresql\": {\n        \"columnName\": \"id\",\n        \"dataType\": \"character varying\",\n        \"dataLength\": 64,\n        \"dataPrecision\": null,\n        \"dataScale\": null,\n        \"nullable\": \"NO\"\n      }\n    },\n    \"productId\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 20,\n      \"precision\": null,\n      \"scale\": null,\n      \"id\": 1,\n      \"postgresql\": {\n        \"columnName\": \"product_id\",\n        \"dataType\": \"character varying\",\n        \"dataLength\": 20,\n        \"dataPrecision\": null,\n        \"dataScale\": null,\n        \"nullable\": \"YES\"\n      }\n    },\n    \"locationId\": {\n      \"type\": \"String\",\n      \"required\": false,\n      \"length\": 20,\n      \"precision\": null,\n      \"scale\": null,\n      \"id\": 1,\n      \"postgresql\": {\n        \"columnName\": \"location_id\",\n        \"dataType\": \"character varying\",\n        \"dataLength\": 20,\n        \"dataPrecision\": null,\n        \"dataScale\": null,\n        \"nullable\": \"YES\"\n      }\n    },\n    \"available\": {\n      \"type\": \"Number\",\n      \"required\": false,\n      \"length\": null,\n      \"precision\": 32,\n      \"scale\": 0,\n      \"postgresql\": {\n        \"columnName\": \"available\",\n        \"dataType\": \"integer\",\n        \"dataLength\": null,\n        \"dataPrecision\": 32,\n        \"dataScale\": 0,\n        \"nullable\": \"YES\"\n      }\n    },\n    \"total\": {\n      \"type\": \"Number\",\n      \"required\": false,\n      \"length\": null,\n      \"precision\": 32,\n      \"scale\": 0,\n      \"postgresql\": {\n        \"columnName\": \"total\",\n        \"dataType\": \"integer\",\n        \"dataLength\": null,\n        \"dataPrecision\": 32,\n        \"dataScale\": 0,\n        \"nullable\": \"YES\"\n      }\n    }\n  }\n}\n```\n\n## Type mapping\n\nSee [LoopBack types](http://loopback.io/doc/en/lb3/LoopBack-types.html) for details on LoopBack's data types.\n\n### LoopBack to PostgreSQL types\n\n<table>\n  <tbody>\n    <tr>\n      <th>LoopBack Type</th>\n      <th>PostgreSQL Type</th>\n    </tr>\n    <tr>\n      <td>String<br>JSON<br>Text<br>Default</td>\n      <td>\n        VARCHAR2<br/>\n        Default length is 1024\n      </td>\n    </tr>\n    <tr>\n      <td>Number</td>\n      <td>INTEGER</td>\n    </tr>\n    <tr>\n      <td>Date</td>\n      <td>TIMESTAMP WITH TIME ZONE</td>\n    </tr>\n    <tr>\n      <td>Boolean</td>\n      <td>BOOLEAN</td>\n    </tr>\n  </tbody>\n</table>\n\n### PostgreSQL types to LoopBack\n\n<table>\n  <tbody>\n    <tr>\n      <th>PostgreSQL Type</th>\n      <th>LoopBack Type</th>\n    </tr>\n    <tr>\n      <td>BOOLEAN</td>\n      <td>Boolean</td>\n    </tr>\n    <tr>\n      <td>\n        VARCHAR<br>CHARACTER VARYING<br>CHARACTER<br>CHAR<br>TEXT\n      </td>\n      <td>String</td>\n    </tr>\n    <tr>\n      <td>BYTEA</td>\n      <td>Node.js <a href=\"http://nodejs.org/api/buffer.html\">Buffer object</a></td>\n    </tr>\n    <tr>\n      <td>SMALLINT<br>INTEGER<br>BIGINT<br>DECIMAL<br>NUMERIC<br>REAL<br>DOUBLE<br>SERIAL<br>BIGSERIAL</td>\n      <td>Number</td>\n    </tr>\n    <tr>\n      <td>DATE<br>TIMESTAMP<br>TIME</td>\n      <td>Date</td>\n    </tr>\n    <tr>\n      <td>POINT</td>\n      <td><a href=\"http://apidocs.strongloop.com/loopback-datasource-juggler/#geopoint\">GeoPoint</a></td>\n    </tr>\n  </tbody>\n</table>\n\n## Numeric Data Type\n\n**Note**: The [node.js driver for postgres](https://github.com/brianc/node-postgres) by default casts `Numeric` type as a string on `GET` operation. This is to avoid _data precision loss_ since `Numeric` types in postgres cannot be safely converted to JavaScript `Number`.\n\nFor details, see the corresponding [driver issue](https://github.com/brianc/node-pg-types/issues/28).\n\n## Querying JSON fields\n\n**Note** The fields you are querying should be setup to use the JSON postgresql data type - see Defining models\n\nAssuming a model such as this:\n\n```json\n{\n  \"name\": \"Customer\",\n  \"properties\": {\n    \"address\": {\n      \"type\": \"object\",\n      \"postgresql\": {\n        \"dataType\": \"json\"\n      }\n    }\n  }\n}\n```\n\nYou can query the nested fields with dot notation:\n\n```javascript\nCustomer.find({\n  where: {\n    'address.state': 'California'\n  },\n  order: 'address.city'\n})\n```\n\n## Discovery and auto-migration\n\n### Model discovery\n\nThe PostgreSQL connector supports _model discovery_ that enables you to create LoopBack models\nbased on an existing database schema using the unified [database discovery API](http://apidocs.strongloop.com/loopback-datasource-juggler/#datasource-prototype-discoverandbuildmodels).  For more information on discovery, see [Discovering models from relational databases](https://loopback.io/doc/en/lb3/Discovering-models-from-relational-databases.html).\n\n### Auto-migratiion\n\nThe PostgreSQL connector also supports _auto-migration_ that enables you to create a database schema\nfrom LoopBack models using the [LoopBack automigrate method](http://apidocs.strongloop.com/loopback-datasource-juggler/#datasource-prototype-automigrate).\n\nFor more information on auto-migration, see [Creating a database schema from models](https://loopback.io/doc/en/lb3/Creating-a-database-schema-from-models.html) for more information.\n\nLoopBack PostgreSQL connector creates the following schema objects for a given\nmodel: a table, for example, PRODUCT under the 'public' schema within the database.\n\nThe auto-migrate method:\n\n* Defines a primary key for the properties whose `id` property is true (or a positive number).\n* Creates a column with 'SERIAL' type if the `generated` property of the `id` property is true.\n\nDestroying models may result in errors due to foreign key integrity. First delete any related models by calling delete on models with relationships.\n\n## Running tests\n\n### Own instance\nIf you have a local or remote PostgreSQL instance and would like to use that to run the test suite, use the following command:\n- Linux\n```bash\nPOSTGRESQL_HOST=<HOST> POSTGRESQL_PORT=<PORT> POSTGRESQL_USER=<USER> POSTGRESQL_PASSWORD=<PASSWORD> POSTGRESQL_DATABASE=<DATABASE> CI=true npm test\n```\n- Windows\n```bash\nSET POSTGRESQL_HOST=<HOST> SET POSTGRESQL_PORT=<PORT> SET POSTGRESQL_USER=<USER> SET POSTGRESQL_PASSWORD=<PASSWORD> SET POSTGRESQL_DATABASE=<DATABASE> SET CI=true npm test\n```\n\n### Docker\nIf you do not have a local PostgreSQL instance, you can also run the test suite with very minimal requirements.\n- Assuming you have [Docker](https://docs.docker.com/engine/installation/) installed, run the following script which would spawn a PostgreSQL instance on your local:\n```bash\nsource setup.sh <HOST> <PORT> <USER> <PASSWORD> <DATABASE>\n```\nwhere `<HOST>`, `<PORT>`, `<USER>`, `<PASSWORD>` and `<DATABASE>` are optional parameters. The default values are `localhost`, `5432`, `root`, `pass` and `testdb` respectively.\n- Run the test:\n```bash\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/strongloop/loopback-connector-postgresql.git"
  },
  "scripts": {
    "lint": "eslint .",
    "posttest": "npm run lint",
    "pretest": "node pretest.js",
    "test": "mocha -R spec --timeout 10000 --require test/init.js test/*.test.js"
  },
  "version": "3.3.0"
}

{
  "_args": [
    [
      {
        "raw": "fast-json-patch@0.5.x",
        "scope": null,
        "escapedName": "fast-json-patch",
        "name": "fast-json-patch",
        "rawSpec": "0.5.x",
        "spec": ">=0.5.0 <0.6.0",
        "type": "range"
      },
      "/Users/vt/Desktop/new/node_modules/pkgcloud"
    ]
  ],
  "_from": "fast-json-patch@>=0.5.0 <0.6.0",
  "_id": "fast-json-patch@0.5.7",
  "_inCache": true,
  "_location": "/pkgcloud/fast-json-patch",
  "_nodeVersion": "4.3.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/fast-json-patch-0.5.7.tgz_1461592022838_0.32197604491375387"
  },
  "_npmUser": {
    "name": "tomalec",
    "email": "tomalecwp@gmail.com"
  },
  "_npmVersion": "2.14.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "fast-json-patch@0.5.x",
    "scope": null,
    "escapedName": "fast-json-patch",
    "name": "fast-json-patch",
    "rawSpec": "0.5.x",
    "spec": ">=0.5.0 <0.6.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pkgcloud"
  ],
  "_resolved": "https://registry.npmjs.org/fast-json-patch/-/fast-json-patch-0.5.7.tgz",
  "_shasum": "b5a8f49d259624596ef98b872f3fda895b4d8665",
  "_shrinkwrap": null,
  "_spec": "fast-json-patch@0.5.x",
  "_where": "/Users/vt/Desktop/new/node_modules/pkgcloud",
  "author": {
    "name": "Joachim Wester",
    "email": "joachimwester@me.com",
    "url": "http://www.starcounter.com/"
  },
  "bugs": {
    "url": "https://github.com/Starcounter-Jack/JSON-Patch/issues"
  },
  "dependencies": {},
  "description": "Fast implementation of JSON-Patch (RFC-6902) with duplex (observe changes) capabilities",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-bump": "^0.3.0",
    "grunt-contrib-uglify": "~0.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b5a8f49d259624596ef98b872f3fda895b4d8665",
    "tarball": "http://registry.npmjs.org/fast-json-patch/-/fast-json-patch-0.5.7.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "gitHead": "6a339cc0c4ffb296e8e816f151530f1f6c2350cc",
  "homepage": "https://github.com/Starcounter-Jack/JSON-Patch",
  "keywords": [
    "json",
    "patch",
    "http",
    "rest"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": "./src/json-patch-duplex",
  "maintainers": [
    {
      "name": "warpech",
      "email": "warpech@gmail.com"
    },
    {
      "name": "tomalec",
      "email": "tomalecwp@gmail.com"
    }
  ],
  "name": "fast-json-patch",
  "optionalDependencies": {},
  "readme": "JSON-Patch\n===============\n\nA leaner and meaner implementation of JSON-Patch. Small footprint. High performance.\n\nWith JSON-Patch, you can:\n- **apply** patches\n- **validate** a sequence of patches\n- **observe** for changes (and generate patches when a change is detected)\n- **compare** two objects (to obtain the difference)\n\n## Why you should use JSON-Patch\n\nJSON-Patch [(RFC6902)](http://tools.ietf.org/html/rfc6902) is a standard format that \nallows you to update a JSON document by sending the changes rather than the whole document. \nJSON Patch plays well with the HTTP PATCH verb (method) and REST style programming.\n\nMark Nottingham has a [nice blog]( http://www.mnot.net/blog/2012/09/05/patch) about it.\n\n## Footprint\n1.22 KB minified and gzipped (3 KB minified)\n\n## Performance\n\n##### [`add` benchmark](http://jsperf.com/json-patch-benchmark/2)\n\n<img width=\"907\" alt=\"screenshot 2015-10-22 20 35 22\" src=\"https://cloud.githubusercontent.com/assets/566463/10674707/b3deec60-78fc-11e5-876d-59c90a0cab2f.png\">\n\n##### [`replace` benchmark](http://jsperf.com/json-patch-benchmark-replace/2)\n\n<img width=\"904\" alt=\"screenshot 2015-10-22 20 35 58\" src=\"https://cloud.githubusercontent.com/assets/566463/10674708/b6f80d14-78fc-11e5-82c6-658510f31f63.png\">\n\nTested on 22.10.2015. Compared libraries: \n\n- [Starcounter-Jack/JSON-Patch](https://github.com/Starcounter-Jack/JSON-Patch) 0.5.4\n- [bruth/jsonpatch-js](https://github.com/bruth/jsonpatch-js) 0.5.0 \n- [dharmafly/jsonpatch.js](https://github.com/dharmafly/jsonpatch.js) master branch \n- [jiff](https://www.npmjs.com/package/jiff) 0.7.2 browserified\n- [json8-patch](https://www.npmjs.com/package/json8-patch) 0.3.2 browserified\n\nWe aim the tests to be fair. Our library puts performance as the #1 priority, while other libraries can have different priorities. If you'd like to update the benchmarks or add a library, please edit the jsperf benchmarks linked above and open an issue to include new results.\n\n## Features\n* Allows you to apply patches on object trees for incoming traffic.\n* Allows you to freely manipulate object trees and then generate patches for outgoing traffic.\n* Tested in IE 8-11, Firefox, Chrome, Safari and Node.js\n\n\n## Install\n\nInstall the current version (and save it as a dependency):\n\n### npm\n\n```sh\n$ npm install fast-json-patch --save\n```\n### bower\n\n```sh\n$ bower install fast-json-patch --save\n```\n\n### [download as ZIP](https://github.com/Starcounter-Jack/JSON-Patch/archive/master.zip)\n\n\n## Adding to your project\n\n### In a web browser\n\nInclude `json-patch.js` if you want support for applying patches **or**\ninclude `json-patch-duplex.js` if you also want to generate patches.\n\n### In Node.js\n\nCall require to get the instance: \n\n```js\nvar jsonpatch = require('fast-json-patch')\n```\n\n## Usage\n\nApplying patches:\n\n```js\nvar myobj = { firstName:\"Albert\", contactDetails: { phoneNumbers: [ ] } };\nvar patches = [\n   {op:\"replace\", path:\"/firstName\", value:\"Joachim\" },\n   {op:\"add\", path:\"/lastName\", value:\"Wester\" },\n   {op:\"add\", path:\"/contactDetails/phoneNumbers/0\", value:{ number:\"555-123\" }  }\n   ];\njsonpatch.apply( myobj, patches );\n// myobj == { firstName:\"Joachim\", lastName:\"Wester\", contactDetails:{ phoneNumbers[ {number:\"555-123\"} ] } };\n```\nGenerating patches:\n\n```js\nvar myobj = { firstName:\"Joachim\", lastName:\"Wester\", contactDetails: { phoneNumbers: [ { number:\"555-123\" }] } };\nobserver = jsonpatch.observe( myobj );\nmyobj.firstName = \"Albert\";\nmyobj.contactDetails.phoneNumbers[0].number = \"123\";\nmyobj.contactDetails.phoneNumbers.push({number:\"456\"});\nvar patches = jsonpatch.generate(observer);\n// patches  == [\n//   { op:\"replace\", path=\"/firstName\", value:\"Albert\"},\n//   { op:\"replace\", path=\"/contactDetails/phoneNumbers/0/number\", value:\"123\"},\n//   { op:\"add\", path=\"/contactDetails/phoneNumbers/1\", value:{number:\"456\"}}];\n```\nComparing two object trees:\n\n```js\nvar objA = {user: {firstName: \"Albert\", lastName: \"Einstein\"}};\nvar objB = {user: {firstName: \"Albert\", lastName: \"Collins\"}};\nvar diff = jsonpatch.compare(objA, objB));\n//diff == [{op: \"replace\", path: \"/user/lastName\", value: \"Collins\"}]\n```\n\nValidating a sequence of patches:\n\n```js\nvar obj = {user: {firstName: \"Albert\"}};\nvar patches = [{op: \"replace\", path: \"/user/firstName\", value: \"Albert\"}, {op: \"replace\", path: \"/user/lastName\", value: \"Einstein\"}];\nvar errors = jsonpatch.validate(patches, obj);\nif (errors.length == 0) {\n //there are no errors!\n}\nelse {\n  for (var i=0; i < errors.length; i++) {\n    if (!errors[i]) {\n      console.log(\"Valid patch at index\", i, patches[i]);\n    }\n    else {\n      console.error(\"Invalid patch at index\", i, errors[i], patches[i]);\n    }\n  }\n}\n```\n\n\n## Testing\n\n### In a web browser\n\n1. Testing **json-patch.js**\n - Load `test/SpecRunner.html` in your web browser\n2. Testing **json-patch-duplex.js**\n - Load `test/SpecRunnerDuplex.html` in your web browser\n\nEach of the test suite files contains *Jasmine* unit test suite and *Benchmark.js* performance test suite.\n\nTo run *Benchmark.js* performance tests, press \"Run Tests\" button.\n\n### In Node.js\n\n1. Go to directory where you have cloned the repo\n2. Install Jasmine Node.js module by running command `npm install jasmine-node -g`\n3. Testing **json-patch.js**\n - Run command `jasmine-node --matchall --config duplex no test/spec/coreSpec.js`\n4. Testing **json-patch-duplex.js**\n - Run command `jasmine-node --matchall --config duplex yes test/spec/coreSpec.js test/spec/duplexSpec.js`\n\n## API\n\n#### jsonpatch.apply (`obj` Object, `patches` Array, `validate` Boolean) : boolean\n\nAvailable in *json-patch.js* and *json-patch-duplex.js*\n\nApplies `patches` array on `obj`.\n\nIf the `validate` parameter is set to `true`, the patch is extensively validated before applying.\nAn invalid patch results in throwing an error (see `jsonpatch.validate` for more information about the error object).\n\nIf patch was succesfully applied, returns `true`.\n\nIf there was a `test` patch in `patches` array, returns the result of the test.\n\nIf there was more than one patch in the array, the result of the last patch is returned.\n\n#### jsonpatch.observe (`obj` Object, `callback` Function (optional)) : `observer` Object\n\nAvailable in *json-patch-duplex.js*\n\nSets up an deep observer on `obj` that listens for changes in object tree. When changes are detected, the optional\ncallback is called with the generated patches array as the parameter.\n\nReturns `observer`.\n\n#### jsonpatch.generate (`obj` Object, `observer` Object) : `patches` Array\n\nAvailable in *json-patch-duplex.js*\n\nIf there are pending changes in `obj`, returns them synchronously. If a `callback` was defined in `observe`\nmethod, it will be triggered synchronously as well.\n\nIf there are no pending changes in `obj`, returns an empty array (length 0).\n\n#### jsonpatch.unobserve (`obj` Object, `observer` Object) : void\n\nAvailable in *json-patch-duplex.js*\n\nDestroys the observer set up on `obj`.\n\nAny remaining changes are delivered synchronously (as in `jsonpatch.generate`). Note: this is different that ES6/7 `Object.unobserve`, which delivers remaining changes asynchronously.\n\n#### jsonpatch.compare (`obj1` Object, `obj2` Object) : `patches` Array\n\nAvailable in *json-patch-duplex.js*\n\nCompares object trees `obj1` and `obj2` and returns the difference relative to `obj1` as a patches array.\n\nIf there are no differences, returns an empty array (length 0).\n\n#### jsonpatch.validate (`patches` Array, `tree` Object (optional)) : `error` JsonPatchError\n\nAvailable in *json-patch.js* and *json-patch-duplex.js*\n\nValidates a sequence of operations. If `tree` parameter is provided, the sequence is additionally validated against the object tree.\n\nIf there are no errors, returns undefined. If there is an errors, returns a JsonPatchError object with the following properties:\n\n- `name` String - short error code\n- `message` String - long human readable error message\n- `index` Number - index of the operation in the sequence\n- `operation` Object - reference to the operation\n- `tree` Object - reference to the tree\n\nPossible errors:\n\nError name                    | Error message\n------------------------------|------------\nSEQUENCE_NOT_AN_ARRAY         | Patch sequence must be an array\nOPERATION_NOT_AN_OBJECT       | Operation is not an object\nOPERATION_OP_INVALID          | Operation `op` property is not one of operations defined in RFC-6902\nOPERATION_PATH_INVALID        | Operation `path` property is not a string\nOPERATION_FROM_REQUIRED       | Operation `from` property is not present (applicable in `move` and `copy` operations)\nOPERATION_VALUE_REQUIRED      | Operation `value` property is not present, or `undefined` (applicable in `add`, `replace` and `test` operations)\nOPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED  | Operation `value` property object has at least one `undefined` value (applicable in `add`, `replace` and `test` operations)\nOPERATION_PATH_CANNOT_ADD     | Cannot perform an `add` operation at the desired path\nOPERATION_PATH_UNRESOLVABLE   | Cannot perform the operation at a path that does not exist\nOPERATION_FROM_UNRESOLVABLE   | Cannot perform the operation from a path that does not exist\nOPERATION_PATH_ILLEGAL_ARRAY_INDEX | Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\nOPERATION_VALUE_OUT_OF_BOUNDS | The specified index MUST NOT be greater than the number of elements in the array\n\n\n## `undefined`s (JSON to JS extension)\n\nAs `undefined` is not a valid value for any JSON node, it's also not valid value o JSON Patch operation object value property. Therefore, for valid JSON document, `jsonpatch` will not generate JSON Patches that sets anything to `undefined`.\n\nHowever, to play nicer with natural JavaScipt objects `jsonpatch` can be applied to an object that contains `undefined`, in such case we will treat it as JS does. `.apply` will handle JSON Patches with `value: undefined` as any other falsy value. `.generate`, `.compare`, `.observe` methods will also produce JSON Patches with `undefined`s, but only for (non valid) JSON documents that contains it.\n\n\n## :no_entry_sign: `undefined`s (JS to JSON projection)\n\n~~As `undefined` is not a valid value for any JSON node, it's also not valid value o JSON Patch operation object value property. Therefore `jsonpatch` will not generate JSON Patches that sets anything to `undefined`.~~\n\n~~However, to play nicer with natural JavaScipt objects `jsonpatch` can be applied to an object that contains `undefined`, in such case we will use it as native `JSON.stringify` - we will treat them as non-existing nodes, and map to `null` for array elements.~~\n\n## Changelog\n\nTo see the list of recent changes, see [Releases](https://github.com/Starcounter-Jack/JSON-Patch/releases).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Starcounter-Jack/JSON-Patch.git"
  },
  "scripts": {},
  "version": "0.5.7"
}

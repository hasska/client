{
  "_args": [
    [
      {
        "raw": "pkgcloud@^1.5.0",
        "scope": null,
        "escapedName": "pkgcloud",
        "name": "pkgcloud",
        "rawSpec": "^1.5.0",
        "spec": ">=1.5.0 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Desktop/new/node_modules/loopback-component-storage"
    ]
  ],
  "_from": "pkgcloud@>=1.5.0 <2.0.0",
  "_id": "pkgcloud@1.5.0",
  "_inCache": true,
  "_location": "/pkgcloud",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/pkgcloud-1.5.0.tgz_1508190125197_0.2531903542112559"
  },
  "_npmUser": {
    "name": "rosskukulinski",
    "email": "ross@kukulinski.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "asynckit": "0.4.0",
    "aws-sign2": "0.7.0",
    "aws4": "1.6.0",
    "caseless": "0.12.0",
    "combined-stream": "1.0.6",
    "extend": "3.0.1",
    "forever-agent": "0.6.1",
    "har-validator": "5.0.3",
    "hawk": "6.0.2",
    "http-signature": "1.2.0",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.18",
    "oauth-sign": "0.8.2",
    "performance-now": "2.1.0",
    "safe-buffer": "5.1.1",
    "sax": "1.2.4",
    "stringstream": "0.0.5",
    "tough-cookie": "2.3.4",
    "tunnel-agent": "0.6.0",
    "uuid": "3.2.1"
  },
  "_requested": {
    "raw": "pkgcloud@^1.5.0",
    "scope": null,
    "escapedName": "pkgcloud",
    "name": "pkgcloud",
    "rawSpec": "^1.5.0",
    "spec": ">=1.5.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/loopback-component-storage"
  ],
  "_resolved": "https://registry.npmjs.org/pkgcloud/-/pkgcloud-1.5.0.tgz",
  "_shasum": "cb77f776bb9c5095b7942a0e954ea2f96124351f",
  "_shrinkwrap": null,
  "_spec": "pkgcloud@^1.5.0",
  "_where": "/Users/vt/Desktop/new/node_modules/loopback-component-storage",
  "author": {
    "name": "Charlie Robbins",
    "email": "charlie.robbins@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/pkgcloud/pkgcloud/issues"
  },
  "config": {
    "blanket": {
      "pattern": "/lib/",
      "data-cover-never": "node_modules"
    }
  },
  "contributors": [
    {
      "name": "Nuno Job",
      "email": "nuno@nodejitsu.com"
    },
    {
      "name": "Maciej Malecki",
      "email": "me@mmalecki.com"
    },
    {
      "name": "Daniel Aristizabal",
      "email": "daniel@nodejitsu.com"
    },
    {
      "name": "Ken Perkins",
      "email": "ken.perkins@rackspace.com"
    },
    {
      "name": "Ross Kukulinski",
      "email": "ross@kukulinski.com"
    }
  ],
  "dependencies": {
    "async": "0.9.x",
    "aws-sdk": "^2.2.43",
    "errs": "0.3.x",
    "eventemitter2": "0.4.x",
    "fast-json-patch": "0.5.x",
    "filed": "0.1.x",
    "gcloud": "^0.10.0",
    "ip": "0.3.x",
    "lodash": "^3.10.1",
    "mime": "1.4.1",
    "qs": "1.2.x",
    "request": "2.83.0",
    "s3-upload-stream": "~1.0.7",
    "through2": "0.6.x",
    "url-join": "0.0.x",
    "xml2js": "0.1.x"
  },
  "description": "An infrastructure-as-a-service agnostic cloud library for node.js",
  "devDependencies": {
    "blanket": "1.1.9",
    "coveralls": "^2.11.2",
    "hock": "~1.2.0",
    "jshint": "~2.7.0",
    "mocha": "1.21.x",
    "mocha-lcov-reporter": "0.0.1",
    "should": "4.0.x"
  },
  "directories": {},
  "dist": {
    "shasum": "cb77f776bb9c5095b7942a0e954ea2f96124351f",
    "tarball": "https://registry.npmjs.org/pkgcloud/-/pkgcloud-1.5.0.tgz"
  },
  "engines": {
    "node": ">=0.10.x"
  },
  "gitHead": "70d15ec7e57cdffee3dc51f99df5ffb5a9228029",
  "homepage": "https://github.com/pkgcloud/pkgcloud#readme",
  "keywords": [
    "cloud",
    "cloud computing",
    "api",
    "rackspace",
    "joyent",
    "aws",
    "amazon",
    "azure",
    "google",
    "iaas",
    "servers",
    "compute",
    "storage",
    "databases",
    "client",
    "mongolab",
    "iriscouch",
    "mongohq",
    "openstack",
    "redistogo",
    "hpcloud",
    "hp",
    "helion"
  ],
  "main": "./lib/pkgcloud",
  "maintainers": [
    {
      "name": "rosskukulinski",
      "email": "ross@kukulinski.com"
    },
    {
      "name": "jcrugzz",
      "email": "jcrugzz@gmail.com"
    },
    {
      "name": "mmalecki",
      "email": "me@mmalecki.com"
    },
    {
      "name": "cronopio",
      "email": "aristizabal.daniel@gmail.com"
    },
    {
      "name": "kperkins",
      "email": "ken.perkins@rackspace.com"
    },
    {
      "name": "indexzero",
      "email": "charlie.robbins@gmail.com"
    }
  ],
  "name": "pkgcloud",
  "optionalDependencies": {},
  "readme": "# pkgcloud [![Build Status](https://secure.travis-ci.org/pkgcloud/pkgcloud.png?branch=master)](http://travis-ci.org/pkgcloud/pkgcloud) [![NPM version](https://badge.fury.io/js/pkgcloud.png)](http://badge.fury.io/js/pkgcloud)\n\n[![Join the chat at https://gitter.im/pkgcloud/pkgcloud](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pkgcloud/pkgcloud?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\npkgcloud is a standard library for node.js that abstracts away differences among multiple cloud providers.\n\n* [Getting started](#getting-started)\n  * [Basic APIs](#basic-apis)\n  * [Unified Vocabulary](#unified-vocabulary)\n  * [Supported APIs](#supported-apis)\n* [Compute](#compute)\n* [Storage](#storage)\n  * [Uploading Files](#upload-a-file)\n  * [Downloading Files](#download-a-file)\n* [Database](#databases)\n* [DNS](#dns----beta) *(beta)*\n* [Block Storage](#block-storage----beta) *(beta)*\n* [Load Balancers](#load-balancers----beta) *(beta)*\n* [Orchestration](#orchestration----beta) *(beta)*\n* [Network](#network----beta) *(beta)*\n* [CDN](#cdn----beta) *(beta)*\n* _Fine Print_\n  * [Installation](#installation)\n  * [Tests](#tests)\n  * [Logging](#logging)\n  * [Code Coverage](#code-coverage)\n  * [Contribute!](#contributing)\n  * [Roadmap](#roadmap)\n\n<a name=\"getting-started\"></a>\n## Getting Started\n\nYou can install `pkgcloud` via `npm` or add to it to [dependencies](https://npmjs.org/doc/json.html#dependencies) in your `package.json` file:\n\n```\nnpm install pkgcloud\n```\n\nCurrently there are nine service types which are handled by pkgcloud:\n\n* [Compute](#compute)\n* [Storage](#storage)\n* [Database](#databases)\n* [DNS](#dns----beta) *(beta)*\n* [Block Storage](#block-storage----beta) *(beta)*\n* [Load Balancers](#load-balancers----beta) *(beta)*\n* [Network](#network----beta) *(beta)*\n* [Orchestration](#orchestration----beta) *(beta)*\n* [CDN](#cdn----beta) *(beta)*\n\nIn our [Roadmap](#roadmap), we plan to add support for more services, such as Queueing, Monitoring, and more. Additionally, we plan to implement more providers for the *beta* services, thus moving them out of *beta*.\n\n### User Agent\n\nBy default, all pkgcloud HTTP requests will have a user agent with the library and version: `nodejs-pkgcloud/x.y.z` where `x.y.z` is the current version.\n\nYou can get this from a client at any time by calling `client.getUserAgent();`. Some providers may have an additional suffix as a function of the underlying HTTP stacks.\n\nYou can also set a custom User Agent prefix:\n\n```javascript\nclient.setCustomUserAgent('my-app/1.2.3');\n\n// returns \"my-app/1.2.3 nodejs-pkgcloud/1.1.0\"\nclient.getUserAgent();\n```\n\n<a name=\"basic-apis\"></a>\n### Basic APIs for pkgcloud\n\nServices provided by `pkgcloud` are exposed in two ways:\n\n* **By service type:** For example, if you wanted to create an API client to communicate with a compute service you could simply:\n\n``` js\n  var client = require('pkgcloud').compute.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n* **By provider name:** For example, if you knew the name of the provider you wished to communicate with you could do so directly:\n\n``` js\n  var client = require('pkgcloud').providers.joyent.compute.createClient({\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nAll API clients exposed by `pkgcloud` can be instantiated through `pkgcloud[serviceType].createClient({ ... })` or `pkcloud.providers[provider][serviceType].createClient({ ... })`.\n\n<a name=\"unified-vocabulary\"></a>\n### Unified Vocabulary\n\nDue to the differences between the vocabulary for each service provider, **[pkgcloud uses its own unified vocabulary](docs/vocabulary.md).**\n\n* **Compute:** [Server](#server), [Image](#image), [Flavor](#flavor)\n* **Storage:** [Container](#container), [File](#file)\n* **DNS:** [Zone](#zone), [Record](#record)\n\n**Note:** Unified vocabularies may not yet be defined for *beta* services.\n\n<a name=\"supported-apis\"></a>\n### Supported APIs\n\nSupporting every API for every cloud service provider in Node.js is a huge undertaking, but _that is the long-term goal of `pkgcloud`_. **Special attention has been made to ensure that each service type has enough providers for a critical mass of portability between providers** (i.e. Each service implemented has multiple providers).\n\nIf a service does not have at least two providers, it is considered a *beta* interface; We reserve the right to improve the API as multiple providers will allow generalization to be better determined.\n\n* **[Compute](#compute)**\n  * [Amazon](docs/providers/amazon.md#using-compute)\n  * [Azure](docs/providers/azure.md#using-compute)\n  * [DigitalOcean](docs/providers/digitalocean.md#using-compute)\n  * [HP](docs/providers/hp/compute.md)\n  * [Joyent](docs/providers/joyent.md#using-compute)\n  * [Openstack](docs/providers/openstack/compute.md)\n  * [Rackspace](docs/providers/rackspace/compute.md)\n* **[Storage](#storage)**\n  * [Amazon](docs/providers/amazon.md#using-storage)\n  * [Azure](docs/providers/azure.md#using-storage)\n  * [Google](docs/providers/google.md)\n  * [HP](docs/providers/hp/storage.md)\n  * [Openstack](docs/providers/openstack/storage.md)\n  * [Rackspace](docs/providers/rackspace/storage.md)\n* **[Database](#databases)**\n  * [IrisCouch](docs/providers/iriscouch.md)\n  * [MongoLab](docs/providers/mongolab.md)\n  * [Rackspace](docs/providers/rackspace/database.md)\n  * [MongoHQ](docs/providers/mongohq.md)\n  * [RedisToGo](docs/providers/redistogo.md)\n* **[DNS](#dns----beta)** *(beta)*\n  * [Rackspace](docs/providers/rackspace/dns.md)\n* **[Block Storage](#block-storage----beta)** *(beta)*\n  * [Rackspace](docs/providers/rackspace/blockstorage.md)\n  * [Openstack](docs/providers/openstack/blockstorage.md)\n* **[Load Balancers](#load-balancers----beta)** *(beta)*\n  * [Rackspace](docs/providers/rackspace/loadbalancer.md)\n* **[Orchestration](#orchestration----beta)** *(beta)*\n  * [Openstack](docs/providers/openstack/orchestration.md)\n  * [Rackspace](docs/providers/rackspace/orchestration.md)\n* **[Network](#network----beta)** *(beta)*\n  * [HP](docs/providers/hp/network.md)\n  * [Openstack](docs/providers/openstack/network.md)\n  * [Rackspace](docs/providers/rackspace/network.md)\n* **[CDN](#cdn----beta)** *(beta)*\n  * [Openstack](docs/providers/openstack/cdn.md)\n  * [Rackspace](docs/providers/rackspace/cdn.md)\n\n## Compute\n\nThe `pkgcloud.compute` service is designed to make it easy to provision and work with VMs. To get started with a `pkgcloud.compute` client just create one:\n\n``` js\n  var client = require('pkgcloud').compute.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach compute provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* [Amazon](docs/providers/amazon.md#using-compute)\n* [Azure](docs/providers/azure.md#using-compute)\n* [DigitalOcean](docs/providers/digitalocean.md#using-compute)\n* [HP](docs/providers/hp/compute.md)\n* [Joyent](docs/providers/joyent.md#using-compute)\n* [Openstack](docs/providers/openstack/compute.md)\n* [Rackspace](docs/providers/rackspace/compute.md)\n\nEach instance of `pkgcloud.compute.Client` returned from `pkgcloud.compute.createClient` has a set of uniform APIs:\n\n### Server\n* `client.getServers(function (err, servers) { })`\n* `client.createServer(options, function (err, server) { })`\n* `client.destroyServer(serverId, function (err, server) { })`\n* `client.getServer(serverId, function (err, server) { })`\n* `client.rebootServer(server, function (err, server) { })`\n\n### Image\n* `client.getImages(function (err, images) { })`\n* `client.getImage(imageId, function (err, image) { })`\n* `client.destroyImage(image, function (err, ok) { })`\n* `client.createImage(options, function (err, image) { })`\n\n### Flavor\n* `client.getFlavors(function (err, flavors) { })`\n* `client.getFlavor(flavorId, function (err, flavor) { })`\n\n## Storage\n\nThe `pkgcloud.storage` service is designed to make it easy to upload and download files to various infrastructure providers. **_Special attention has been paid so that methods are streams and pipe-capable._**\n\nTo get started with a `pkgcloud.storage` client just create one:\n\n``` js\n  var client = require('pkgcloud').storage.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach storage provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* [Amazon](docs/providers/amazon.md#using-storage)\n* [Azure](docs/providers/azure.md#using-storage)\n* [Google](docs/providers/google.md#using-storage)\n* [HP](docs/providers/hp/storage.md)\n* [Openstack](docs/providers/openstack/storage.md)\n* [Rackspace](docs/providers/rackspace/storage.md)\n\nEach instance of `pkgcloud.storage.Client` returned from `pkgcloud.storage.createClient` has a set of uniform APIs:\n\n### Container\n* `client.getContainers(function (err, containers) { })`\n* `client.createContainer(options, function (err, container) { })`\n* `client.destroyContainer(containerName, function (err) { })`\n* `client.getContainer(containerName, function (err, container) { })`\n\n### File\n* `client.upload(options)`\n* `client.download(options, function (err) { })`\n* `client.getFiles(container, function (err, files) { })`\n* `client.getFile(container, file, function (err, server) { })`\n* `client.removeFile(container, file, function (err) { })`\n\nBoth the `.upload(options)` and `.download(options)` have had **careful attention paid to make sure they are pipe and stream capable:**\n\n### Upload a File\n``` js\n  var pkgcloud = require('pkgcloud'),\n      fs = require('fs');\n\n  var client = pkgcloud.storage.createClient({ /* ... */ });\n\n  var readStream = fs.createReadStream('a-file.txt');\n  var writeStream = client.upload({\n    container: 'a-container',\n    remote: 'remote-file-name.txt'\n  });\n\n  writeStream.on('error', function(err) {\n    // handle your error case\n  });\n\n  writeStream.on('success', function(file) {\n    // success, file will be a File model\n  });\n\n  readStream.pipe(writeStream);\n```\n\n### Download a File\n``` js\n  var pkgcloud = require('pkgcloud'),\n      fs = require('fs');\n\n  var client = pkgcloud.storage.createClient({ /* ... */ });\n\n  client.download({\n    container: 'a-container',\n    remote: 'remote-file-name.txt'\n  }).pipe(fs.createWriteStream('a-file.txt'));\n```\n\n## Databases\n\nThe `pkgcloud.database` service is designed to consistently work with a variety of Database-as-a-Service (DBaaS) providers.\n\nTo get started with a `pkgcloud.storage` client just create one:\n\n``` js\n  var client = require('pkgcloud').database.createClient({\n    //\n    // The name of the provider (e.g. \"joyent\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\nEach database provider takes different credentials to authenticate; these details about each specific provider can be found below:\n\n* **CouchDB**\n  * [IrisCouch](docs/providers/iriscouch.md#couchdb)\n* **MongoDB**\n  * [MongoLab](docs/providers/mongolab.md)\n  * [MongoHQ](docs/providers/mongohq.md)\n* **Redis**\n  * [IrisCouch](docs/providers/iriscouch.md#redis)\n  * [RedisToGo](docs/providers/redistogo.md)\n* **MySQL**\n  * [Rackspace](docs/providers/rackspace/databases.md)\n* **Azure Tables**\n  * [Azure](docs/providers/azure.md#database)\n\nDue to the various differences in how these DBaaS providers provision databases only a small surface area of the API for instances of `pkgcloud.database.Client` returned from `pkgcloud.database.createClient` is consistent across all providers:\n\n* `client.create(options, callback)`\n\nAll of the individual methods are documented for each DBaaS provider listed above.\n\n## DNS -- Beta\n\n##### Note: DNS is considered Beta until there are multiple providers; presently only Rackspace are supported.\n\nThe `pkgcloud.dns` service is designed to make it easy to manage DNS zones and records on various infrastructure providers. **_Special attention has been paid so that methods are streams and pipe-capable._**\n\nTo get started with a `pkgcloud.dns` client just create one:\n\n``` js\n  var client = require('pkgcloud').dns.createClient({\n    //\n    // The name of the provider (e.g. \"rackspace\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [Rackspace](docs/providers/rackspace/dns.md)\n\nEach instance of `pkgcloud.dns.Client` returned from `pkgcloud.dns.createClient` has a set of uniform APIs:\n\n### Zone\n* `client.getZones(details, function (err, zones) { })`\n* `client.getZone(zone, function (err, zone) { })`\n* `client.createZone(details, function (err, zone) { })`\n* `client.updateZone(zone, function (err) { })`\n* `client.deleteZone(zone, function (err) { })`\n\n### Record\n* `client.getRecords(zone, function (err, records) { })`\n* `client.getRecord(zone, record, function (err, record) { })`\n* `client.createRecord(zone, record, function (err, record) { })`\n* `client.updateRecord(zone, record, function (err, record) { })`\n* `client.deleteRecord(zone, record, function (err) { })`\n\n## Block Storage -- Beta\n\n##### Note: Block Storage is considered Beta until there are multiple providers; presently only Openstack and Rackspace are supported.\n\nThe `pkgcloud.blockstorage` service is designed to make it easy to create and manage block storage volumes and snapshots.\n\nTo get started with a `pkgcloud.blockstorage` client just create one:\n\n``` js\n  var client = require('pkgcloud').blockstorage.createClient({\n    //\n    // The name of the provider (e.g. \"rackspace\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [Rackspace](docs/providers/rackspace/blockstorage.md)\n* [Openstack](docs/providers/openstack/blockstorage.md)\n\nEach instance of `pkgcloud.blockstorage.Client` returned from `pkgcloud.blockstorage.createClient` has a set of uniform APIs:\n\n### Volume\n* `client.getVolumes(options, function (err, volumes) { })`\n* `client.getVolume(volume, function (err, volume) { })`\n* `client.createVolume(details, function (err, volume) { })`\n* `client.updateVolume(volume, function (err, volume) { })`\n* `client.deleteVolume(volume, function (err) { })`\n\n### Snapshot\n* `client.getSnapshots(options, function (err, snapshots) { })`\n* `client.getSnapshot(snapshot, function (err, snapshot) { })`\n* `client.createSnapshot(details, function (err, snapshot) { })`\n* `client.updateSnapshot(snapshot, function (err, snapshot) { })`\n* `client.deleteSnapshot(snapshot, function (err) { })`\n\n## Load Balancers -- Beta\n\n##### Note: Load Balancers is considered Beta until there are multiple providers; presently only Rackspace are supported.\n\nThe `pkgcloud.loadbalancer` service is designed to make it easy to create and manage block storage volumes and snapshots.\n\nTo get started with a `pkgcloud.loadbalancer` client just create one:\n\n``` js\n  var client = require('pkgcloud').loadbalancer.createClient({\n    //\n    // The name of the provider (e.g. \"rackspace\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [Rackspace](docs/providers/rackspace/loadbalancer.md)\n\nEach instance of `pkgcloud.loadbalancer.Client` returned from `pkgcloud.loadbalancer.createClient` has a set of uniform APIs:\n\n### LoadBalancers\n* `client.getLoadBalancers(options, function (err, loadBalancers) { })`\n* `client.getLoadBalancer(loadBalancer, function (err, loadBalancer) { })`\n* `client.createLoadBalancer(details, function (err, loadBalancer) { })`\n* `client.updateLoadBalancer(loadBalancer, function (err) { })`\n* `client.deleteLoadBalancer(loadBalancer, function (err) { })`\n\n### Nodes\n* `client.getNodes(loadBalancer, function (err, nodes) { })`\n* `client.addNodes(loadBalancer, nodes, function (err, nodes) { })`\n* `client.updateNode(loadBalancer, node, function (err) { })`\n* `client.removeNode(loadBalancer, node, function (err) { })`\n\n## Network -- Beta\n\n##### Note: Network is considered Beta until there are multiple providers; presently only HP & Openstack providers are supported.\n\nThe `pkgcloud.network` service is designed to make it easy to create and manage networks.\n\nTo get started with a `pkgcloud.network` client just create one:\n\n``` js\n  var client = require('pkgcloud').network.createClient({\n    //\n    // The name of the provider (e.g. \"openstack\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [HP](docs/providers/hp/network.md)\n* [Openstack](docs/providers/openstack/network.md)\n* [Rackspace](docs/providers/rackspace/network.md)\n\n\nEach instance of `pkgcloud.network.Client` returned from `pkgcloud.network.createClient` has a set of uniform APIs:\n\n### Networks\n* `client.getNetworks(options, function (err, networks) { })`\n* `client.getNetwork(network, function (err, network) { })`\n* `client.createNetwork(options, function (err, network) { })`\n* `client.updateNetwork(network, function (err, network) { })`\n* `client.deleteNetwork(network, function (err, networkId) { })`\n\n### Subnets\n* `client.getSubnets(options, function (err, subnets) { })`\n* `client.getSubnet(subnet, function (err, subnet) { })`\n* `client.createSubnet(options, function (err, subnet) { })`\n* `client.updateSubnet(subnet, function (err, subnet) { })`\n* `client.deleteSubnet(subnet, function (err, subnetId) { })`\n\n### Ports\n* `client.getPorts(options, function (err, ports) { })`\n* `client.getPort(port, function (err, port) { })`\n* `client.createPort(options, function (err, port) { })`\n* `client.updatePort(port, function (err, port) { })`\n* `client.deletePort(port, function (err, portId) { })`\n\n## Orchestration -- Beta\n\n##### Note: Orchestration is considered Beta until there are multiple providers; presently only Openstack are supported.\n\nThe `pkgcloud.orchestration` service is designed to allow you to access Openstack Heat via node.js. You can manage stacks and resources from within any node.js application.\n\nTo get started with a `pkgcloud.orchestration` client just create one:\n\n``` js\n  var client = require('pkgcloud').orchestration.createClient({\n    //\n    // The name of the provider (e.g. \"openstack\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [Openstack](docs/providers/openstack/orchestration.md)\n* [Rackspace](docs/providers/rackspace/orchestration.md)\n\nEach instance of `pkgcloud.orchestration.Client` returned from `pkgcloud.orchestration.createClient` has a set of uniform APIs:\n\n### Stack\n* `client.getStack(stack, function (err, stack) { })`\n* `client.getStacks(options, function (err, stacks) { })`\n* `client.createStack(details, function (err, stack) { })`\n* `client.previewStack(details, function (err, stack) { })`\n* `client.adoptStack(details, function (err, stack) { })`\n* `client.updateStack(stack, function (err, stack) { })`\n* `client.deleteStack(stack, function (err) { })`\n* `client.abandonStack(stack, function (err, abandonedStack) { })`\n* `client.getTemplate(stack, function (err, template) { })`\n\n### Resources\n* `client.getResource(stack, resource, function (err, resource) { })`\n* `client.getResources(stack, function (err, resources) { })`\n* `client.getResourceTypes(function (err, resourceTypes) { })`\n* `client.getResourceSchema(resourceType, function (err, resourceSchema) { })`\n* `client.getResourceTemplate(resourceType, function (err, resourceTemplate) { })`\n\n### Events\n* `client.getEvent(stack, resource, eventId, function (err, event) { })`\n* `client.getEvents(stack, function (err, events) { })`\n* `client.getResourceEvents(stack, resource, function (err, events) { })`\n\n### Templates\n* `client.validateTemplate(template, function (err, template) { })`\n\n## CDN -- Beta\n\n##### Note: CDN is considered Beta until there are multiple providers; presently only Openstack and Rackspace are supported.\n\nThe `pkgcloud.cdn` service is designed to allow you to access Openstack Poppy via node.js. You can manage services and flavors from within any node.js application.\n\nTo get started with a `pkgcloud.cdn` client just create one:\n\n``` js\n  var client = require('pkgcloud').cdn.createClient({\n    //\n    // The name of the provider (e.g. \"openstack\")\n    //\n    provider: 'provider-name',\n\n    //\n    // ... Provider specific credentials\n    //\n  });\n```\n\n#### Providers\n\n* [Openstack](docs/providers/openstack/cdn.md)\n* [Rackspace](docs/providers/rackspace/cdn.md)\n\nEach instance of `pkgcloud.cdn.Client` returned from `pkgcloud.cdn.createClient` has a set of uniform APIs:\n\n### Base\n* `client.getHomeDocument(function (err, homeDocument) { })`\n* `client.getPing(function (err) { })`\n\n### Service\n* `client.getService(service, function (err, service) { })`\n* `client.getServices(options, function (err, services) { })`\n* `client.createService(details, function (err, service) { })`\n* `client.updateService(service, function (err, service) { })`\n* `client.deleteService(service, function (err) { })`\n\n### Service Assets\n* `client.deleteServiceCachedAssets(service, assetUrl, function(err) { })`\n\n### Flavors\n* `client.getFlavor(flavor, function (err, flavor) { })`\n* `client.getFlavors(options, function (err, flavors) { })`\n\n## Installation\n\n``` bash\n  $ npm install pkgcloud\n```\n\n## Tests\nTo run the tests you will need `mocha@1.9.x` or higher.  You may install all\nthe requirements with:\n``` bash\n $ npm install\n```\nThen run the tests:\n\n``` bash\n $ npm test\n```\n\nThe tests use the [`hock`](https://github.com/mmalecki/hock) library for mock up the response of providers, so the tests run without do any connection to the providers, there is a notorius advantage of speed on that, also you can run the tests without Internet connection and also can highlight a change of API just disabling `hock`.\n\n\n### Running tests without mocks\nBy default the `npm test` command run the tests enabling `hock`. And sometimes you will want to test against the live provider, so you need to do this steps, in order to test without mocks.\n\n1. Copy a provider config file from `test/configs/mock` to `test/configs`\n2. Fill in with your own credentials for the provider.\n3. (Optional) The compute test suite run the common tests for all providers listed on `test/configs/providers.json`, there you can enable or disable providers.\n4. Run the tests using mocha.\n\n``` bash\nMocha installed globally\n $ mocha -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\nLinux/Mac - Mocha installed locally\n $ ./node_modules/.bin/mocha -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\nWindows - Mocha installed locally:\n $ node_modules\\.bin\\mocha.cmd -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\n```\n\n### Other ways to run the tests\nAlso you can run the tests directly using `mocha` with `hock` enabled:\n\n``` bash\nLinux/Mac - Mocha installed globally:\n $ MOCK=on mocha -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\nLinux/Mac - Mocha installed locally:\n $ MOCK=on node_modules/.bin/mocha -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\nWindows - Mocha installed globally:\n $ set MOCK=on&mocha -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n\nWindows - Mocha installed locally:\n $ set MOCK=on&node_modules\\.bin\\mocha.cmd -R spec test/*/*/*-test.js test/*/*/*/*-test.js\n```\n\nEven better, you can run the tests for some specific provider:\n\n``` bash\nLinux/Mac - Mocha installed globally:\n $ MOCK=on mocha -R spec test/iriscouch/*/*-test.js\n\nLinux/Mac - Mocha installed locally:\n $ MOCK=on ./node_modules/.bin/mocha -R spec test/iriscouch/*/*-test.js\n\nWindows - Mocha installed globally:\n $ set MOCK=on&mocha -R spec test/iriscouch/*/*-test.js\n\nWindows - Mocha installed locally:\n $ set MOCK=on&node_modules\\.bin\\mocha.cmd -R spec test/iriscouch/*/*-test.js\n\n```\n\n## Logging\nAny client you create with `createClient` can emit logging events. If you're interested in more detail from the internals of `pkgcloud`, you can wire up an event handler for log events.\n\n```Javascript\nvar client = pkgcloud.compute.createClient(options);\n\nclient.on('log::*', function(message, object) {\n  if (object) {\n   console.log(this.event.split('::')[1] + ' ' + message);\n   console.dir(object);\n  }\n  else {\n    console.log(this.event.split('::')[1]  + ' ' + message);\n  }\n});\n\n```\n\nThe valid log events raised are `log::debug`, `log::verbose`, `log::info`, `log::warn`, and `log::error`. There is also a [more detailed logging example using pkgcloud with Winston](docs/logging-with-winston.md).\n\n## Code Coverage\nYou will need jscoverage installed in order to run code coverage.  There seems to be many forks of the jscoverage project, but the recommended one is [node-jscoverage](https://github.com/visionmedia/node-jscoverage), because we use [node-coveralls](https://github.com/cainus/node-coveralls) to report coverage to http://coveralls.io.  node-coveralls requires output from [mocha-lcov-reporter](https://github.com/StevenLooman/mocha-lcov-reporter), whose documentation mentions node-jscoverage.\n\n### Warning\n\n**Running coverage will mess with your lib folder.  It will make a backup lib-bak before running and restore it if the coverage task runs successfully.**\n\nIn order to simplify cleanup if something goes wrong, it is recommended to have all all new files added and all changes committed before running coverage, so you'll be able to restore with these commands if something goes wrong:\n\n``` bash\ngit clean -fd\ngit checkout lib\n```\n\n### Coverage Pre-requisites\n\nPlease make sure jscoverage has been installed following the instructions at [node-jscoverage](https://github.com/visionmedia/node-jscoverage).\n\n### Local Coverage\n\n<code>make test-cov</code>\n\n### Run Coverage locally and send to coveralls.io\n\nTravis takes care of coveralls, so this shouldn't be necessary unless you're troubleshooting a problem with Travis/Coveralls.\nYou'll need to have access to the coveralls repo_token, which should only be visible to pkgcloud/pkgcloud admins.\n\n1. Create a .coveralls.yml containing the repo_token from https://coveralls.io/r/pkgcloud/pkgcloud\n2. Run <code>make test-coveralls</code>\n\n<a name=\"contributing\"></a>\n## Contribute!\nWe welcome contribution to `pkgcloud` by any and all individuals or organizations. Before contributing please take a look at the [Contribution Guidelines in CONTRIBUTING.md](CONTRIBUTING.md).\n\nWe are pretty flexible about these guidelines, but the closer you follow them the more likely we are to merge your pull-request.\n\n<a name=\"roadmap\"></a>\n## Roadmap\n\n1. Backport latest fixes from `node-cloudfiles` and `node-cloudservers`\n2. Implement more providers for Block Storage, DNS, and Load Balancing\n3. Add more services: Monitoring, Queueing, Autoscale.\n4. Implement `fs` compatible file API.\n5. Support additional service providers.\n\n#### Author: [Nodejitsu Inc.](http://nodejitsu.com)\n#### Contributors: [Charlie Robbins](https://github.com/indexzero), [Nuno Job](https://github.com/dscape), [Daniel Aristizabal](https://github.com/cronopio), [Marak Squires](https://github.com/marak), [Dale Stammen](https://github.com/stammen), [Ken Perkins](https://github.com/kenperkins)\n#### License: MIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/pkgcloud/pkgcloud.git"
  },
  "scripts": {
    "cov": "make cov",
    "lint": "make lint",
    "test": "make test",
    "travis": "make travis"
  },
  "version": "1.5.0"
}

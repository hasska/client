{
  "_args": [
    [
      {
        "raw": "trace@^1.1.0",
        "scope": null,
        "escapedName": "trace",
        "name": "trace",
        "rawSpec": "^1.1.0",
        "spec": ">=1.1.0 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle-docs"
    ]
  ],
  "_from": "trace@>=1.1.0 <2.0.0",
  "_id": "trace@1.2.0",
  "_inCache": true,
  "_location": "/trace",
  "_nodeVersion": "2.0.1",
  "_npmUser": {
    "name": "andreasmadsen",
    "email": "amwebdk@gmail.com"
  },
  "_npmVersion": "2.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "trace@^1.1.0",
    "scope": null,
    "escapedName": "trace",
    "name": "trace",
    "rawSpec": "^1.1.0",
    "spec": ">=1.1.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/spectacle-docs"
  ],
  "_resolved": "https://registry.npmjs.org/trace/-/trace-1.2.0.tgz",
  "_shasum": "fc294988fe9b37bf66e41f5f5cd69413fd28159f",
  "_shrinkwrap": null,
  "_spec": "trace@^1.1.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle-docs",
  "author": {
    "name": "Andreas Madsen",
    "email": "amwebdk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/AndreasMadsen/trace/issues"
  },
  "dependencies": {
    "stack-chain": "~1.3.1"
  },
  "description": "Creates super long stack traces",
  "devDependencies": {
    "clarify": "^1.0.5",
    "summary": "0.3.x",
    "tap": "1.0.x"
  },
  "directories": {},
  "dist": {
    "shasum": "fc294988fe9b37bf66e41f5f5cd69413fd28159f",
    "tarball": "https://registry.npmjs.org/trace/-/trace-1.2.0.tgz"
  },
  "engines": {
    "node": ">=0.11.14"
  },
  "gitHead": "bb55a024202eee11a6f32d284e131e3efda591cd",
  "homepage": "https://github.com/AndreasMadsen/trace#readme",
  "keywords": [
    "trace",
    "long stacks",
    "long trace",
    "stack",
    "call",
    "async"
  ],
  "license": "MIT",
  "main": "./trace.js",
  "maintainers": [
    {
      "name": "andreasmadsen",
      "email": "amwebdk@gmail.com"
    }
  ],
  "name": "trace",
  "optionalDependencies": {},
  "readme": "#trace [![Build Status](https://secure.travis-ci.org/AndreasMadsen/trace.png)](http://travis-ci.org/AndreasMadsen/trace)\n\n> Creates super long stack traces\n\nWith the help of `AsyncListener` and [stack-chain](https://github.com/AndreasMadsen/stack-chain) this\nmodule will provide stack traces there goes beyond the current tick or turn.\n\n## Installation\n\n```sheel\nnpm install trace\n```\n\nSince version `1.0.0` trace has been rewriten for node 0.11.12 and above, for\npreviuse node versions use version `0.2.1` of trace.\n\n## Found a bug?\n\nI encourage you to file any bugs you may find, even if you can't reduce the\nissue to only involve nodecore modules. I will then use all my power to fix it.\n\n> I want this module to be the best and most trusted async trace module ever!\n\n## Example\n\nThe following script produce an error:\n\n```JavaScript\nrequire('trace'); // active long stack trace\nrequire('clarify'); // Exclude node internal calls from the stack\n\nvar fs = require('fs');\n\n// There is no limit for the size of the stack trace (v8 default is 10)\nError.stackTraceLimit = Infinity;\n\nsetTimeout(function () {\n  fs.readFile(__filename, function () {\n    process.nextTick(function () {\n      throw new Error(\"custom error\");\n    });\n  });\n}, 200);\n```\n\nWithout `trace` and [`clarify`](https://github.com/AndreasMadsen/clarify) the output is:\n\n```\n/Users/Andreas/Sites/node_modules/trace/example.js:12\n      throw new Error(\"custom error\");\n            ^\nError: custom error\n    at /Users/Andreas/Sites/node_modules/trace/example.js:12:13\n    at process._tickCallback (node.js:599:11)\n```\n\nWith `trace` and [`clarify`](https://github.com/AndreasMadsen/clarify) the output is:\n\n```\n/Users/Andreas/Sites/node_modules/trace/example.js:12\n      throw new Error(\"custom error\");\n            ^\nError: custom error\n    at /Users/Andreas/Sites/node_modules/trace/example.js:12:13\n    at /Users/Andreas/Sites/node_modules/trace/example.js:11:13\n    at null._onTimeout (/Users/Andreas/Sites/node_modules/trace/example.js:10:6)\n    at Object.<anonymous> (/Users/Andreas/Sites/node_modules/trace/example.js:9:1)\n```\n\nWith only `trace` the output is (yes long so use `Error.stackTraceLimit = 25` or something like that).\n\n```\n/Users/Andreas/Sites/node_modules/trace/example.js:12\n      throw new Error(\"custom error\");\n            ^\nError: custom error\n    at /Users/Andreas/Sites/node_modules/trace/example.js:12:13\n    at process._tickCallback (node.js:599:11)\n    at process.nextTick (node.js:625:9)\n    at /Users/Andreas/Sites/node_modules/trace/example.js:11:13\n    at fs.js:258:14\n    at Object.oncomplete (fs.js:97:15)\n    at Object.fs.close (fs.js:379:11)\n    at close (fs.js:249:8)\n    at afterRead (fs.js:239:25)\n    at Object.wrapper [as oncomplete] (fs.js:437:17)\n    at Object.fs.read (fs.js:440:11)\n    at read (fs.js:222:10)\n    at fs.js:213:7\n    at Object.oncomplete (fs.js:97:15)\n    at Object.fs.fstat (fs.js:650:11)\n    at fs.js:198:8\n    at Object.oncomplete (fs.js:97:15)\n    at Object.fs.open (fs.js:401:11)\n    at Object.fs.readFile (fs.js:194:6)\n    at null._onTimeout (/Users/Andreas/Sites/node_modules/trace/example.js:10:6)\n    at Timer.listOnTimeout (timers.js:124:15)\n    at Object.exports.active (timers.js:194:5)\n    at exports.setTimeout (timers.js:261:11)\n    at global.setTimeout (node.js:177:27)\n    at Object.<anonymous> (/Users/Andreas/Sites/node_modules/trace/example.js:9:1)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:349:32)\n    at Function.Module._load (module.js:305:12)\n    at Function.Module.runMain (module.js:490:10)\n    at startup (node.js:123:16)\n    at node.js:1031:3\n```\n\n## API documentation\n\nTo active require `trace`.\n\n```JavaScript\n  require('trace');\n```\n\n### Error.stackTraceLimit\n\nThe module supports the build in v8\n[Error.stackTraceLimit](http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\nflag.\n\nThis is the max depth of the stack trace, by default it is `10`, but it can\nbe se to any number or `Infinity`.\n\n### Error.captureStackTrace\n\nNot implemented, sugestions are much appreciated\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/AndreasMadsen/trace.git"
  },
  "scripts": {
    "test": "tap ./test/simple/* ./test/regression/*"
  },
  "version": "1.2.0"
}

{
  "_args": [
    [
      {
        "raw": "nodemailer-smtp-transport@2.7.2",
        "scope": null,
        "escapedName": "nodemailer-smtp-transport",
        "name": "nodemailer-smtp-transport",
        "rawSpec": "2.7.2",
        "spec": "2.7.2",
        "type": "version"
      },
      "/Users/vt/Desktop/projects/newv1/node_modules/nodemailer"
    ]
  ],
  "_from": "nodemailer-smtp-transport@2.7.2",
  "_id": "nodemailer-smtp-transport@2.7.2",
  "_inCache": true,
  "_location": "/nodemailer-smtp-transport",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/nodemailer-smtp-transport-2.7.2.tgz_1473080929563_0.7399874974507838"
  },
  "_npmUser": {
    "name": "andris",
    "email": "andris@kreata.ee"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nodemailer-smtp-transport@2.7.2",
    "scope": null,
    "escapedName": "nodemailer-smtp-transport",
    "name": "nodemailer-smtp-transport",
    "rawSpec": "2.7.2",
    "spec": "2.7.2",
    "type": "version"
  },
  "_requiredBy": [
    "/nodemailer"
  ],
  "_resolved": "https://registry.npmjs.org/nodemailer-smtp-transport/-/nodemailer-smtp-transport-2.7.2.tgz",
  "_shasum": "03d71c76314f14ac7dbc7bf033a6a6d16d67fb77",
  "_shrinkwrap": null,
  "_spec": "nodemailer-smtp-transport@2.7.2",
  "_where": "/Users/vt/Desktop/projects/newv1/node_modules/nodemailer",
  "author": {
    "name": "Andris Reinman"
  },
  "bugs": {
    "url": "https://github.com/andris9/nodemailer-smtp-transport/issues"
  },
  "dependencies": {
    "nodemailer-shared": "1.1.0",
    "nodemailer-wellknown": "0.1.10",
    "smtp-connection": "2.12.0"
  },
  "description": "SMTP transport for Nodemailer",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-test": "^0.12.7",
    "mocha": "^3.0.2",
    "smtp-server": "^1.14.2"
  },
  "directories": {},
  "dist": {
    "shasum": "03d71c76314f14ac7dbc7bf033a6a6d16d67fb77",
    "tarball": "https://registry.npmjs.org/nodemailer-smtp-transport/-/nodemailer-smtp-transport-2.7.2.tgz"
  },
  "gitHead": "42cdd72d73b339718bc2f4754f928e5dda2afd49",
  "homepage": "http://github.com/andris9/nodemailer-smtp-transport",
  "keywords": [
    "SMTP",
    "Nodemailer"
  ],
  "license": "MIT",
  "main": "lib/smtp-transport.js",
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "name": "nodemailer-smtp-transport",
  "optionalDependencies": {},
  "readme": "# SMTP transport module for Nodemailer\n\n[![Build Status](https://travis-ci.org/andris9/nodemailer-smtp-transport.svg)](https://travis-ci.org/andris9/nodemailer-smtp-transport)\n[![NPM version](https://badge.fury.io/js/nodemailer-smtp-transport.png)](http://badge.fury.io/js/nodemailer-smtp-transport)\n\nApplies for Nodemailer v1.x and not for v0.x where transports are built-in.\n\n## Setup\n\nInstall with npm\n\n    npm install nodemailer-smtp-transport\n\nRequire to your script\n\n```javascript\nvar nodemailer = require('nodemailer');\nvar smtpTransport = require('nodemailer-smtp-transport');\n```\n\n## Usage\n\nCreate a Nodemailer transport object\n\n```javascript\nvar transporter = nodemailer.createTransport(smtpTransport(options))\n```\n\nor (by using smtpTransport as default)\n\n```javascript\nvar transporter = nodemailer.createTransport(options)\n```\n\nWhere\n\n  * **options** defines connection data\n    * **options.port** is the port to connect to (defaults to 25 or 465)\n    * **options.host** is the hostname or IP address to connect to (defaults to 'localhost')\n    * **options.secure** defines if the connection should use SSL (if `true`) or not (if `false`)\n    * **options.auth** defines authentication data (see [authentication](#authentication) section below)\n    * **options.ignoreTLS** turns off STARTTLS support if true\n    * **options.name** optional hostname of the client, used for identifying to the server\n    * **options.localAddress** is the local interface to bind to for network connections\n    * **options.connectionTimeout** how many milliseconds to wait for the connection to establish\n    * **options.greetingTimeout** how many milliseconds to wait for the greeting after connection is established\n    * **options.socketTimeout** how many milliseconds of inactivity to allow\n    * **options.logger** optional [bunyan](https://github.com/trentm/node-bunyan) compatible logger instance. If set to `true` then logs to console. If value is not set or is `false` then nothing is logged\n    * **options.debug** if set to true, then logs SMTP traffic, otherwise logs only transaction events\n    * **options.authMethod** defines preferred authentication method, eg. 'PLAIN'\n    * **options.tls** defines additional options to be passed to the socket constructor, eg. *{rejectUnauthorized: true}*\n    * **getSocket** optional method that is called every time a new connection is made against the SMTP server. This method can provide an existing socket to be used instead of creating a new one\n\nAlternatively you can use connection url with protocol 'smtp:' or 'smtps:'. Use query arguments for additional configuration values.\n\n**Example**\n\n```javascript\nvar transporter = nodemailer.createTransport(smtpTransport({\n    host: 'localhost',\n    port: 25,\n    auth: {\n        user: 'username',\n        pass: 'password'\n    }\n}));\n```\n\nOr with connection url (gmail)\n\n```javascript\nvar transporter = nodemailer.createTransport(\n    smtpTransport('smtps://username%40gmail.com:password@smtp.gmail.com')\n);\n```\n\n## Authentication\n\nIf authentication data is not present, the connection is considered authenticated from the start.\n\nSet authentcation data with `options.auth`\n\nWhere\n\n  * **auth** is the authentication object\n    * **auth.user** is the username\n    * **auth.pass** is the password for the user\n    * **auth.xoauth2** is the OAuth2 access token (preferred if both `pass` and `xoauth2` values are set) or an [XOAuth2](https://github.com/andris9/xoauth2) token generator object.\n\nIf a [XOAuth2](https://github.com/andris9/xoauth2) token generator is used as the value for `auth.xoauth2` then you do not need to set the value for `auth.user`. XOAuth2 generator generates required `accessToken` itself if it is missing or expired. In this case if the authentication fails, a new token is requested and the authentication is retried once. If it still fails, an error is returned.\n\nInstall xoauth2 module to use XOauth2 token generators (not included by default)\n\n    npm install xoauth2 --save\n\n**XOAuth2 Example**\n\n> **NB!** The correct OAuth2 scope for Gmail is `https://mail.google.com/`\n\n```javascript\nvar nodemailer = require('nodemailer');\nvar generator = require('xoauth2').createXOAuth2Generator({\n    user: '{username}',\n    clientId: '{Client ID}',\n    clientSecret: '{Client Secret}',\n    refreshToken: '{refresh-token}',\n    accessToken: '{cached access token}' // optional\n});\n\n// listen for token updates\n// you probably want to store these to a db\ngenerator.on('token', function(token){\n    console.log('New token for %s: %s', token.user, token.accessToken);\n});\n\n// login\nvar transporter = nodemailer.createTransport(({\n    service: 'gmail',\n    auth: {\n        xoauth2: generator\n    }\n}));\n\n// send mail\ntransporter.sendMail({\n    from: 'sender@example.com',\n    to: 'receiver@example.com',\n    subject: 'hello world!',\n    text: 'Authenticated with OAuth2'\n}, function(error, response) {\n   if (error) {\n        console.log(error);\n   } else {\n        console.log('Message sent');\n   }\n});\n```\n\n## Using well-known services\n\nIf you do not want to specify the hostname, port and security settings for a well known service, you can use it by its name (case insensitive)\n\n```javascript\nsmtpTransport({\n    service: 'gmail',\n    auth: ..\n});\n```\n\nSee the list of all supported services [here](https://github.com/andris9/nodemailer-wellknown#supported-services).\n\n## Verify connection configuration\n\nYou can verify your configuration with `verify(callback)` call. If it returns an error, then something is not correct, otherwise the server is ready to accept messages.\n\n```javascript\n// verify connection configuration\ntransporter.verify(function(error, success) {\n   if (error) {\n        console.log(error);\n   } else {\n        console.log('Server is ready to take our messages');\n   }\n});\n```\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/nodemailer-smtp-transport.git"
  },
  "scripts": {
    "test": "grunt mochaTest"
  },
  "version": "2.7.2"
}

{
  "_args": [
    [
      {
        "raw": "js-string-escape@1.0.1",
        "scope": null,
        "escapedName": "js-string-escape",
        "name": "js-string-escape",
        "rawSpec": "1.0.1",
        "spec": "1.0.1",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/pg"
    ]
  ],
  "_from": "js-string-escape@1.0.1",
  "_id": "js-string-escape@1.0.1",
  "_inCache": true,
  "_location": "/js-string-escape",
  "_nodeVersion": "4.1.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/js-string-escape-1.0.1.tgz_1457658719936_0.2624991138000041"
  },
  "_npmUser": {
    "name": "joliss",
    "email": "joliss42@gmail.com"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "js-string-escape@1.0.1",
    "scope": null,
    "escapedName": "js-string-escape",
    "name": "js-string-escape",
    "rawSpec": "1.0.1",
    "spec": "1.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/pg"
  ],
  "_resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
  "_shasum": "e2625badbc0d67c7533e9edc1068c587ae4137ef",
  "_shrinkwrap": null,
  "_spec": "js-string-escape@1.0.1",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/pg",
  "author": {
    "name": "Jo Liss",
    "email": "joliss42@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/joliss/js-string-escape/issues"
  },
  "contributors": [
    {
      "name": "Mathias Bynens",
      "url": "http://mathiasbynens.be/"
    }
  ],
  "dependencies": {},
  "description": "Escape strings for use as JavaScript string literals",
  "devDependencies": {
    "punycode": "~> 1.2.1",
    "tap": "~> 0.4.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e2625badbc0d67c7533e9edc1068c587ae4137ef",
    "tarball": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.8"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "66d3aff579a45fae65c3d9f8740e44009cdbda26",
  "homepage": "https://github.com/joliss/js-string-escape#readme",
  "keywords": [
    "string",
    "escape",
    "backslash",
    "javascript",
    "ecmascript"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "joliss",
      "email": "joliss42@gmail.com"
    }
  ],
  "name": "js-string-escape",
  "optionalDependencies": {},
  "readme": "# js-string-escape\n\n[![Build Status](https://travis-ci.org/joliss/js-string-escape.png?branch=master)](https://travis-ci.org/joliss/js-string-escape)\n\nEscape any string to be a valid JavaScript string literal between double\nquotes or single quotes.\n\n## Installation\n\n```\nnpm install js-string-escape\n```\n\n## Example\n\nIf you need to generate JavaScript output, this library will help you safely\nput arbitrary data in JavaScript strings:\n\n```js\njsStringEscape = require('js-string-escape')\n\nconsole.log('\"' + jsStringEscape('Quotes (\\\", \\'), newlines (\\n), etc.') + '\"')\n// => \"Quotes (\\\", \\'), newlines (\\n), etc.\"\n```\n\nIn other words, given any string `s`, the following invariants hold:\n\n```js\neval('\"' + jsStringEscape(s) + '\"') === s\neval(\"'\" + jsStringEscape(s) + \"'\") === s\n```\n\nThese `eval` expressions are safe with untrusted strings `s`.\n\nNon-strings will be cast to strings.\n\n## Compliance\n\nThis library has been checked against [ECMAScript\n5.1](http://www.ecma-international.org/ecma-262/5.1/#sec-7.8.4) and tested\nagainst all Unicode code points.\n\nNote that the returned string is not necessarily valid JSON, since JSON\ndisallows control characters, and `\\'` is illegal in JSON.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/joliss/js-string-escape.git"
  },
  "scripts": {
    "test": "tap test"
  },
  "version": "1.0.1"
}

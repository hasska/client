{
  "_args": [
    [
      {
        "raw": "xmlcreate@https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
        "scope": null,
        "escapedName": "xmlcreate",
        "name": "xmlcreate",
        "rawSpec": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
        "spec": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
        "type": "remote"
      },
      "/Users/vt/Desktop/projects/newv1/node_modules/strong-error-handler/node_modules/js2xmlparser"
    ]
  ],
  "_from": "xmlcreate@>=0.1.1 <0.2.0",
  "_id": "xmlcreate@0.1.1",
  "_inCache": true,
  "_location": "/strong-error-handler/js2xmlparser/xmlcreate",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xmlcreate@https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
    "scope": null,
    "escapedName": "xmlcreate",
    "name": "xmlcreate",
    "rawSpec": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
    "spec": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/strong-error-handler/js2xmlparser"
  ],
  "_resolved": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
  "_shasum": "a8df3b10d9d2d5704a604b92c0afc2620d708f61",
  "_shrinkwrap": null,
  "_spec": "xmlcreate@https://registry.npmjs.org/xmlcreate/-/xmlcreate-0.1.1.tgz",
  "_where": "/Users/vt/Desktop/projects/newv1/node_modules/strong-error-handler/node_modules/js2xmlparser",
  "author": {
    "name": "Michael Kourlas",
    "email": "michael@kourlas.net"
  },
  "bugs": {
    "url": "https://github.com/michaelkourlas/node-xmlcreate/issues"
  },
  "dependencies": {},
  "description": "Simple XML builder for Node.js",
  "devDependencies": {
    "chai": "^3.5.0",
    "gulp": "^3.9.1",
    "gulp-filter": "^4.0.0",
    "gulp-mocha": "^3.0.1",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-tslint": "^6.0.2",
    "gulp-typedoc": "^2.0.0",
    "gulp-typescript": "^2.13.6",
    "merge2": "^1.0.2",
    "mocha": "^2.4.5",
    "tslint": "^3.14.0",
    "typedoc": "^0.4.4",
    "typings": "^1.3.2"
  },
  "files": [
    "lib",
    "CHANGES.md",
    "LICENSE.md",
    "NOTICE.md",
    "package.json",
    "README.md"
  ],
  "homepage": "https://github.com/michaelkourlas/node-xmlcreate#readme",
  "keywords": [
    "build",
    "builder",
    "create",
    "creator",
    "xml"
  ],
  "license": "Apache-2.0",
  "main": "./lib/main.js",
  "name": "xmlcreate",
  "optionalDependencies": {},
  "readme": "# xmlcreate #\r\n\r\n[![Build Status](https://travis-ci.org/michaelkourlas/node-xmlcreate.svg?branch=master)](https://travis-ci.org/michaelkourlas/node-xmlcreate)\r\n\r\n## Overview ##\r\n\r\nxmlcreate is a Node.js module that can be used to easily build XML using a\r\nsimple API.\r\n\r\n## Features ##\r\n\r\nxmlcreate uses a DOM-style API to build XML. Each construct in XML, including\r\nelements, attributes, and even the document itself, is represented as a node\r\nin a tree with a document node at the root.\r\n\r\nEach node has a set of properties corresponding to the node's properties in\r\nXML. For example, the element node has a name property, while the CDATA node\r\nhas a character data property.\r\n\r\nEach node also has a set of children corresponding to the node's value,\r\nchildren or attributes in XML, depending on the context. For example, the XML\r\ndeclaration and document type declaration are represented as child nodes of the\r\nroot document node, while sub-elements and element attributes are represented\r\nas child nodes of element nodes.\r\n\r\nxmlcreate performs some basic validation during tree building to ensure that\r\nthe resulting XML is well-formed. Nodes can only have certain types or\r\nquantities of nodes as children, while node properties are checked to ensure\r\nthat they do not contain characters disallowed in XML for that node or in\r\ngeneral.\r\n\r\nHowever, xmlcreate does not perform comprehensive validation. For example, it\r\ndoes not match the tree structure against a schema or confirm that entity\r\nreferences are valid. You should use a XML parser for this purpose instead.\r\n\r\nOnce the tree is built, the tree itself or any of its subtrees can be\r\nserialized to text. The formatting of the text is customizable.\r\n\r\n## Installation ##\r\n\r\nThe easiest way to install xmlcreate is using npm:\r\n\r\n```\r\nnpm install xmlcreate\r\n```\r\n\r\nYou can also build xmlcreate from source using npm, gulp, and typings: \r\n\r\n```\r\ngit clone https://github.com/michaelkourlas/node-xmlcreate.git\r\nnpm install\r\ntypings install\r\ngulp\r\n```\r\n\r\nYou'll need to install gulp and typings first if you don't have them:\r\n\r\n```\r\nnpm install -g gulp\r\nnpm install -g typings\r\n```\r\n\r\nYou can then copy the folder into your node_modules directory.\r\n\r\nThe `default` target will build the production variant of xmlcreate, run all\r\ntests, and build the documentation.\r\n\r\nYou can build the production variant without running tests using the target\r\n`prod`. You can also build the development version using the target `dev`. At\r\nthe moment, the only difference between the two is that the development version\r\nincludes source maps.\r\n\r\n## Usage ##\r\n\r\nThe documentation for the current version is available [here](http://www.kourlas.com/node-xmlcreate/docs/0.1.1/).\r\n\r\nYou can also build the documentation using gulp:\r\n\r\n```\r\ngulp docs\r\n```\r\n\r\n## Examples ##\r\n\r\nThe following example illustrates the basic usage of xmlcreate:\r\n\r\n```javascript\r\nvar xmlcreate = require(\"xmlcreate\");\r\n\r\nvar document = xmlcreate.document(\"html\");\r\ndocument\r\n    .decl({encoding: \"UTF-8\"})\r\n        .up()\r\n    .dtd(\"html\", \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\",\r\n         \"-//W3C//DTD XHTML 1.0 Strict//EN\")\r\n        .up()\r\n    .root()\r\n        .attribute(\"xmlns\", \"http://www.w3.org/1999/xhtml\")\r\n            .up()\r\n        .attribute(\"xml:lang\", \"en\")\r\n            .up()\r\n        .attribute(\"lang\", \"en\")\r\n            .up()\r\n        .element(\"head\")\r\n            .element(\"title\")\r\n                .text(\"My page title\")\r\n                    .up()\r\n                .up()\r\n            .up()\r\n        .element(\"body\")\r\n            .element(\"h1\")\r\n                .text(\"Welcome!\")\r\n                    .up()\r\n                .up()\r\n            .element(\"p\")\r\n                .text(\"This is some text on my website.\");\r\n\r\nconsole.log(document.toString({doubleQuotes: true}));\r\n```\r\n\r\nThis example produces the following XML:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\r\n<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\r\n    <head>\r\n        <title>My page title</title>\r\n    </head>\r\n    <body>\r\n        <h1>Welcome!</h1>\r\n        <p>This is some text on my website.</p>\r\n    </body>\r\n</html>\r\n```\r\n\r\nAdditional examples can be found in examples/example.js.\r\n\r\n## Tests ##\r\n\r\nxmlcreate includes a set of tests to verify core functionality. You can run\r\nthe tests using gulp:\r\n\r\n```\r\ngulp test\r\n```\r\n\r\nThe `test` target builds the production variant of xmlcreate before running\r\nthe tests. The `test-prod` target does the same thing, while the `test-dev`\r\ntarget builds the development variant first instead.\r\n\r\n## License ##\r\n\r\nxmlcreate is licensed under the [Apache License 2.0](http://www.apache.org/licenses/LICENSE-2.0). \r\nPlease see the LICENSE.md file for more information.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelkourlas/node-xmlcreate.git"
  },
  "typings": "./lib/main",
  "version": "0.1.1"
}

{
  "_args": [
    [
      {
        "raw": "long@~2 >=2.2.3",
        "scope": null,
        "escapedName": "long",
        "name": "long",
        "rawSpec": "~2 >=2.2.3",
        "spec": ">=2.0.0 <3.0.0 >=2.2.3",
        "type": "range"
      },
      "/Users/vt/Desktop/new/node_modules/bytebuffer"
    ]
  ],
  "_from": "long@>=2.0.0 <3.0.0 >=2.2.3",
  "_id": "long@2.4.0",
  "_inCache": true,
  "_location": "/long",
  "_nodeVersion": "0.12.7",
  "_npmUser": {
    "name": "dcode",
    "email": "dcode@dcode.io"
  },
  "_npmVersion": "2.11.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "long@~2 >=2.2.3",
    "scope": null,
    "escapedName": "long",
    "name": "long",
    "rawSpec": "~2 >=2.2.3",
    "spec": ">=2.0.0 <3.0.0 >=2.2.3",
    "type": "range"
  },
  "_requiredBy": [
    "/bytebuffer"
  ],
  "_resolved": "https://registry.npmjs.org/long/-/long-2.4.0.tgz",
  "_shasum": "9fa180bb1d9500cdc29c4156766a1995e1f4524f",
  "_shrinkwrap": null,
  "_spec": "long@~2 >=2.2.3",
  "_where": "/Users/vt/Desktop/new/node_modules/bytebuffer",
  "author": {
    "name": "Daniel Wirtz",
    "email": "dcode@dcode.io"
  },
  "bugs": {
    "url": "https://github.com/dcodeIO/Long.js/issues"
  },
  "dependencies": {},
  "description": "A Long class for representing a 64-bit two's-complement integer value.",
  "devDependencies": {
    "closurecompiler": "latest",
    "metascript": "~0",
    "testjs": "latest"
  },
  "directories": {},
  "dist": {
    "shasum": "9fa180bb1d9500cdc29c4156766a1995e1f4524f",
    "tarball": "https://registry.npmjs.org/long/-/long-2.4.0.tgz"
  },
  "engines": {
    "node": ">=0.6"
  },
  "gitHead": "38baa953414256fb08177581c79ecdedf076c2de",
  "homepage": "https://github.com/dcodeIO/Long.js#readme",
  "keywords": [
    "math"
  ],
  "license": "Apache-2.0",
  "main": "dist/Long.js",
  "maintainers": [
    {
      "name": "dcode",
      "email": "dcode@dcode.io"
    }
  ],
  "name": "long",
  "optionalDependencies": {},
  "readme": "![Long.js - A Long class for representing a 64 bit two's-complement integer ](https://raw.github.com/dcodeIO/Long.js/master/Long.png)\n=======\nA Long class for representing a 64 bit two's-complement integer value derived from the [Closure Library](https://github.com/google/closure-library)\nfor stand-alone use and extended with unsigned support.\n\n[![Build Status](https://travis-ci.org/dcodeIO/Long.js.svg)](https://travis-ci.org/dcodeIO/Long.js)\n[![Donate](https://raw.githubusercontent.com/dcodeIO/Long.js/master/donate.png)](https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=info%40code-emitter.com&item_name=Open%20Source%3A%20Long.js)\n\nBackground\n----------\nAs of [ECMA-262 5th Edition](http://ecma262-5.com/ELS5_HTML.htm#Section_8.5), \"all the positive and negative integers\nwhose magnitude is no greater than 2<sup>53</sup> are representable in the Number type\", which is \"representing the\ndoubleprecision 64-bit format IEEE 754 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic\".\nThe [maximum safe integer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\nin JavaScript is 2<sup>53</sup>-1.\n\nExample: 2<sup>64</sup>-1 is 18446744073709551615 but in JavaScript it evaluates to `18446744073709552000`.\n\nFurthermore, bitwise operators in JavaScript \"deal only with integers in the range −2<sup>31</sup> through\n2<sup>31</sup>−1, inclusive, or in the range 0 through 2<sup>32</sup>−1, inclusive. These operators accept any value of\nthe Number type but first convert each such value to one of 2<sup>32</sup> integer values.\"\n\nIn some use cases, however, it is required to be able to reliably work with and perform bitwise operations on the full\n64 bits. This is where Long.js comes into play.\n\nUsage\n-----\nThe class is compatible with CommonJS and AMD loaders and is exposed globally as `dcodeIO.Long` if neither is available.\n\n```javascript\nvar Long = require(\"long\");\n\nvar longVal = new Long(0xFFFFFFFF, 0x7FFFFFFF);\nconsole.log(longVal.toString());\n...\n```\n\nAPI\n---\n\n#### new Long(low, high=, unsigned=)\n\nConstructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\nSee the from* functions below for more convenient ways of constructing Longs.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| low             | *number*        | The low (signed) 32 bits of the long \n| high            | *number*        | The high (signed) 32 bits of the long \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n\n---\n\n#### Long.MAX_UNSIGNED_VALUE\n\nMaximum unsigned value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.MAX_VALUE\n\nMaximum signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.MIN_VALUE\n\nMinimum signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.NEG_ONE\n\nSigned negative one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.ONE\n\nSigned one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.UONE\n\nUnsigned one.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.UZERO\n\nUnsigned zero.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.ZERO\n\nSigned zero.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *!Long*         |\n\n#### Long.fromBits(lowBits, highBits, unsigned=)\n\nReturns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\nassumed to use 32 bits.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| lowBits         | *number*        | The low 32 bits \n| highBits        | *number*        | The high 32 bits \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromInt(value, unsigned=)\n\nReturns a Long representing the given 32 bit integer value.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| value           | *number*        | The 32 bit integer in question \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromNumber(value, unsigned=)\n\nReturns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| value           | *number*        | The number in question \n| unsigned        | *boolean*       | Whether unsigned or not, defaults to `false` for signed \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.fromString(str, unsigned=, radix=)\n\nReturns a Long representation of the given string, written using the specified radix.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| str             | *string*        | The textual representation of the Long \n| unsigned        | *boolean &#124; number* | Whether unsigned or not, defaults to `false` for signed \n| radix           | *number*        | The radix in which the text is written (2-36), defaults to 10 \n| **@returns**    | *!Long*         | The corresponding Long value \n\n#### Long.isLong(obj)\n\nTests if the specified object is a Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| obj             | ***             | Object \n| **@returns**    | *boolean*       | \n\n#### Long.fromValue(val)\n\nConverts the specified value to a Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| val             | *!Long &#124; number &#124; string &#124; !{low: number, high: number, unsigned: boolean}* | Value \n| **@returns**    | *!Long*         | \n\n---\n\n#### Long#high\n\nThe high 32 bits as a signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *number*        |\n\n#### Long#low\n\nThe low 32 bits as a signed value.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *number*        |\n\n#### Long#unsigned\n\nWhether unsigned or not.\n\n|                 |                 |\n|-----------------|-----------------|\n| **@type**       | *boolean*       |\n\n#### Long#add(addend)\n\nReturns the sum of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| addend          | *!Long &#124; number &#124; string* | Addend \n| **@returns**    | *!Long*         | Sum \n\n#### Long#and(other)\n\nReturns the bitwise AND of this Long and the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\n#### Long#compare(other)\n\nCompares this Long's value with the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *number*        | 0 if they are the same, 1 if the this is greater and -1 if the given one is greater \n\n#### Long#div(divisor)\n\nReturns this Long divided by the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| divisor         | *!Long &#124; number &#124; string* | Divisor \n| **@returns**    | *!Long*         | Quotient \n\n#### Long#equals(other)\n\nTests if this Long's value equals the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#getHighBits()\n\nGets the high 32 bits as a signed integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Signed high bits \n\n#### Long#getHighBitsUnsigned()\n\nGets the high 32 bits as an unsigned integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Unsigned high bits \n\n#### Long#getLowBits()\n\nGets the low 32 bits as a signed integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Signed low bits \n\n#### Long#getLowBitsUnsigned()\n\nGets the low 32 bits as an unsigned integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | Unsigned low bits \n\n#### Long#getNumBitsAbs()\n\nGets the number of bits needed to represent the absolute value of this Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#greaterThan(other)\n\nTests if this Long's value is greater than the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#greaterThanOrEqual(other)\n\nTests if this Long's value is greater than or equal the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#isEven()\n\nTests if this Long's value is even.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isNegative()\n\nTests if this Long's value is negative.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isOdd()\n\nTests if this Long's value is odd.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isPositive()\n\nTests if this Long's value is positive.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#isZero()\n\nTests if this Long's value equals zero.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *boolean*       | \n\n#### Long#lessThan(other)\n\nTests if this Long's value is less than the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#lessThanOrEqual(other)\n\nTests if this Long's value is less than or equal the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#modulo(divisor)\n\nReturns this Long modulo the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| divisor         | *!Long &#124; number &#124; string* | Divisor \n| **@returns**    | *!Long*         | Remainder \n\n#### Long#multiply(multiplier)\n\nReturns the product of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| multiplier      | *!Long &#124; number &#124; string* | Multiplier \n| **@returns**    | *!Long*         | Product \n\n#### Long#negate()\n\nNegates this Long's value.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Negated Long \n\n#### Long#not()\n\nReturns the bitwise NOT of this Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | \n\n#### Long#notEquals(other)\n\nTests if this Long's value differs from the specified's.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other value \n| **@returns**    | *boolean*       | \n\n#### Long#or(other)\n\nReturns the bitwise OR of this Long and the specified.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\n#### Long#shiftLeft(numBits)\n\nReturns this Long with bits shifted to the left by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#shiftRight(numBits)\n\nReturns this Long with bits arithmetically shifted to the right by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#shiftRightUnsigned(numBits)\n\nReturns this Long with bits logically shifted to the right by the given amount.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| numBits         | *number &#124; !Long* | Number of bits \n| **@returns**    | *!Long*         | Shifted Long \n\n#### Long#subtract(subtrahend)\n\nReturns the difference of this and the specified Long.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| subtrahend      | *!Long &#124; number &#124; string* | Subtrahend \n| **@returns**    | *!Long*         | Difference \n\n#### Long#toInt()\n\nConverts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#toNumber()\n\nConverts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *number*        | \n\n#### Long#toSigned()\n\nConverts this Long to signed.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Signed long \n\n#### Long#toString(radix=)\n\nConverts the Long to a string written in the specified radix.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| radix           | *number*        | Radix (2-36), defaults to 10 \n| **@returns**    | *string*        | \n| **@throws**     | *RangeError*    | If `radix` is out of range \n\n#### Long#toUnsigned()\n\nConverts this Long to unsigned.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| **@returns**    | *!Long*         | Unsigned long \n\n#### Long#xor(other)\n\nReturns the bitwise XOR of this Long and the given one.\n\n| Parameter       | Type            | Description\n|-----------------|-----------------|---------------\n| other           | *!Long &#124; number &#124; string* | Other Long \n| **@returns**    | *!Long*         | \n\nDownloads\n---------\n* [Distributions](https://github.com/dcodeIO/Long.js/tree/master/dist)\n* [ZIP-Archive](https://github.com/dcodeIO/Long.js/archive/master.zip)\n* [Tarball](https://github.com/dcodeIO/Long.js/tarball/master)\n\nLicense\n-------\nApache License, Version 2.0 - http://www.apache.org/licenses/LICENSE-2.0.html\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dcodeIO/Long.js.git"
  },
  "scripts": {
    "build": "node scripts/build.js",
    "compile": "ccjs dist/Long.js --compilation_level=ADVANCED_OPTIMIZATIONS --create_source_map=dist/Long.min.map > dist/Long.min.js",
    "compress": "gzip -c -9 dist/Long.min.js > dist/Long.min.js.gz",
    "make": "npm run-script build && npm run-script compile && npm run-script compress && npm test",
    "test": "node node_modules/testjs/bin/testjs tests/suite.js"
  },
  "version": "2.4.0"
}

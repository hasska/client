function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { GoogleFont } from 'react-typography';

var Typeface =
/*#__PURE__*/
function (_Component) {
  _inherits(Typeface, _Component);

  function Typeface() {
    _classCallCheck(this, Typeface);

    return _possibleConstructorReturn(this, (Typeface.__proto__ || Object.getPrototypeOf(Typeface)).apply(this, arguments));
  }

  _createClass(Typeface, [{
    key: "getChildContext",
    value: function getChildContext() {
      return {
        typeface: {
          fontFamily: this.props.googleFont || this.props.font || '',
          fontWeight: this.props.weight,
          fontStyle: this.props.italic ? 'italic' : 'normal'
        }
      };
    }
  }, {
    key: "render",
    value: function render() {
      var _props = this.props,
          children = _props.children,
          googleFont = _props.googleFont,
          _props$weight = _props.weight,
          weight = _props$weight === void 0 ? 400 : _props$weight,
          _props$italic = _props.italic,
          italic = _props$italic === void 0 ? false : _props$italic,
          styles = _props.styles;

      if (typeof googleFont !== 'undefined' && googleFont.length > 0) {
        var styleSuffix = italic ? 'i' : '';
        var config = {
          title: "".concat(googleFont),
          options: {
            googleFonts: [{
              name: googleFont,
              styles: styles || ["".concat(weight).concat(styleSuffix)]
            }]
          }
        };
        return React.createElement("div", null, React.createElement(GoogleFont, {
          typography: config
        }), children);
      } else {
        return React.createElement("div", null, children);
      }
    }
  }]);

  return Typeface;
}(Component);

Typeface.propTypes = {
  children: PropTypes.node,
  font: PropTypes.string,
  googleFont: PropTypes.string,
  italic: PropTypes.bool,
  styles: PropTypes.array,
  weight: PropTypes.number
};
Typeface.childContextTypes = {
  typeface: PropTypes.object
};
export default Typeface;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Manager = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _TransitionGroup = _interopRequireDefault(require("react-transition-group/TransitionGroup"));

var _filter = _interopRequireDefault(require("lodash/filter"));

var _size = _interopRequireDefault(require("lodash/size"));

var _findIndex = _interopRequireDefault(require("lodash/findIndex"));

var _get = _interopRequireDefault(require("lodash/get"));

var _reactRedux = require("react-redux");

var _actions = require("../actions");

var _typeface = _interopRequireDefault(require("./typeface"));

var _slides = require("../utils/slides");

var _reactEmotion = _interopRequireDefault(require("react-emotion"));

var _toStyle = require("to-style");

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _presenter = _interopRequireDefault(require("./presenter"));

var _export = _interopRequireDefault(require("./export"));

var _overview = _interopRequireDefault(require("./overview"));

var _magic = _interopRequireDefault(require("./magic"));

var _autoplayControls = _interopRequireDefault(require("./autoplay-controls"));

var _fullscreen = _interopRequireDefault(require("./fullscreen"));

var _progress = _interopRequireDefault(require("./progress"));

var _controls = _interopRequireDefault(require("./controls"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var convertStyle = function convertStyle(styles) {
  return Object.keys(styles).map(function (key) {
    return "".concat(key, " { ").concat((0, _toStyle.string)(styles[key]), "} ");
  }).join('');
};

convertStyle = (0, _memoize.default)(convertStyle);
var StyledDeck =
/*#__PURE__*/
(0, _reactEmotion.default)("div", {
  target: "evdfm040"
})(function (props) {
  return {
    backgroundColor: props.route.params.indexOf('presenter') !== -1 || props.route.params.indexOf('overview') !== -1 ? 'black' : '',
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    height: '100%'
  };
});
var StyledTransition =
/*#__PURE__*/
(0, _reactEmotion.default)(_TransitionGroup.default, {
  target: "evdfm041"
})({
  height: '100%',
  width: '100%',
  perspective: 1000,
  transformStyle: 'flat'
});

var Manager =
/*#__PURE__*/
function (_Component) {
  _inherits(Manager, _Component);

  function Manager(props) {
    var _this;

    _classCallCheck(this, Manager);

    _this = _possibleConstructorReturn(this, (Manager.__proto__ || Object.getPrototypeOf(Manager)).apply(this, arguments));
    _this._getProgressStyles = _this._getProgressStyles.bind(_assertThisInitialized(_this));
    _this._getControlStyles = _this._getControlStyles.bind(_assertThisInitialized(_this));
    _this._handleKeyPress = _this._handleKeyPress.bind(_assertThisInitialized(_this));
    _this._handleScreenChange = _this._handleScreenChange.bind(_assertThisInitialized(_this));
    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));
    _this._goToSlide = _this._goToSlide.bind(_assertThisInitialized(_this));
    _this._startAutoplay = _this._startAutoplay.bind(_assertThisInitialized(_this));
    _this._stopAutoplay = _this._stopAutoplay.bind(_assertThisInitialized(_this));
    _this.state = {
      lastSlideIndex: null,
      slideReference: [],
      fullscreen: window.innerHeight === screen.height,
      mobile: window.innerWidth < props.contentWidth,
      autoplaying: props.autoplay
    };
    _this.viewedIndexes = new Set();
    _this.slideCache = null;
    return _this;
  }

  _createClass(Manager, [{
    key: "getChildContext",
    value: function getChildContext() {
      var _this2 = this;

      return {
        contentWidth: this.props.contentWidth,
        contentHeight: this.props.contentHeight,
        goToSlide: function goToSlide(slide) {
          return _this2._goToSlide({
            slide: slide
          });
        }
      };
    }
  }, {
    key: "componentWillMount",
    value: function componentWillMount() {
      this.setState({
        slideReference: this._buildSlideReference(this.props)
      });
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var slideIndex = this._getSlideIndex();

      this.setState({
        lastSlideIndex: slideIndex
      });

      this._attachEvents();

      if (this.props.autoplay) {
        this._startAutoplay();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      this.setState({
        slideReference: this._buildSlideReference(nextProps)
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.props.globalStyles && !this.context.store.getState().style.globalStyleSet) {
        this.props.dispatch((0, _actions.setGlobalStyle)());
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._detachEvents();
    }
  }, {
    key: "_attachEvents",
    value: function _attachEvents() {
      window.addEventListener('storage', this._goToSlide);
      window.addEventListener('keydown', this._handleKeyPress);
      window.addEventListener('resize', this._handleScreenChange);
    }
  }, {
    key: "_detachEvents",
    value: function _detachEvents() {
      window.removeEventListener('storage', this._goToSlide);
      window.removeEventListener('keydown', this._handleKeyPress);
      window.removeEventListener('resize', this._handleScreenChange);
    }
  }, {
    key: "_startAutoplay",
    value: function _startAutoplay() {
      var _this3 = this;

      clearInterval(this.autoplayInterval);
      this.setState({
        autoplaying: true
      });
      this.autoplayInterval = setInterval(function () {
        _this3._nextSlide();
      }, this.props.autoplayDuration);
    }
  }, {
    key: "_stopAutoplay",
    value: function _stopAutoplay() {
      this.setState({
        autoplaying: false
      });
      clearInterval(this.autoplayInterval);
    }
  }, {
    key: "_handleEvent",
    value: function _handleEvent(e) {
      // eslint-disable-line complexity
      var event = window.event ? window.event : e;

      if (event.keyCode === 37 || event.keyCode === 33 || event.keyCode === 32 && event.shiftKey) {
        this._prevSlide();

        this._stopAutoplay();
      } else if (event.keyCode === 39 || event.keyCode === 34 || event.keyCode === 32 && !event.shiftKey) {
        this._nextSlide();

        this._stopAutoplay();
      } else if (event.altKey && event.keyCode === 79 && !event.ctrlKey && !event.metaKey) {
        // o
        this._toggleOverviewMode();
      } else if (event.altKey && event.keyCode === 80 && !event.ctrlKey && !event.metaKey) {
        // p
        this._togglePresenterMode();
      } else if (event.altKey && event.keyCode === 84 && !event.ctrlKey && !event.metaKey) {
        // t
        this._toggleTimerMode();
      } else if (event.altKey && event.keyCode === 65 && !event.ctrlKey && !event.metaKey) {
        // a
        if (this.props.autoplay) {
          this._startAutoplay();
        }
      }
    }
  }, {
    key: "_handleKeyPress",
    value: function _handleKeyPress(e) {
      var event = window.event ? window.event : e;

      if (event.target instanceof HTMLInputElement || event.target.type === 'textarea') {
        return;
      }

      this._handleEvent(e);
    }
  }, {
    key: "_handleScreenChange",
    value: function _handleScreenChange() {
      this.setState({
        fullscreen: window.innerHeight === screen.height,
        mobile: window.innerWidth < this.props.contentWidth
      });
    }
  }, {
    key: "_toggleOverviewMode",
    value: function _toggleOverviewMode() {
      var suffix = this.props.route.params.indexOf('overview') !== -1 ? '' : '?overview';
      this.context.history.replace("/".concat(this.props.route.slide).concat(suffix));
    }
  }, {
    key: "_togglePresenterMode",
    value: function _togglePresenterMode() {
      var suffix = this.props.route.params.indexOf('presenter') !== -1 ? '' : '?presenter';
      this.context.history.replace("/".concat(this.props.route.slide).concat(suffix));
    }
  }, {
    key: "_toggleTimerMode",
    value: function _toggleTimerMode() {
      var isTimer = this.props.route.params.indexOf('presenter') !== -1 && this.props.route.params.indexOf('timer') !== -1;
      var suffix = isTimer ? '?presenter' : '?presenter&timer';
      this.context.history.replace("/".concat(this.props.route.slide).concat(suffix));
    }
  }, {
    key: "_getSuffix",
    value: function _getSuffix() {
      if (this.props.route.params.indexOf('presenter') !== -1) {
        var isTimerMode = this.props.route.params.indexOf('timer') !== -1;
        return isTimerMode ? '?presenter&timer' : '?presenter';
      } else if (this.props.route.params.indexOf('overview') !== -1) {
        return '?overview';
      } else {
        return '';
      }
    }
  }, {
    key: "_goToSlide",
    value: function _goToSlide(e) {
      var data = null;
      var canNavigate = true;
      var offset = 0;

      if (e.key === 'spectacle-slide') {
        data = JSON.parse(e.newValue);
        canNavigate = this._checkFragments(this.props.route.slide, data.forward);
      } else if (e.slide) {
        data = e;
        offset = 1;
        var index = isNaN(parseInt(data.slide, 10)) ? (0, _get.default)(this.state.slideReference.find(function (slide) {
          return slide.id === data.slide;
        }), 'rootIndex', 0) : data.slide - 1;
        localStorage.setItem('spectacle-slide', JSON.stringify({
          slide: this._getHash(index),
          forward: false,
          time: Date.now()
        }));
      } else {
        return;
      }

      var slideIndex = this._getSlideIndex();

      this.setState({
        lastSlideIndex: slideIndex || 0
      });

      if (canNavigate) {
        var slide = data.slide;

        if (!isNaN(parseInt(slide, 10))) {
          slide = parseInt(slide, 10) - offset;
        }

        this.context.history.replace("/".concat(slide).concat(this._getSuffix()));
      }
    }
  }, {
    key: "_prevSlide",
    value: function _prevSlide() {
      var slideIndex = this._getSlideIndex();

      this.setState({
        lastSlideIndex: slideIndex
      });
      this.viewedIndexes.delete(slideIndex);

      if (this._checkFragments(this.props.route.slide, false) || this.props.route.params.indexOf('overview') !== -1) {
        if (slideIndex > 0) {
          this.context.history.replace("/".concat(this._getHash(slideIndex - 1)).concat(this._getSuffix()));
          localStorage.setItem('spectacle-slide', JSON.stringify({
            slide: this._getHash(slideIndex - 1),
            forward: false,
            time: Date.now()
          }));
        }
      } else if (slideIndex > 0) {
        localStorage.setItem('spectacle-slide', JSON.stringify({
          slide: this._getHash(slideIndex),
          forward: false,
          time: Date.now()
        }));
      }
    }
  }, {
    key: "_nextUnviewedIndex",
    value: function _nextUnviewedIndex() {
      var sortedIndexes = Array.from(this.viewedIndexes).sort(function (a, b) {
        return a - b;
      });
      return Math.min((sortedIndexes[sortedIndexes.length - 1] || 0) + 1, this.state.slideReference.length - 1);
    }
  }, {
    key: "_getOffset",
    value: function _getOffset(slideIndex) {
      var _this4 = this;

      var goTo = this.state.slideReference[slideIndex].goTo;

      var nextUnviewedIndex = this._nextUnviewedIndex();

      if (goTo && !isNaN(parseInt(goTo))) {
        var goToIndex = function goToIndex() {
          if (_this4.viewedIndexes.has(goTo - 1)) {
            return _this4._nextUnviewedIndex();
          }

          return goTo - 1;
        };

        return goToIndex() - slideIndex;
      }

      return nextUnviewedIndex - slideIndex;
    }
  }, {
    key: "_nextSlide",
    value: function _nextSlide() {
      var slideIndex = this._getSlideIndex();

      this.setState({
        lastSlideIndex: slideIndex
      });
      var slideReference = this.state.slideReference;

      if (this._checkFragments(this.props.route.slide, true) || this.props.route.params.indexOf('overview') !== -1) {
        if (slideIndex === slideReference.length - 1) {
          // On last slide, loop to first slide
          if (this.props.autoplay && this.state.autoplaying) {
            var slideData = '{ "slide": "0", "forward": "false" }';

            this._goToSlide({
              key: 'spectacle-slide',
              newValue: slideData
            });
          }
        } else if (slideIndex < slideReference.length - 1) {
          this.viewedIndexes.add(slideIndex);

          var offset = this._getOffset(slideIndex);

          this.context.history.replace("/".concat(this._getHash(slideIndex + offset) + this._getSuffix()));
          localStorage.setItem('spectacle-slide', JSON.stringify({
            slide: this._getHash(slideIndex + offset),
            forward: true,
            time: Date.now()
          }));
        }
      } else if (slideIndex < slideReference.length) {
        localStorage.setItem('spectacle-slide', JSON.stringify({
          slide: this._getHash(slideIndex),
          forward: true,
          time: Date.now()
        }));
      }
    }
  }, {
    key: "_getHash",
    value: function _getHash(slideIndex) {
      return this.state.slideReference[slideIndex].id;
    }
  }, {
    key: "_checkFragments",
    value: function _checkFragments(slide, forward) {
      var state = this.context.store.getState();
      var fragments = state.fragment.fragments; // Not proud of this at all. 0.14 Parent based contexts will fix this.

      if (this.props.route.params.indexOf('presenter') !== -1) {
        var main = document.querySelector('.spectacle-presenter-main');

        if (main) {
          var frags = main.querySelectorAll('.fragment');

          if (!frags.length) {
            return true;
          }
        } else {
          return true;
        }
      }

      if (slide in fragments) {
        var count = (0, _size.default)(fragments[slide]);
        var visible = (0, _filter.default)(fragments[slide], function (s) {
          return s.visible === true;
        });
        var hidden = (0, _filter.default)(fragments[slide], function (s) {
          return s.visible !== true;
        });

        if (forward === true && visible.length !== count) {
          this.props.dispatch((0, _actions.updateFragment)({
            fragment: hidden[0],
            visible: true
          }));
          return false;
        }

        if (forward === false && hidden.length !== count) {
          this.props.dispatch((0, _actions.updateFragment)({
            fragment: visible[(0, _size.default)(visible) - 1],
            visible: false
          }));
          return false;
        }

        return true;
      } else {
        return true;
      }
    }
  }, {
    key: "_getTouchEvents",
    value: function _getTouchEvents() {
      var self = this;
      return {
        onTouchStart: function onTouchStart(e) {
          self.touchObject = {
            startX: e.touches[0].pageX,
            startY: e.touches[0].pageY
          };
        },
        onTouchMove: function onTouchMove(e) {
          var direction = self._swipeDirection({
            x1: self.touchObject.startX,
            x2: e.touches[0].pageX,
            y1: self.touchObject.startY,
            y2: e.touches[0].pageY
          });

          self.touchObject = {
            startX: self.touchObject.startX,
            startY: self.touchObject.startY,
            endX: e.clientX,
            endY: e.clientY,
            length: Math.round(Math.sqrt(Math.pow(e.touches[0].pageX - self.touchObject.startX, 2))),
            direction: direction
          };

          if (direction !== 0) {
            e.preventDefault();
          }
        },
        onTouchEnd: function onTouchEnd(e) {
          self._handleSwipe(e);
        },
        onTouchCancel: function onTouchCancel(e) {
          self._handleSwipe(e);
        }
      };
    }
  }, {
    key: "handleClick",
    value: function handleClick(e) {
      if (this.clickSafe === true) {
        e.preventDefault();
        e.stopPropagation();
        e.nativeEvent.stopPropagation();
      }
    }
  }, {
    key: "_handleSwipe",
    value: function _handleSwipe() {
      if (typeof this.touchObject.length !== 'undefined' && this.touchObject.length > 44) {
        this.clickSafe = true;
      } else {
        this.clickSafe = false;
      }

      if (Math.abs(this.touchObject.length) > 20) {
        if (this.touchObject.direction === 1) {
          this._nextSlide();
        } else if (this.touchObject.direction === -1) {
          this._prevSlide();
        }
      }

      this.touchObject = {};
    }
  }, {
    key: "_swipeDirection",
    value: function _swipeDirection(touch) {
      var xDist = touch.x1 - touch.x2;
      var yDist = touch.y1 - touch.y2;
      var r = Math.atan2(yDist, xDist);
      var swipeAngle = Math.round(r * 180 / Math.PI);

      if (swipeAngle < 0) {
        swipeAngle = 360 - Math.abs(swipeAngle);
      }

      if (swipeAngle <= 45 && swipeAngle >= 0) {
        return 1;
      }

      if (swipeAngle <= 360 && swipeAngle >= 315) {
        return 1;
      }

      if (swipeAngle >= 135 && swipeAngle <= 225) {
        return -1;
      }

      return 0;
    }
  }, {
    key: "_buildSlideReference",
    value: function _buildSlideReference(props) {
      var slideReference = [];

      _react.Children.toArray(props.children).forEach(function (child, rootIndex) {
        if (child.type === _magic.default) {
          _react.Children.toArray(child.props.children).forEach(function (setSlide, magicIndex) {
            var reference = {
              id: setSlide.props.id || slideReference.length,
              magicIndex: magicIndex,
              rootIndex: rootIndex
            };
            slideReference.push(reference);
          });
        } else if (!child.props.hasSlideChildren) {
          var reference = {
            id: child.props.id || slideReference.length,
            rootIndex: rootIndex
          };

          if (child.props.goTo) {
            reference.goTo = child.props.goTo;
          }

          slideReference.push(reference);
        } else {
          child.props.children.forEach(function (setSlide, setIndex) {
            var reference = {
              id: setSlide.props.id || slideReference.length,
              setIndex: setIndex,
              rootIndex: rootIndex
            };

            if (child.props.goTo) {
              reference.goTo = child.props.goTo;
            }

            slideReference.push(reference);
          });
        }
      });

      return slideReference;
    }
  }, {
    key: "_getSlideIndex",
    value: function _getSlideIndex() {
      var _this5 = this;

      var index = parseInt(this.props.route.slide);

      if (!Number.isFinite(index)) {
        var foundIndex = (0, _findIndex.default)(this.state.slideReference, function (reference) {
          return _this5.props.route.slide === reference.id;
        });
        index = foundIndex >= 0 ? foundIndex : 0;
      }

      return index;
    }
  }, {
    key: "_getSlideByIndex",
    value: function _getSlideByIndex(index) {
      return (0, _slides.getSlideByIndex)(this.props.children, this.state.slideReference, index);
    }
  }, {
    key: "_renderSlide",
    value: function _renderSlide() {
      var slideIndex = this._getSlideIndex();

      var slide = this._getSlideByIndex(slideIndex);

      return (0, _react.cloneElement)(slide, {
        dispatch: this.props.dispatch,
        fragments: this.props.fragment,
        export: this.props.route.params.indexOf('export') !== -1,
        print: this.props.route.params.indexOf('print') !== -1,
        hash: this.props.route.slide,
        slideIndex: slideIndex,
        lastSlideIndex: this.state.lastSlideIndex,
        transition: (slide.props.transition || {}).length ? slide.props.transition : this.props.transition,
        transitionDuration: (slide.props.transition || {}).transitionDuration ? slide.props.transitionDuration : this.props.transitionDuration,
        slideReference: this.state.slideReference
      });
    }
  }, {
    key: "_getProgressStyles",
    value: function _getProgressStyles() {
      var slideIndex = this._getSlideIndex();

      var slide = this._getSlideByIndex(slideIndex);

      if (slide.props.progressColor) {
        return slide.props.progressColor;
      }

      return null;
    }
  }, {
    key: "_getControlStyles",
    value: function _getControlStyles() {
      var slideIndex = this._getSlideIndex();

      var slide = this._getSlideByIndex(slideIndex);

      if (slide.props.controlColor) {
        return slide.props.controlColor;
      }

      return null;
    }
  }, {
    key: "render",
    value: function render() {
      if (this.props.route.slide === null) {
        return false;
      }

      var globals = this.props.route.params.indexOf('export') !== -1 ? {
        body: Object.assign(this.context.styles.global.body, {
          minWidth: this.props.contentWidth + 150,
          minHeight: this.props.contentHeight + 150,
          overflow: 'auto'
        }),
        '.spectacle-presenter-next .fragment': {
          display: 'none !important'
        }
      } : {
        '.spectacle-presenter-next .fragment': {
          display: 'none !important'
        }
      };
      var componentToRender;

      var children = _react.Children.toArray(this.props.children);

      if (this.props.route.params.indexOf('presenter') !== -1) {
        var isTimerMode = this.props.route.params.indexOf('timer') !== -1;
        componentToRender = _react.default.createElement(_presenter.default, {
          dispatch: this.props.dispatch,
          slides: children,
          slideReference: this.state.slideReference,
          slideIndex: this._getSlideIndex(),
          hash: this.props.route.slide,
          route: this.props.route,
          lastSlideIndex: this.state.lastSlideIndex,
          timer: isTimerMode
        });
      } else if (this.props.route.params.indexOf('export') !== -1) {
        componentToRender = _react.default.createElement(_export.default, {
          slides: children,
          slideReference: this.state.slideReference,
          route: this.props.route
        });
      } else if (this.props.route.params.indexOf('overview') !== -1) {
        componentToRender = _react.default.createElement(_overview.default, {
          slides: children,
          slideReference: this.state.slideReference,
          slideIndex: this._getSlideIndex(),
          route: this.props.route
        });
      } else {
        componentToRender = _react.default.createElement(StyledTransition, {
          component: "div"
        }, this._renderSlide());
      }

      var showControls = !this.state.fullscreen && !this.state.mobile && this.props.route.params.indexOf('export') === -1 && this.props.route.params.indexOf('overview') === -1 && this.props.route.params.indexOf('presenter') === -1;
      var _context$styles$googl = this.context.styles.googleFonts,
          googleFonts = _context$styles$googl === void 0 ? {} : _context$styles$googl;
      var googleFontsElements = Object.keys(googleFonts).map(function (key, index) {
        return _react.default.createElement(_typeface.default, {
          googleFont: googleFonts[key].name,
          styles: googleFonts[key].styles,
          key: "gFont-".concat(index)
        });
      });
      return _react.default.createElement(StyledDeck, _extends({
        className: "spectacle-deck",
        route: this.props.route,
        onClick: this.handleClick
      }, this._getTouchEvents()), this.props.controls && showControls && _react.default.createElement(_controls.default, {
        currentSlideIndex: this._getSlideIndex(),
        totalSlides: this.state.slideReference.length,
        onPrev: this._prevSlide.bind(this),
        onNext: this._nextSlide.bind(this),
        controlColor: this._getControlStyles()
      }), googleFontsElements, componentToRender, this.props.route.params.indexOf('export') === -1 && this.props.route.params.indexOf('overview') === -1 ? _react.default.createElement(_progress.default, {
        items: this.state.slideReference,
        currentSlideIndex: this._getSlideIndex(),
        type: this.props.progress,
        progressColor: this._getProgressStyles()
      }) : '', this.props.route.params.indexOf('export') === -1 ? _react.default.createElement(_fullscreen.default, null) : '', this.props.autoplay ? _react.default.createElement(_autoplayControls.default, {
        autoplaying: this.state.autoplaying,
        onPlay: this._startAutoplay,
        onPause: this._stopAutoplay
      }) : '', this.props.globalStyles && _react.default.createElement("style", {
        dangerouslySetInnerHTML: {
          __html: convertStyle(Object.assign({}, this.context.styles.global, globals))
        }
      }));
    }
  }]);

  return Manager;
}(_react.Component);

exports.Manager = Manager;
Object.defineProperty(Manager, "displayName", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: 'Manager'
});
Object.defineProperty(Manager, "defaultProps", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    autoplay: false,
    autoplayDuration: 7000,
    contentWidth: 1000,
    contentHeight: 700,
    transition: [],
    transitionDuration: 500,
    progress: 'pacman',
    controls: true,
    globalStyles: true
  }
});
Object.defineProperty(Manager, "propTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    autoplay: _propTypes.default.bool,
    autoplayDuration: _propTypes.default.number,
    children: _propTypes.default.node,
    contentHeight: _propTypes.default.number,
    contentWidth: _propTypes.default.number,
    controls: _propTypes.default.bool,
    dispatch: _propTypes.default.func,
    fragment: _propTypes.default.object,
    globalStyles: _propTypes.default.bool,
    progress: _propTypes.default.oneOf(['pacman', 'bar', 'number', 'none']),
    route: _propTypes.default.object,
    transition: _propTypes.default.array,
    transitionDuration: _propTypes.default.number
  }
});
Object.defineProperty(Manager, "contextTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    styles: _propTypes.default.object,
    print: _propTypes.default.object,
    history: _propTypes.default.object,
    presenter: _propTypes.default.bool,
    export: _propTypes.default.bool,
    overview: _propTypes.default.bool,
    store: _propTypes.default.object,
    slide: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])
  }
});
Object.defineProperty(Manager, "childContextTypes", {
  configurable: true,
  enumerable: true,
  writable: true,
  value: {
    contentWidth: _propTypes.default.number,
    contentHeight: _propTypes.default.number,
    goToSlide: _propTypes.default.func
  }
});

var _default = (0, _reactRedux.connect)(function (state) {
  return state;
}, null, null, {
  withRef: true
})(Manager);

exports.default = _default;
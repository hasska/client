{
  "_args": [
    [
      {
        "raw": "what-input@^4.1.3",
        "scope": null,
        "escapedName": "what-input",
        "name": "what-input",
        "rawSpec": "^4.1.3",
        "spec": ">=4.1.3 <5.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/foundation-sites"
    ]
  ],
  "_from": "what-input@>=4.1.3 <5.0.0",
  "_id": "what-input@4.3.1",
  "_inCache": true,
  "_location": "/what-input",
  "_nodeVersion": "5.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/what-input-4.3.1.tgz_1499873565546_0.7612886456772685"
  },
  "_npmUser": {
    "name": "ten1seven",
    "email": "jeremy@ten1seven.com"
  },
  "_npmVersion": "5.0.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "what-input@^4.1.3",
    "scope": null,
    "escapedName": "what-input",
    "name": "what-input",
    "rawSpec": "^4.1.3",
    "spec": ">=4.1.3 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/foundation-sites"
  ],
  "_resolved": "https://registry.npmjs.org/what-input/-/what-input-4.3.1.tgz",
  "_shasum": "b8ea7554ba1d9171887c4c6addf28185fec3d31d",
  "_shrinkwrap": null,
  "_spec": "what-input@^4.1.3",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/foundation-sites",
  "author": {
    "name": "Jeremy Fields",
    "email": "jeremy.fields@viget.com"
  },
  "bugs": {
    "url": "https://github.com/ten1seven/what-input/issues"
  },
  "dependencies": {},
  "description": "A global utility for tracking the current input method (mouse, keyboard or touch).",
  "devDependencies": {
    "babel-core": "^6.23.1",
    "babel-loader": "^6.3.2",
    "babel-preset-es2015": "^6.22.0",
    "browser-sync": "2.11.1",
    "del": "2.2.0",
    "gulp": "3.9.1",
    "gulp-concat": "2.6.0",
    "gulp-header": "1.7.1",
    "gulp-notify": "2.2.0",
    "gulp-plumber": "1.1.0",
    "gulp-rename": "1.2.2",
    "gulp-standard": "^8.0.4",
    "gulp-uglify": "^2.0.0",
    "run-sequence": "1.1.5",
    "webpack-stream": "3.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-7KD71RWNRWI9M08shZ8+n/2UjO5amwsG9PMSXWz0iIlH8H2DVbHE8Z2tW1RqQa0kIwdeqdUIffFz7crDfkcbAw==",
    "shasum": "b8ea7554ba1d9171887c4c6addf28185fec3d31d",
    "tarball": "https://registry.npmjs.org/what-input/-/what-input-4.3.1.tgz"
  },
  "gitHead": "7601f15de4a7cb0f58701f35e102009c237f1e4d",
  "homepage": "https://github.com/ten1seven/what-input",
  "keywords": [
    "accessibility",
    "a11y",
    "input",
    "javascript"
  ],
  "license": "MIT",
  "main": "dist/what-input.js",
  "maintainers": [
    {
      "name": "ten1seven",
      "email": "jeremy@ten1seven.com"
    }
  ],
  "name": "what-input",
  "optionalDependencies": {},
  "readme": "# What Input?\n\n__A global utility for tracking the current input method (mouse, keyboard or touch).__\n\n## What Input is now v4.3.0\n\nWhat Input adds data attributes to the `<html>` tag based on the type of input being used. It also exposes a simple API that can be used for scripting interactions.\n\n### July 12, 2017\n\n* Updated: added passive to `touchstart` event.\n\n### July 3, 2017\n\n* Updated: custom events can now be registered and unregistered.\n\n### June 13, 2017\n\n* Updated: Typing _in_ form inputs does not change input type, but tabbing between inputs _does_ initiate a switch from `mouse` to `keyboard`.\n\n### June 12, 2017\n\n* Added: passive event listener for `wheel` event.\n* Added: ability to fire custom functions when 'intent' or 'input' changes.\n\n### Changes from v3\n\n* `mousemove` and `pointermove` events no longer affect the `data-whatinput` attribute.\n* A new `data-whatintent` attribute now works like v3. This change is intended to separate direct interaction from potential.\n* Key logging and the corresponding `whatInput.keys()` API option have been removed.\n* Event binding and attributes are now added to the `<html>` tag to eliminate the need to test for `DOMContentLoaded`.\n* The `whatInput.set()` API option has been removed.\n* A new set of `whatinput-types-[type]` classes are now added as inputs are detected. New classes are added but existing ones remain, creating the same output as what the `whatInput.types()` returns.\n\n## How it works\n\nWhat Input uses event bubbling on the `<html>` tag to watch for mouse, keyboard and touch events (via `mousedown`, `keydown` and `touchstart`). It then sets or updates a `data-whatinput` attribute.\n\nWhere present, Pointer Events are supported, but note that `pen` inputs are remapped to `touch`.\n\nWhat Input also exposes a tiny API that allows the developer to ask for or set the current input.\n\n_What Input does not make assumptions about the input environment before the page is directly interacted with._ However, the `mousemove` and `pointermove` events are used to set a `data-whatintent=\"mouse\"` attribute to indicate that a mouse is being used _indirectly_.\n\n### Interacting with Forms\n\nSince interacting with a form requires use of the keyboard, What Input _does not switch the input type while form `<input>`s and `<textarea>`s are being interacted with_, preserving the last detected input type.\n\n## Installing\n\nDownload the file directly...\n\nor install via Bower...\n\n```shell\nbower install what-input\n```\n\nor install via NPM...\n\n```shell\nnpm install what-input\n```\n\n## Usage\n\nInclude the script directly in your project.\n\n```html\n<script src=\"dist/what-input.min.js\"></script>\n```\n\nOr require with a script loader.\n\n```javascript\nrequire('what-input');\n\n// or\n\nvar whatInput = require('what-input');\n\n// or\n\nrequirejs.config({\n  paths: {\n    whatInput: 'path/to/what-input'\n  }\n});\n\nrequire(['whatInput'], function() {});\n```\n\nWhat Input will start doing its thing while you do yours.\n\n### Example Styling\n\n```css\n/**\n * set a custom default :focus style\n */\n\n/* default styling before what input executes */\n:focus {\n\n}\n\n/* initial styling after what input has executed but before any interaction */\n[data-whatinput=\"initial\"] :focus {\n  outline: 2px dotted black;\n}\n\n/* mouse */\n[data-whatinput=\"mouse\"] :focus {\n  outline-color: red;\n}\n\n/* keyboard */\n[data-whatinput=\"keyboard\"] :focus {\n  outline-color: green;\n}\n\n/* touch */\n[data-whatinput=\"touch\"] :focus {\n  outline-color: blue;\n}\n```\n**Note:** If you remove outlines with `outline: none;`, be sure to provide clear visual `:focus` styles so the user can see which element they are on at any time for greater accessibility. Visit [W3C's WCAG 2.0 2.4.7 Guideline](https://www.w3.org/TR/UNDERSTANDING-WCAG20/navigation-mechanisms-focus-visible.html) to learn more.\n\n### Scripting\n\n#### Current Input\n\nAsk What Input what the current input method is. This works best if asked after the events What Input is bound to (`mousedown`, `keydown` and `touchstart`).\n\n```javascript\nwhatInput.ask(); // returns `mouse`, `keyboard` or `touch`\n\nmyButton.addEventListener('click', function() {\n\n  if (whatInput.ask() === 'mouse') {\n    // do mousy things\n  } else if (whatInput.ask() === 'keyboard') {\n    // do keyboard things\n  }\n\n});\n```\n\nIf it's necessary to know if `mousemove` is being used, use the `'loose'` option. For example:\n\n```javascript\n\n/*\n  nothing has happened but the mouse has moved\n*/\n\nwhatInput.ask(); // returns `initial` because the page has not been directly interacted with\nwhatInput.ask('loose'); // returns `mouse` because mouse movement was detected\n\n/*\n  the keyboard has been used, then the mouse was moved\n*/\n\nwhatInput.ask(); // returns `keyboard` because the keyboard was the last direct page interaction\nwhatInput.ask('loose'); // returns `mouse` because mouse movement was the most recent action detected\n```\n\nAsk What Input to return an array of all the input types that have been used _so far_.\n\n```javascript\nwhatInput.types(); // ex. returns ['mouse', 'keyboard']\n```\n\nSet a custom array of keycodes that will be ignored when pressed.\n\n```javascript\nwhatInput.ignoreKeys([1, 2, 3])\n```\n\nFire a function when the input or intent changes.\n\n```javascript\n// create a function to be fired\nvar myFunction = function(type) {\n  console.log(type)\n};\n\n// fire `myFunction` when the intent changes\nwhatInput.registerOnChange(myFunction, 'intent');\n\n// fire `myFunction` when the input changes\nwhatInput.registerOnChange(myFunction, 'input');\n\n// remove custom event\nwhatInput.unRegisterOnChange(myFunction);\n```\n\n## Compatibility\n\nWhat Input works in all modern browsers. For compatibility with IE8, polyfills are required for:\n\n* addEventListener\n* IndexOf\n\nAdd your own, or grab the bundle included here.\n\n```html\n<!--[if lte IE 8]>\n  <script src=\"lte-IE8.js\"></script>\n<![endif]-->\n```\n\n## Demo\n\nCheck out the demo to see What Input in action.\n\nhttp://ten1seven.github.io/what-input\n\n## Acknowledgments\n\nSpecial thanks to [Viget](http://viget.com/) for their encouragement and commitment to open source projects. Visit [code.viget.com](http://code.viget.com/) to see more projects from [Viget](http://viget.com).\n\nThanks to [mAAdhaTTah](https://github.com/mAAdhaTTah) for the initial conversion to Webpack.\n\nWhat Input is written and maintained by [@ten1seven](https://github.com/ten1seven).\n\n## License\n\nWhat Input is freely available under the [MIT License](http://opensource.org/licenses/MIT).\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/ten1seven/what-input.git",
    "type": "git"
  },
  "scripts": {
    "start": "gulp"
  },
  "version": "4.3.1"
}

{
  "_args": [
    [
      {
        "raw": "react-live@^1.8.0-2",
        "scope": null,
        "escapedName": "react-live",
        "name": "react-live",
        "rawSpec": "^1.8.0-2",
        "spec": ">=1.8.0-2 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle"
    ]
  ],
  "_from": "react-live@>=1.8.0-2 <2.0.0",
  "_id": "react-live@1.10.1",
  "_inCache": true,
  "_location": "/react-live",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-live_1.10.1_1519829364570_0.2740154158683503"
  },
  "_npmUser": {
    "name": "philplckthun",
    "email": "phil.pluckthun@formidable.com"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-live@^1.8.0-2",
    "scope": null,
    "escapedName": "react-live",
    "name": "react-live",
    "rawSpec": "^1.8.0-2",
    "spec": ">=1.8.0-2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/spectacle"
  ],
  "_resolved": "https://registry.npmjs.org/react-live/-/react-live-1.10.1.tgz",
  "_shasum": "3736be3e8281e455b3cca781506813c55abed011",
  "_shrinkwrap": null,
  "_spec": "react-live@^1.8.0-2",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/spectacle",
  "author": {
    "name": "Phil Plückthun",
    "email": "phil@plckthn.me",
    "url": "https://github.com/philpl"
  },
  "bugs": {
    "url": "https://github.com/philpl/react-live/issues"
  },
  "dependencies": {
    "buble": "^0.19.3",
    "core-js": "^2.4.1",
    "dom-iterator": "^1.0.0",
    "prismjs": "^1.6.0",
    "prop-types": "^15.5.8",
    "unescape": "^0.2.0"
  },
  "description": "A production-focused playground for live editing React code",
  "devDependencies": {
    "@storybook/addon-knobs": "^3.3.12",
    "@storybook/react": "^3.3.12",
    "@types/react": "^16.0.36",
    "babel-core": "^6.26.0",
    "babel-jest": "^22.2.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-plugin-transform-react-remove-prop-types": "^0.4.13",
    "babel-preset-env": "^1.3.2",
    "babel-preset-react": "^6.23.0",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-16": "^1.1.1",
    "jest": "^22.2.1",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "rollup": "^0.55.3",
    "rollup-plugin-babel": "^3.0.3",
    "rollup-plugin-commonjs": "^8.3.0",
    "rollup-plugin-filesize": "^1.5.0",
    "rollup-plugin-node-resolve": "^3.0.2",
    "rollup-plugin-replace": "^2.0.0",
    "rollup-plugin-uglify-es": "^0.0.1",
    "typescript": "^2.7.1",
    "typings-tester": "^0.3.1"
  },
  "directories": {},
  "dist": {
    "shasum": "3736be3e8281e455b3cca781506813c55abed011",
    "tarball": "https://registry.npmjs.org/react-live/-/react-live-1.10.1.tgz",
    "fileCount": 89,
    "unpackedSize": 164299
  },
  "engines": {
    "node": ">= 0.12.0",
    "npm": ">= 2.0.0"
  },
  "files": [
    "src",
    "lib",
    "dist",
    "react-live.css",
    "typings/react-live.d.ts"
  ],
  "homepage": "https://github.com/philpl/react-live#readme",
  "jest": {
    "rootDir": "./src",
    "setupFiles": [
      "../jest.setup.js"
    ]
  },
  "jsnext:main": "dist/react-live.es.js",
  "keywords": [
    "react",
    "live",
    "live edit",
    "component playground",
    "react live"
  ],
  "license": "MIT",
  "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2013\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "main": "dist/react-live.cjs.js",
  "maintainers": [
    {
      "name": "formidablelabs",
      "email": "npm@formidablelabs.com"
    },
    {
      "name": "philplckthun",
      "email": "phil@plckthn.me"
    }
  ],
  "module": "dist/react-live.es.js",
  "name": "react-live",
  "optionalDependencies": {},
  "readme": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/philpl/react-live/master/docs/logo.gif\" width=250></p>\n<h2 align=\"center\">React Live</h2>\n<p align=\"center\">\n<strong>A production-focused playground for live editing React code</strong>\n<br><br>\n<a href=\"https://npmjs.com/package/react-live\"><img src=\"https://img.shields.io/npm/dm/react-live.svg\"></a>\n<a href=\"https://npmjs.com/package/react-live\"><img src=\"https://img.shields.io/npm/v/react-live.svg\"></a>\n<img src=\"http://img.badgesize.io/https://unpkg.com/react-live/dist/react-live.min.js?compression=gzip&label=gzip%20size\">\n<img src=\"http://img.badgesize.io/https://unpkg.com/react-live/dist/react-live.min.js?label=size\">\n<img src=\"https://img.shields.io/badge/module%20formats-umd%2C%20cjs%2C%20esm-green.svg\">\n</p>\n\n**React Live** brings you the ability to render React components and present the user with editable\nsource code and live preview.\nIt supports server-side rendering and comes in a tiny bundle, thanks to Bublé and a Prism.js-based editor.\n\nThe library is structured modularly and lets you style its components as you wish and put them where you want.\n\n## Usage\n\nInstall it with `npm install react-live` and try out this piece of JSX:\n\n```js\nimport {\n  LiveProvider,\n  LiveEditor,\n  LiveError,\n  LivePreview\n} from 'react-live'\n\n<LiveProvider code=\"<strong>Hello World!</strong>\">\n  <LiveEditor />\n  <LiveError />\n  <LivePreview />\n</LiveProvider>\n```\n\n## Demo\n\n[https://react-live.philpl.com/](https://react-live.philpl.com/)\n\n## FAQ\n\n### How does it work?\n\nIt takes your code and transpiles it through Bublé, while the code is displayed using Prism.js.\nThe transpiled code is then rendered in the preview component, which does a fake mount, if the code\nis a component.\n\nEasy peasy!\n\n### What code can I use?\n\nThe code can be one of the following things:\n\n- React elements, e.g. `<strong>Hello World!</strong>`\n- React pure functional components, e.g. `() => <strong>Hello World!</strong>`\n- React component classes\n\nIf you enable the `noInline` prop on your `LiveProvider`, you’ll be able to write imperative code,\nand render one of the above things by calling `render`.\n\n### How does the scope work?\n\nThe `scope` prop on the `LiveProvider` accepts additional globals. By default it injects `React` only, which\nmeans that the user can use it in their code like this:\n\n```js\n//                    ↓↓↓↓↓\nclass Example extends React.Component {\n  render() {\n    return <strong>Hello World!</strong>\n  }\n}\n```\n\nBut you can of course pass more things to this scope, that will be available as variables in the code. Here's an example using [styled components](https://github.com/styled-components/styled-components):\n\n```js\nimport styled from 'styled-components';\n\nconst headerProps = { text: 'I\\'m styled!' };\n\nconst scope = {styled, headerProps};\n\nconst code = `\n  const Header = styled.div\\`\n    color: palevioletred;\n    font-size: 18px;\n  \\`\n\n  render(<Header>{headerProps.text}</Header>)\n`\n\n<LiveProvider code={code} scope={scope} noInline={true}>\n  <LiveEditor />\n  <LiveError />\n  <LivePreview />\n</LiveProvider>\n```\n\n## API\n\n### &lt;LiveProvider /&gt;\n\nThis component provides the `context` for all the other ones. It also transpiles the user’s code!\nIt supports these props, while passing all others through to a `<div />`:\n\n|Name|PropType|Description|\n|---|---|---|\n|code|PropTypes.string|The code that should be rendered, apart from the user’s edits\n|scope|PropTypes.object|Accepts custom globals that the `code` can use\n|mountStylesheet|PropTypes.bool|Mounts the stylesheet for the prism editor (Default: `true`)\n|noInline|PropTypes.bool|Doesn’t evaluate and mount the inline code (Default: `false`)\n|transformCode|PropTypes.func|Accepts and returns the code to be transpiled, affording an opportunity to first transform it.\n\nApart from these props it attaches the `.react-live` CSS class to its `div`.\nAll subsequent components must be rendered inside a provider, since they communicate\nusing one.\n\nBy default this component will render a `<style />` tag for the Prism styling. You can decide not\nto render it and include the `react-live.css` file instead.\n\nThe `noInline` option kicks the Provider into a different mode, where you can write imperative-style\ncode and nothing gets evaluated and mounted automatically. Your example will need to call `render`\nwith valid JSX elements.\n\n### &lt;LiveEditor /&gt;\n\nThis component renders the editor that displays the code. It is built using Prism.js and a Content Editable.\nIt accepts these props for styling:\n\n|Name|PropType|Description|\n|---|---|---|\n|className|PropTypes.string|An additional class that is added to the Content Editable\n|ignoreTabKey|PropTypes.bool|Makes the editor ignore tab key presses so that keyboard users can tab past the editor without getting stuck\n|style|PropTypes.object|Additional styles for the Content Editable\n|onChange|PropTypes.func|Accepts a callback that is called when the user makes changes\n\nThis component renders a Prism.js editor underneath it and also renders all of Prism’s\nstyles inside a `style` tag.\nThe editor / content editable has an additional `.react-live-editor` CSS class.\n\n### &lt;LiveError /&gt;\n\nThis component renders any error that occur while executing the code, or transpiling it.\nIt passes through any props to its `div` and also attaches the `.react-live-error` CSS class to it.\n\n> Note: Right now the component unmounts, when there’s no error to be shown.\n\n### &lt;LivePreview /&gt;\n\nThis component renders the actual component, that the code generates, inside an error boundary.\nIt passes through any props to its `div` and also attaches the `.react-live-preview` CSS class to it.\n\n### withLive\n\nThe `withLive` method creates a higher-order component, that injects the live-editing context provided\nby `LiveProvider` into a component, as the `live` prop.\n\nThe context's shape is as follows:\n\n|Name|Type|Description|\n|---|---|---|\n|code|string|Reflects the code that is passed in as the `code` prop\n|error|string|An error that the code has thrown when it was previewed\n|onError|function|A callback that, when called, changes the error to what's passed as the first argument\n|onChange|function|A callback that accepts new code and transpiles it\n|element|React.Element|The result of the transpiled code that is previewed\n\n> Note: The code prop doesn't reflect the up-to-date code, but the `code` prop, that is passed to the `LiveProvider`.\n> This is due to the fact that the Editor is an uncontrolled input for the reason of managing the `contentEditable`\n> element efficiently.\n\nUsing this HOC allows you to add new components to react-live, or replace the default ones, with a new\ndesired behaviour.\n\n## Comparison to [component-playground](https://github.com/FormidableLabs/component-playground)\n\nThere are multiple options when it comes to live, editable React component environments. Formidable actually has **two** first class projects to help you out: [`component-playground`](https://github.com/FormidableLabs/component-playground) and [`react-live`](https://github.com/FormidableLabs/react-live). Let's briefly look at the libraries, use cases, and factors that might help in deciding which is right for you.\n\nHere's a high-level decision tree:\n\n- If you want **fast and easy** setup and integration, then `component-playground` may be the ticket!\n- If you want **a smaller bundle**, **SSR**, and **more flexibility**, then `react-live` is for you!\n\nHere are the various factors at play:\n\n- **Build**: `component-playground` uses `babel-standalone`, `react-live` uses `bublé`. (_Note_: `react-live` might make transpiler customizable in the future).\n- **Bundle size**: `component-playground` has a larger bundle, but uses a more familiar editor setup. `react-live` is smaller, but more customized editor around `prism`.\n- **Ease vs. flexibility**: `react-live` is more modular/customizable, while `component-playground` is easier/faster to set up.\n- **SSR**: `component-playground` is not server-side renderable, `react-live` is.\n- **Extra features**: `component-playground` supports raw evaluation and pretty-printed output out-of-the-box, while `react-live` does not.\n- **Error handling**: `component-playground` might have more predictable error handling than `react-live` in some cases (due to `react-dom`, although this might change with React 16).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/philpl/react-live.git"
  },
  "scripts": {
    "build": "rollup -c",
    "prebuild:lib": "rm -rf lib/*",
    "prepublishOnly": "npm run build",
    "storybook": "start-storybook -p 9001 -c .storybook",
    "storybook:build": "build-storybook -c .storybook -o .out",
    "test": "jest",
    "test:typings": "typings-tester --dir typings"
  },
  "sideEffects": false,
  "typings": "./typings/react-live.d.ts",
  "version": "1.10.1"
}

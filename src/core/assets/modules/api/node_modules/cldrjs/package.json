{
  "_args": [
    [
      {
        "raw": "cldrjs@^0.4.6",
        "scope": null,
        "escapedName": "cldrjs",
        "name": "cldrjs",
        "rawSpec": "^0.4.6",
        "spec": ">=0.4.6 <0.5.0",
        "type": "range"
      },
      "/Users/vt/Desktop/projects/newv1/node_modules/globalize"
    ]
  ],
  "_from": "cldrjs@>=0.4.6 <0.5.0",
  "_id": "cldrjs@0.4.8",
  "_inCache": true,
  "_location": "/cldrjs",
  "_nodeVersion": "5.0.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/cldrjs-0.4.8.tgz_1480172640093_0.4500178743619472"
  },
  "_npmUser": {
    "name": "rxaviers",
    "email": "rxaviers@gmail.com"
  },
  "_npmVersion": "3.9.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cldrjs@^0.4.6",
    "scope": null,
    "escapedName": "cldrjs",
    "name": "cldrjs",
    "rawSpec": "^0.4.6",
    "spec": ">=0.4.6 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/globalize"
  ],
  "_resolved": "https://registry.npmjs.org/cldrjs/-/cldrjs-0.4.8.tgz",
  "_shasum": "3b994c464d2a32b5aca7c5de17a60a87e45dc4f9",
  "_shrinkwrap": null,
  "_spec": "cldrjs@^0.4.6",
  "_where": "/Users/vt/Desktop/projects/newv1/node_modules/globalize",
  "author": {
    "name": "Rafael Xavier de Souza",
    "email": "rxaviers@gmail.com",
    "url": "http://rafael.xavier.blog.br"
  },
  "bugs": {
    "url": "https://github.com/rxaviers/cldrjs/issues"
  },
  "dependencies": {},
  "description": "Simple CLDR traverser",
  "devDependencies": {
    "cldr-data-downloader": "0.2.x",
    "grunt": "0.4.x",
    "grunt-compare-size": "0.4.0",
    "grunt-contrib-connect": "0.3.x",
    "grunt-contrib-copy": "0.4.x",
    "grunt-contrib-jshint": "0.10.x",
    "grunt-contrib-requirejs": "0.4.x",
    "grunt-contrib-uglify": "0.2.x",
    "grunt-dco": "0.0.3",
    "grunt-mocha": "0.3.x",
    "gzip-js": "0.3.2",
    "matchdep": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "3b994c464d2a32b5aca7c5de17a60a87e45dc4f9",
    "tarball": "https://registry.npmjs.org/cldrjs/-/cldrjs-0.4.8.tgz"
  },
  "files": [
    "CHANGELOG.md",
    "DCO.md",
    "dist/",
    "doc/",
    "LICENSE-MIT",
    "README.md"
  ],
  "gitHead": "9c6fedea278b25af36aaf196a573ec7b6e7c6377",
  "homepage": "https://github.com/rxaviers/cldrjs#readme",
  "keywords": [
    "utility",
    "globalization",
    "internationalization",
    "multilingualization",
    "localization",
    "g11n",
    "i18n",
    "m17n",
    "L10n",
    "localize",
    "locale",
    "cldr",
    "json",
    "inheritance",
    "compiler"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/rxaviers/cldrjs/blob/master/LICENSE-MIT"
    }
  ],
  "main": "dist/node_main.js",
  "maintainers": [
    {
      "name": "rxaviers",
      "email": "rxaviers@gmail.com"
    }
  ],
  "name": "cldrjs",
  "optionalDependencies": {},
  "readme": "# cldr.js - Simple CLDR traverser\n\n[CLDR (unicode.org)](http://cldr.unicode.org/) provides locale content for i18n software. The data is provided in two formats: LDML (XML format) and JSON. Our goal is to provide a simple layer to facilitate i18n software to access and use the [official CLDR JSON data](http://cldr.unicode.org/index/cldr-spec/json).\n\n| File | Minified + gzipped size | Summary |\n|---|--:|---|\n| cldr.js | 2.1KB | Core library |\n| cldr/event.js | +1.4KB | Provides methods to allow listening to events, eg. `get` |\n| cldr/supplemental.js | +0.5KB | Provides supplemental helper methods |\n| cldr/unresolved.js | +0.7KB | Provides inheritance support for unresolved data |\n\nQuick jump:\n- [About cldr.js?](#about-cldrjs)\n- [Getting Started](#getting-started)\n  - [Usage and installation](#usage-and-installation)\n  - [How to get CLDR JSON data?](#how-to-get-cldr-json-data)\n  - [How do I load CLDR data into Cldrjs?](#how-do-i-load-cldr-data-into-cldrjs)\n- [API](#api)\n- [Error reference](#error)\n- [Development / Contributing](#development--contributing)\n\n\n## About cldr.js?\n\n### Who uses cldr.js?\n\n| Organization | Project |\n|---|---|\n| ![jQuery](doc/asset/jquery.png) | https://github.com/jquery/globalize |\n\n### Where to use it?\n\nIt's designed to work both in the [browser](#usage-and-installation) and in [Node.js](#commonjs--nodejs). It supports [AMD](#usage-and-installation) and [CommonJs](#usage-and-installation);\n\nSee [Usage and installation](#usage-and-installation).\n\n### What changed from 0.3.x to 0.4.x?\n\nSee our [changelogs](./CHANGELOG.md).\n\n### Load only the CLDR portion you need\n\n```javascript\n// Load the appropriate portion of CLDR JSON data\nCldr.load(\n  likelySubtagsData,\n  enData,\n  ptBrData\n);\n```\n\nSee [How to get CLDR JSON data?](#how-to-get-cldr-json-data) below for more information on how to get that data.\n\n### Instantiate a locale and get it normalized\n\n```javascript\nvar en = new Cldr( \"en\" );\nen.attributes;\n// > {\n//   \"bundle\": \"en\",\n//   \"minLanguageId\": \"en\",\n//   \"maxLanguageId\": \"en-Latn-US\",\n//   \"language\": \"en\",\n//   \"script\": \"Latn\",\n//   \"territory\": \"US\",\n//   \"region\": \"US\"\n// }\n\nvar zh = new Cldr( \"zh-u-nu-finance-cu-cny\" );\nzh.attributes;\n// > {\n//   \"bundle\": \"zh-Hant\",\n//   \"minLanguageId\": \"zh\",\n//   \"maxLanguageId\": \"zh-Hans-CN\",\n//   \"language\": \"zh\",\n//   \"script\": \"Hans\",\n//   \"territory\": \"CN\",\n//   \"region\": \"CN\",\n//   \"u-nu\": \"finance\",\n//   \"u-cu\": \"cny\"\n// }\n\n```\n\n- `language`, `script`, `territory` (also aliased as `region`), `maxLanguageId` (computed by [adding likely subtags](./src/core/likely_subtags.js)) and `minLanguageId` (computed by [removing likely subtags](./src/core/remove_likely_subtags.js)) according to the [specification](http://www.unicode.org/reports/tr35/#Likely_Subtags).\n- `bundle` holds the bundle lookup match based on the available loaded CLDR data, obtained by following [Bundle Lookup Matcher][].\n- [Unicode locale extensions](http://www.unicode.org/reports/tr35/#u_Extension).\n\nComparison between different locales.\n\n| locale | minLanguageId | maxLanguageId | language | script | region |\n| --- | --- | --- | --- | --- | --- |\n| **en** |  `\"en\"` |  `\"en-Latn-US\"`  |  `\"en\"` |  `\"Latn\"` |  `\"US\"` |\n| **en-US** |  `\"en\"` |  `\"en-Latn-US\"`  |  `\"en\"` |  `\"Latn\"` |  `\"US\"` |\n| **de** |  `\"de\"` |  `\"de-Latn-DE\"`  |  `\"de\"` |  `\"Latn\"` |  `\"DE\"` |\n| **zh** |  `\"zh\"` |  `\"zh-Hans-CN\"`  |  `\"zh\"` |  `\"Hans\"` |  `\"CN\"` |\n| **zh-TW** |  `\"zh-TW\"` |  `\"zh-Hant-TW\"`  |  `\"zh\"` |  `\"Hant\"` | `\"TW\"` |\n| **ar** |  `\"ar\"` |  `\"ar-Arab-EG\"` |  `\"ar\"` |  `\"Arab\"` | `\"EG\"` |\n| **pt** | `\"pt\"` | `\"pt-Latn-BR\"` | `\"pt\"` | `\"Latn\"` | `\"BR\"` |\n| **pt-BR** | `\"pt\"` | `\"pt-Latn-BR\"` | `\"pt\"` | `\"Latn\"` | `\"BR\"` |\n| **pt-PT** | `\"pt-PT\"` | `\"pt-Latn-PT\"` | `\"pt\"` | `\"Latn\"` | `\"PT\"` |\n| **es** | `\"es\"` | `\"es-Latn-ES\"` | `\"es\"` | `\"Latn\"` | `\"ES\"` |\n| **es-AR** | `\"es-AR\"` | `\"es-Latn-AR\"` | `\"es\"` | `\"Latn\"` | `\"AR\"` |\n\n### Get item given its path\n\n```javascript\n// Equivalent to:\n// .get( \"main/{bundle}/numbers/symbols-numberSystem-latn/decimal\" );\nen.main( \"numbers/symbols-numberSystem-latn/decimal\" );\n// > \".\"\n\n// Equivalent to:\n// .get( \"main/{bundle}/numbers/symbols-numberSystem-latn/decimal\" );\nptBr.main( \"numbers/symbols-numberSystem-latn/decimal\" );\n// > \",\"\n```\n\nHave any [locale attributes](#cldrattributes) replaced with their corresponding values by embracing it with `{}`. In the example below, `{language}` is replaced with `\"en\"` and `{territory}` with `\"US\"`.\n\n```javascript\n// Notice the more complete way to get this data is:\n// cldr.get( \"supplemental/gender/personList/{language}\" ) ||\n// cldr.get( \"supplemental/gender/personList/001\" );\nvar enGender = en.get( \"supplemental/gender/personList/{language}\" );\n// > \"neutral\"\n\nvar USCurrencies = en.get( \"supplemental/currencyData/region/{territory}\" );\n// > [\n//   { USD: { _from: \"1792-01-01\" } },\n//   { USN: { _tender: \"false\" } },\n//   { USS: { _tender: \"false\" } }\n// ]\n\n// Notice the more complete way to get this data is:\n// cldr.get( \"supplemental/measurementData/measurementSystem/{territory}\" ) ||\n// cldr.get( \"supplemental/measurementData/measurementSystem/001\" );\nvar enMeasurementSystem = en.get( \"supplemental/measurementData/measurementSystem/{territory}\" );\n// > \"US\"\n```\n\nGet `undefined` for non-existent data.\n\n```javascript\nen.get( \"/crazy/invalid/path\" );\n// ➡ undefined\n\n// Avoid this\nenData && enData.crazy && enData.crazy.invalid && enData.crazy.invalid.path;\n```\n\n### Resolve CLDR inheritances\n\nIf you are using unresolved JSON data, you can resolve them dynamically during runtime by loading the `cldr/unresolved.js` extension module. Currently, we support bundle inheritance.\n\n```javascript\nCldr.load(\n  unresolvedEnData\n  unresolvedEnGbData,\n  unresolvedEnInData,\n  parentLocalesData, // supplemental\n  likelySubtagsData  // supplemental\n);\n\nvar enIn = new Cldr( \"en-IN\" );\n\n// 1st time retrieved by resolving: en-IN ➡ en-GB (parent locale lookup).\n// Further times retrieved straight from the resolved cache.\nenIn.main( \"dates/calendars/gregorian/dateTimeFormats/availableFormats/yMd\" );\n// > \"dd/MM/y\"\n\n// 1st time retrieved by resolving: en-IN ➡ en-GB (parent locale lookup) ➡ en (truncate lookup)\n// Further times retrieved straight from the resolved cache.\nenIn.main( \"numbers/symbols-numberSystem-latn/decimal\" );\n// > \".\"\n```\n\n### Helpers\n\nWe offer some convenient helpers.\n\n```javascript\nvar usFirstDay = en.supplemental.weekData.firstDay();\n// ➡ sun\n// Equivalent to:\n// en.get( \"supplemental/weekData/firstDay/{territory}\" ) ||\n// en.get( \"supplemental/weekData/firstDay/001\" );\n\nvar brFirstDay = ptBr.supplemental.weekData.firstDay();\n// ➡ mon\n// Equivalent to:\n// ptBr.get( \"supplemental/weekData/firstDay/{territory}\" ) ||\n// ptBr.get( \"supplemental/weekData/firstDay/001\" );\n```\n\n### Browser support\n\nWe officially support:\n- Firefox (latest - 2)+\n- Chrome (latest - 2)+\n- Safari 5.1+\n- IE 8+\n- Opera (latest - 2)+\n\nSniff tests show cldr.js also works on the following browsers:\n- Firefox 4+\n- Safari 5+\n- Chrome 14+\n- IE 6+\n- Opera 11.1+\n\nIf you find any bugs, please just let us know. We'll be glad to fix them for the officially supported browsers, or at least update the documentation for the unsupported ones.\n\n\n## Getting Started\n\n### Usage and installation\n\ncldr.js has no external dependencies. You can include it in the script tag of your page and you're ready to go. [Download it by clicking here](https://github.com/rxaviers/cldr/releases).\n\n```html\n<script src=\"cldr.js\"></script>\n```\n\n\n```javascript\n// Load the appropriate portion of CLDR JSON data.\n// See \"How to get CLDR JSON data?\" below for more information on how to get that data.\nCldr.load( cldrJsonData );\n\n// Instantiate it by passing a locale.\nvar ptBr = new Cldr( \"pt-BR\" );\n\n// Get CLDR item data given its path.\n// Equivalent to:\n// .get( \"main/{bundle}/numbers/symbols-numberSystem-latn/decimal\" );\nptBr.main( \"numbers/symbols-numberSystem-latn/decimal\" );\n// > \",\"\n```\n\nWe are UMD wrapped. So, it supports AMD, CommonJS, or global variables (in case neither AMD nor CommonJS have been detected).\n\nExample of usage on AMD:\n\n```bash\nbower install cldrjs\n```\n\n```javascript\nrequire.config({\n  paths: {\n    \"cldr\": \"bower_components/cldrjs/dist/cldr\"\n  }\n});\n\nrequire( [ \"cldr\", \"cldr/supplemental\", \"cldr/unresolved\" ], function( Cldr ) {\n  ...\n});\n```\n\nExample of usage with Node.js:\n\n```bash\nnpm install cldrjs\n```\n\n```javascript\nvar Cldr = require( \"cldrjs\" );\n```\n\n### How to get CLDR JSON data?\n\n*By downloading the JSON packages individually...*\n\nUnicode CLDR is available as JSON at https://github.com/unicode-cldr/ (after this [json-packaging proposal][] took place). Please, read https://github.com/unicode-cldr/cldr-json for more information about package organization.\n\n[json-packaging proposal]: http://cldr.unicode.org/development/development-process/design-proposals/json-packaging\n\n*By using a package manager...*\n\n`cldr-data` can be used for convenience. It always downloads from the correct source.\n\nUse bower `bower install cldr-data` ([detailed instructions][]) or npm `npm install cldr-data`. For more information, see:\n\n- https://github.com/rxaviers/cldr-data-npm\n- https://github.com/rxaviers/cldr-data-bower\n\n[detailed instructions]: https://github.com/rxaviers/cldr-data-bower\n\n*By generating the JSON mappings yourself...*\n\nYou can generate the JSON representation of the languages not available in the ZIP file by using the official conversion tool ([`tools.zip`](http://www.unicode.org/Public/cldr/latest/)). This ZIP contains a README with instructions on how to build the data.\n\nYou can choose to generate unresolved data to save space or bandwidth (`-r false` option of the conversion tool) and instead have it resolve at runtime.\n\n### How do I load CLDR data into Cldrjs?\n\nThe short answer is by using `Cldr.load()` and passing the JSON data as the first argument. Below, follow several examples on how this could be accomplished.\n\nFor the examples below, first fetch CLDR JSON data:\n\n```bash\nwget http://www.unicode.org/Public/cldr/latest/json.zip\nunzip json.zip -d cldr\n```\n\nExample of embedding CLDR JSON data:  \n\n```html\n<script>\n// Embedded (hard-coded) CLDR JSON data.\nCldr.load({\n  supplemental: {\n    likelySubtags: {\n      ...\n    }\n  }\n});\n</script>\n```\n\nExample of loading it dynamically:\n\n```html\n<script src=\"jquery.js\"></script>\n<script>\n$.get( \"cldr/supplemental/likelySubtags.json\", Cldr.load );\n</script>\n```\n\nExample using AMD (also see our [functional tests](test/functional.js)):\n```javascript\ndefine([\n  \"cldr\",\n  \"json!cldr/supplemental/likelySubtags.json\"\n], function( Cldr, likelySubtags ) {\n\n  Cldr.load( likelySubtags );\n\n});\n```\n\nExample using Node.js:\n\n```javascript\nvar Cldr = require( \"cldrjs\" );\nCldr.load( require( \"./cldr/supplemental/likelySubtags.json\" ) );\n```\n\n#### Attention: library owners, do not embed data\n\nIt's NOT recommended that libraries embed data into their code logic for several reasons: avoid forcing a certain data version on users, avoid maintaining locale changes, avoid duplicating data among different i18n libraries.\n\nWe recommend loading CLDR data must be performed by end user code.\n\n#### Which CLDR portion to load?\n\nIt depends on the used modules.\n\n| File | Required CLDR JSON data |\n|---|---|\n| cldr.js | `cldr/supplemental/likelySubtags.json` |\n| cldr/unresolved.js |  `cldr/supplemental/parentLocales.json` |\n| cldr/supplemental.js | `cldr/supplemental/{timeData, weekData}.json` |\n\nYou must also load any portion of the CLDR data you plan to use in your library or your end-application.\n\n## API\n\n### Core\n\n- **`Cldr.load( json, ... )`**\n\n Load resolved or unresolved [1] JSON data.\n\n [Read more...](doc/api/core/load.md)\n\n 1: Unresolved processing is **only available** after loading `cldr/unresolved.js` extension module.\n\n- **`new Cldr( locale )`**\n\n Create a new instance of Cldr.\n\n [Read more...](doc/api/core/constructor.md)\n\n- **`.attributes`**\n\n Attributes is an Object created during instance initialization (construction) and are used internally by `.get()` to replace dynamic parts of an item path.\n\n [Read more...](doc/api/core/attributes.md)\n\n- **`.get( path )`**\n\n Get the item data given its path, or `undefined` if missing.\n\n [Read more...](doc/api/core/get.md)\n\n- **`.main( path )`**\n\n It's an alias for `.get([ \"main/{bundle}\", ... ])`.\n\n [Read more...](doc/api/core/main.md)\n\n### cldr/event.js\n\n- **`Cldr.on( event, listener )`**\n\n Add a listener function to the specified event globally (for all instances).\n\n [Read more...](doc/api/event/global_on.md)\n\n- **`Cldr.once( event, listener )`**\n\n Add a listener function to the specified event globally (for all instances). It will be automatically removed after it's first execution.\n\n [Read more...](doc/api/event/global_once.md)\n\n- **`Cldr.off( event, listener )`**\n\n Remove a listener function from the specified event globally (for all instances).\n\n [Read more...](doc/api/event/global_off.md)\n\n- **`.on( event, listener )`**\n\n Add a listener function to the specified event for this instance.\n\n [Read more...](doc/api/event/on.md)\n\n- **`.once( event, listener )`**\n\n Add a listener function to the specified event for this instance. It will be automatically removed after it's first execution.\n\n [Read more...](doc/api/event/once.md)\n\n- **`.off( event, listener )`**\n\n Remove a listener function from the specified event for this instance.\n\n [Read more...](doc/api/event/off.md)\n\n#### Events\n\n- `get` ➡ `( path, value )`\n\n Triggered before a `.get()` (or any alias) return. The triggered listener receives the normalized *path* and the *value* found.\n\n [Read more...](doc/api/event/event_get.md)\n\n### cldr/supplemental.js\n\n- **`.supplemental( path )`**\n\n It's an alias for `.get([ \"supplemental\", ... ])`.\n\n [Read more...](doc/api/supplemental.md)\n\n- **`.supplemental.timeData.allowed()`**\n\n Helper function. Return the supplemental timeData allowed of locale's territory.\n\n [Read more...](doc/api/supplemental/time_data_allowed.md)\n\n- **`.supplemental.timeData.preferred()`**\n\n Helper function. Return the supplemental timeData preferred of locale's territory.\n\n [Read more...](doc/api/supplemental/time_data_preferred.md)\n\n- **`.supplemental.weekData.firstDay()`**\n\n Helper function. Return the supplemental weekData firstDay of locale's territory. \n\n [Read more...](doc/api/supplemental/week_data_first_day.md)\n\n- **`.supplemental.weekData.minDays()`**\n\n Helper function. Return the supplemental weekData minDays of locale's territory as a Number.\n\n [Read more...](doc/api/supplemental/week_data_min_days.md)\n\n### cldr/unresolved.js\n\n- **`.get( path )`**\n\n Overload (extend) `.get()` to get the item data or lookup by following [locale inheritance](http://www.unicode.org/reports/tr35/#Locale_Inheritance), set a local resolved cache if it's found (for subsequent faster access), or return `undefined`.\n\n [Read more...](doc/api/unresolved/get.md)\n\n## Error reference\n\n### CLDR Errors\n\n#### `E_MISSING_BUNDLE`\n\nThrown when none of the loaded CLDR data can be used as a bundle for the corresponding locale. See more information on [Bundle Lookup Matcher][].\n\nError object:\n\n| Attribute | Value |\n| --- | --- |\n| code | `E_MISSING_BUNDLE` |\n| locale | Locale whose bundle could not be found |\n\n### Parameter Errors\n\n#### `E_MISSING_PARAMETER`\n\nThrown when a required parameter is missing on any static or instance methods.\n\nError object:\n\n| Attribute | Value |\n| --- | --- |\n| code | `E_MISSING_PARAMETER` |\n| name | Name of the missing parameter |\n\n#### `E_INVALID_PAR_TYPE`\n\nThrown when a parameter has an invalid type on any static or instance methods.\n\nError object:\n\n| Attribute | Value |\n| --- | --- |\n| code | `E_INVALID_PAR_TYPE` |\n| name | Name of the invalid parameter |\n| value | Invalid value |\n| expected | Expected type |\n\n\n### Development / Contributing\n\nInstall grunt and tests external dependencies. First, install the [grunt-cli](http://gruntjs.com/getting-started#installing-the-cli) and [bower](http://bower.io/) packages if you haven't before. These should be done as global installs. Then:\n\n```bash\nnpm install && bower install\n```\nRun tests\n```bash\ngrunt test\n```\nBuild distribution file.\n```bash\ngrunt\n```\n\n[Bundle Lookup Matcher]: ./doc/bundle_lookup_matcher.md\n\n## License\n\nMIT © [Rafael Xavier de Souza](http://rafael.xavier.blog.br)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/rxaviers/cldrjs.git"
  },
  "scripts": {},
  "version": "0.4.8"
}

{
  "_args": [
    [
      {
        "raw": "connect@^3.4.0",
        "scope": null,
        "escapedName": "connect",
        "name": "connect",
        "rawSpec": "^3.4.0",
        "spec": ">=3.4.0 <4.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/grunt-contrib-connect"
    ]
  ],
  "_from": "connect@>=3.4.0 <4.0.0",
  "_id": "connect@3.6.6",
  "_inCache": true,
  "_location": "/connect",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/connect_3.6.6_1518673054852_0.6902448164088655"
  },
  "_npmUser": {
    "name": "dougwilson",
    "email": "doug@somethingdoug.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "debug": "2.6.9",
    "encodeurl": "1.0.2",
    "escape-html": "1.0.3",
    "on-finished": "2.3.0",
    "parseurl": "1.3.2",
    "unpipe": "1.0.0"
  },
  "_requested": {
    "raw": "connect@^3.4.0",
    "scope": null,
    "escapedName": "connect",
    "name": "connect",
    "rawSpec": "^3.4.0",
    "spec": ">=3.4.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/grunt-contrib-connect"
  ],
  "_resolved": "https://registry.npmjs.org/connect/-/connect-3.6.6.tgz",
  "_shasum": "09eff6c55af7236e137135a72574858b6786f524",
  "_shrinkwrap": null,
  "_spec": "connect@^3.4.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/grunt-contrib-connect",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "bugs": {
    "url": "https://github.com/senchalabs/connect/issues"
  },
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com"
    },
    {
      "name": "Tim Caswell",
      "email": "tim@creationix.com"
    }
  ],
  "dependencies": {
    "debug": "2.6.9",
    "finalhandler": "1.1.0",
    "parseurl": "~1.3.2",
    "utils-merge": "1.0.1"
  },
  "description": "High performance middleware framework",
  "devDependencies": {
    "eslint": "2.13.1",
    "mocha": "3.5.3",
    "nyc": "10.3.2",
    "supertest": "2.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "09eff6c55af7236e137135a72574858b6786f524",
    "tarball": "https://registry.npmjs.org/connect/-/connect-3.6.6.tgz",
    "fileCount": 6,
    "unpackedSize": 94909
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "SECURITY.md",
    "index.js"
  ],
  "gitHead": "9a1e23ba16257462014470df61ed2d8a507399b8",
  "homepage": "https://github.com/senchalabs/connect#readme",
  "keywords": [
    "framework",
    "web",
    "middleware",
    "connect",
    "rack"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "dougwilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "connect",
  "optionalDependencies": {},
  "readme": "# Connect\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n\n  Connect is an extensible HTTP server framework for [node](http://nodejs.org) using \"plugins\" known as _middleware_.\n\n```js\nvar connect = require('connect');\nvar http = require('http');\n\nvar app = connect();\n\n// gzip/deflate outgoing responses\nvar compression = require('compression');\napp.use(compression());\n\n// store session state in browser cookie\nvar cookieSession = require('cookie-session');\napp.use(cookieSession({\n    keys: ['secret1', 'secret2']\n}));\n\n// parse urlencoded request bodies into req.body\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({extended: false}));\n\n// respond to all requests\napp.use(function(req, res){\n  res.end('Hello from Connect!\\n');\n});\n\n//create node.js http server and listen on port\nhttp.createServer(app).listen(3000);\n```\n\n## Getting Started\n\nConnect is a simple framework to glue together various \"middleware\" to handle requests.\n\n### Install Connect\n\n```sh\n$ npm install connect\n```\n\n### Create an app\n\nThe main component is a Connect \"app\". This will store all the middleware\nadded and is, itself, a function.\n\n```js\nvar app = connect();\n```\n\n### Use middleware\n\nThe core of Connect is \"using\" middleware. Middleware are added as a \"stack\"\nwhere incoming requests will execute each middleware one-by-one until a middleware\ndoes not call `next()` within it.\n\n```js\napp.use(function middleware1(req, res, next) {\n  // middleware 1\n  next();\n});\napp.use(function middleware2(req, res, next) {\n  // middleware 2\n  next();\n});\n```\n\n### Mount middleware\n\nThe `.use()` method also takes an optional path string that is matched against\nthe beginning of the incoming request URL. This allows for basic routing.\n\n```js\napp.use('/foo', function fooMiddleware(req, res, next) {\n  // req.url starts with \"/foo\"\n  next();\n});\napp.use('/bar', function barMiddleware(req, res, next) {\n  // req.url starts with \"/bar\"\n  next();\n});\n```\n\n### Error middleware\n\nThere are special cases of \"error-handling\" middleware. There are middleware\nwhere the function takes exactly 4 arguments. When a middleware passes an error\nto `next`, the app will proceed to look for the error middleware that was declared\nafter that middleware and invoke it, skipping any error middleware above that\nmiddleware and any non-error middleware below.\n\n```js\n// regular middleware\napp.use(function (req, res, next) {\n  // i had an error\n  next(new Error('boom!'));\n});\n\n// error middleware for errors that occurred in middleware\n// declared before this\napp.use(function onerror(err, req, res, next) {\n  // an error occurred!\n});\n```\n\n### Create a server from the app\n\nThe last step is to actually use the Connect app in a server. The `.listen()` method\nis a convenience to start a HTTP server (and is identical to the `http.Server`'s `listen`\nmethod in the version of Node.js you are running).\n\n```js\nvar server = app.listen(port);\n```\n\nThe app itself is really just a function with three arguments, so it can also be handed\nto `.createServer()` in Node.js.\n\n```js\nvar server = http.createServer(app);\n```\n\n## Middleware\n\nThese middleware and libraries are officially supported by the Connect/Express team:\n\n  - [body-parser](https://www.npmjs.com/package/body-parser) - previous `bodyParser`, `json`, and `urlencoded`. You may also be interested in:\n    - [body](https://www.npmjs.com/package/body)\n    - [co-body](https://www.npmjs.com/package/co-body)\n    - [raw-body](https://www.npmjs.com/package/raw-body)\n  - [compression](https://www.npmjs.com/package/compression) - previously `compress`\n  - [connect-timeout](https://www.npmjs.com/package/connect-timeout) - previously `timeout`\n  - [cookie-parser](https://www.npmjs.com/package/cookie-parser) - previously `cookieParser`\n  - [cookie-session](https://www.npmjs.com/package/cookie-session) - previously `cookieSession`\n  - [csurf](https://www.npmjs.com/package/csurf) - previously `csrf`\n  - [errorhandler](https://www.npmjs.com/package/errorhandler) - previously `error-handler`\n  - [express-session](https://www.npmjs.com/package/express-session) - previously `session`\n  - [method-override](https://www.npmjs.com/package/method-override) - previously `method-override`\n  - [morgan](https://www.npmjs.com/package/morgan) - previously `logger`\n  - [response-time](https://www.npmjs.com/package/response-time) - previously `response-time`\n  - [serve-favicon](https://www.npmjs.com/package/serve-favicon) - previously `favicon`\n  - [serve-index](https://www.npmjs.com/package/serve-index) - previously `directory`\n  - [serve-static](https://www.npmjs.com/package/serve-static) - previously `static`\n  - [vhost](https://www.npmjs.com/package/vhost) - previously `vhost`\n\nMost of these are exact ports of their Connect 2.x equivalents. The primary exception is `cookie-session`.\n\nSome middleware previously included with Connect are no longer supported by the Connect/Express team, are replaced by an alternative module, or should be superseded by a better module. Use one of these alternatives instead:\n\n  - `cookieParser`\n    - [cookies](https://www.npmjs.com/package/cookies) and [keygrip](https://www.npmjs.com/package/keygrip)\n  - `limit`\n    - [raw-body](https://www.npmjs.com/package/raw-body)\n  - `multipart`\n    - [connect-multiparty](https://www.npmjs.com/package/connect-multiparty)\n    - [connect-busboy](https://www.npmjs.com/package/connect-busboy)\n  - `query`\n    - [qs](https://www.npmjs.com/package/qs)\n  - `staticCache`\n    - [st](https://www.npmjs.com/package/st)\n    - [connect-static](https://www.npmjs.com/package/connect-static)\n\nCheckout [http-framework](https://github.com/Raynos/http-framework/wiki/Modules) for many other compatible middleware!\n\n## API\n\nThe Connect API is very minimalist, enough to create an app and add a chain\nof middleware.\n\nWhen the `connect` module is required, a function is returned that will construct\na new app when called.\n\n```js\n// require module\nvar connect = require('connect')\n\n// create app\nvar app = connect()\n```\n\n### app(req, res[, next])\n\nThe `app` itself is a function. This is just an alias to `app.handle`.\n\n### app.handle(req, res[, out])\n\nCalling the function will run the middleware stack against the given Node.js\nhttp request (`req`) and response (`res`) objects. An optional function `out`\ncan be provided that will be called if the request (or error) was not handled\nby the middleware stack.\n\n### app.listen([...])\n\nStart the app listening for requests. This method will internally create a Node.js\nHTTP server and call `.listen()` on it.\n\nThis is an alias to the `server.listen()` method in the version of Node.js running,\nso consult the Node.js documentation for all the different variations. The most\ncommon signature is [`app.listen(port)`](https://nodejs.org/dist/latest-v6.x/docs/api/http.html#http_server_listen_port_hostname_backlog_callback).\n\n### app.use(fn)\n\nUse a function on the app, where the function represents a middleware. The function\nwill be invoked for every request in the order that `app.use` is called. The function\nis called with three arguments:\n\n```js\napp.use(function (req, res, next) {\n  // req is the Node.js http request object\n  // res is the Node.js http response object\n  // next is a function to call to invoke the next middleware\n})\n```\n\nIn addition to a plan function, the `fn` argument can also be a Node.js HTTP server\ninstance or another Connect app instance.\n\n### app.use(route, fn)\n\nUse a function on the app, where the function represents a middleware. The function\nwill be invoked for every request in which the URL (`req.url` property) starts with\nthe given `route` string in the order that `app.use` is called. The function is\ncalled with three arguments:\n\n```js\napp.use('/foo', function (req, res, next) {\n  // req is the Node.js http request object\n  // res is the Node.js http response object\n  // next is a function to call to invoke the next middleware\n})\n```\n\nIn addition to a plan function, the `fn` argument can also be a Node.js HTTP server\ninstance or another Connect app instance.\n\nThe `route` is always terminated at a path separator (`/`) or a dot (`.`) character.\nThis means the given routes `/foo/` and `/foo` are the same and both will match requests\nwith the URLs `/foo`, `/foo/`, `/foo/bar`, and `/foo.bar`, but not match a request with\nthe URL `/foobar`.\n\nThe `route` is matched in a case-insensitive manor.\n\nIn order to make middleware easier to write to be agnostic of the `route`, when the\n`fn` is invoked, the `req.url` will be altered to remove the `route` part (and the\noriginal will be available as `req.originalUrl`). For example, if `fn` is used at the\nroute `/foo`, the request for `/foo/bar` will invoke `fn` with `req.url === '/bar'`\nand `req.originalUrl === '/foo/bar'`.\n\n## Running Tests\n\n```bash\nnpm install\nnpm test\n```\n\n## People\n\nThe Connect project would not be the same without all the people involved.\n\nThe original author of Connect is [TJ Holowaychuk](https://github.com/tj)\n\nThe current lead maintainer is [Douglas Christopher Wilson](https://github.com/dougwilson)\n\n[List of all contributors](https://github.com/senchalabs/connect/graphs/contributors)\n\n## Node Compatibility\n\n  - Connect `< 1.x` - node `0.2`\n  - Connect `1.x` - node `0.4`\n  - Connect `< 2.8` - node `0.6`\n  - Connect `>= 2.8 < 3` - node `0.8`\n  - Connect `>= 3` - node `0.10`, `0.12`, `4.x`, `5.x`, `6.x`, `7.x`, `8.x`; io.js `1.x`, `2.x`, `3.x`\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/connect.svg\n[npm-url]: https://npmjs.org/package/connect\n[travis-image]: https://img.shields.io/travis/senchalabs/connect/master.svg\n[travis-url]: https://travis-ci.org/senchalabs/connect\n[coveralls-image]: https://img.shields.io/coveralls/senchalabs/connect/master.svg\n[coveralls-url]: https://coveralls.io/r/senchalabs/connect\n[downloads-image]: https://img.shields.io/npm/dm/connect.svg\n[downloads-url]: https://npmjs.org/package/connect\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/senchalabs/connect.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "mocha --require test/support/env --reporter spec --bail --check-leaks test/",
    "test-cov": "nyc --reporter=text npm test",
    "test-travis": "nyc --reporter=html --reporter=text npm test"
  },
  "version": "3.6.6"
}

{
  "_args": [
    [
      {
        "raw": "cosmiconfig@3.1.0",
        "scope": null,
        "escapedName": "cosmiconfig",
        "name": "cosmiconfig",
        "rawSpec": "3.1.0",
        "spec": "3.1.0",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/babel-macros"
    ]
  ],
  "_from": "cosmiconfig@3.1.0",
  "_id": "cosmiconfig@3.1.0",
  "_inCache": true,
  "_location": "/cosmiconfig",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/cosmiconfig-3.1.0.tgz_1506906985338_0.6278869041707367"
  },
  "_npmUser": {
    "name": "sudo-suhas",
    "email": "sudo.suhas@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cosmiconfig@3.1.0",
    "scope": null,
    "escapedName": "cosmiconfig",
    "name": "cosmiconfig",
    "rawSpec": "3.1.0",
    "spec": "3.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/babel-macros"
  ],
  "_resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-3.1.0.tgz",
  "_shasum": "640a94bf9847f321800403cd273af60665c73397",
  "_shrinkwrap": null,
  "_spec": "cosmiconfig@3.1.0",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/babel-macros",
  "author": {
    "name": "David Clark",
    "email": "david.dave.clark@gmail.com"
  },
  "babel": {
    "plugins": [
      "transform-flow-strip-types"
    ]
  },
  "bugs": {
    "url": "https://github.com/davidtheclark/cosmiconfig/issues"
  },
  "contributors": [
    {
      "name": "Bogdan Chadkin",
      "email": "trysound@yandex.ru"
    },
    {
      "name": "Suhas Karanth",
      "email": "sudo.suhas@gmail.com"
    }
  ],
  "dependencies": {
    "is-directory": "^0.3.1",
    "js-yaml": "^3.9.0",
    "parse-json": "^3.0.0",
    "require-from-string": "^2.0.1"
  },
  "description": "Find and load configuration from a package.json property, rc file, or CommonJS module",
  "devDependencies": {
    "babel-eslint": "^8.0.0",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "eslint": "^4.7.0",
    "eslint-config-davidtheclark-node": "^0.2.0",
    "eslint-config-prettier": "^2.5.0",
    "eslint-plugin-flowtype": "^2.35.1",
    "eslint-plugin-node": "^3.0.5",
    "flow-bin": "^0.54.1",
    "flow-remove-types": "^1.2.1",
    "husky": "^0.14.3",
    "jest": "^21.1.0",
    "lint-staged": "^4.2.1",
    "prettier": "^1.7.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-zedsBhLSbPBms+kE7AH4vHg6JsKDz6epSv2/+5XHs8ILHlgDciSJfSWf8sX9aQ52Jb7KI7VswUTsLpR/G0cr2Q==",
    "shasum": "640a94bf9847f321800403cd273af60665c73397",
    "tarball": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-3.1.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "dist"
  ],
  "gitHead": "930926e7ca4e4f4c6cd57c371748a6c9d45083d8",
  "homepage": "https://github.com/davidtheclark/cosmiconfig#readme",
  "jest": {
    "testEnvironment": "node",
    "collectCoverageFrom": [
      "src/*.js"
    ],
    "coverageThreshold": {
      "global": {
        "branches": 100,
        "functions": 100,
        "lines": 100,
        "statements": 100
      }
    }
  },
  "keywords": [
    "load",
    "configuration",
    "config"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "prettier --write",
      "git add"
    ]
  },
  "main": "dist/index.js",
  "maintainers": [
    {
      "name": "sudo-suhas",
      "email": "sudo.suhas@gmail.com"
    },
    {
      "name": "davidtheclark",
      "email": "david.dave.clark@gmail.com"
    }
  ],
  "name": "cosmiconfig",
  "optionalDependencies": {},
  "prettier": {
    "trailingComma": "es5",
    "singleQuote": true,
    "printWidth": 80,
    "tabWidth": 2
  },
  "readme": "# cosmiconfig\n\n[![Build Status](https://img.shields.io/travis/davidtheclark/cosmiconfig/master.svg?label=unix%20build)](https://travis-ci.org/davidtheclark/cosmiconfig) [![Build status](https://img.shields.io/appveyor/ci/davidtheclark/cosmiconfig/master.svg?label=windows%20build)](https://ci.appveyor.com/project/davidtheclark/cosmiconfig/branch/master)\n\nFind and load a configuration object from\n- a `package.json` property (anywhere up the directory tree)\n- a JSON or YAML \"rc file\" (anywhere up the directory tree)\n- a `.config.js` CommonJS module (anywhere up the directory tree)\n\nFor example, if your module's name is \"soursocks,\" cosmiconfig will search out configuration in the following places:\n- a `soursocks` property in `package.json` (anywhere up the directory tree)\n- a `.soursocksrc` file in JSON or YAML format (anywhere up the directory tree)\n- a `soursocks.config.js` file exporting a JS object (anywhere up the directory tree)\n\ncosmiconfig continues to search in these places all the way up the directory tree until it finds acceptable configuration (or hits the home directory).\n\nAdditionally, all of these search locations are configurable: you can customize filenames or turn off any location.\n\nYou can also look for rc files with extensions, e.g. `.soursocksrc.json` or `.soursocksrc.yaml`.\nYou may like extensions on your rc files because you'll get syntax highlighting and linting in text editors.\n\n## Installation\n\n```\nnpm install cosmiconfig\n```\n\nTested in Node 4+.\n\n## Usage\n\n```js\nvar cosmiconfig = require('cosmiconfig');\n\nvar explorer = cosmiconfig(yourModuleName[, options]);\n\nexplorer.load(yourSearchPath)\n  .then((result) => {\n    // result.config is the parsed configuration object\n    // result.filepath is the path to the config file that was found\n  })\n  .catch((parsingError) => {\n    // do something constructive\n  });\n```\n\nThe function `cosmiconfig()` searches for a configuration object and returns a Promise,\nwhich resolves with an object containing the information you're looking for.\n\nYou can also pass option `sync: true` to load the config synchronously, returning the config itself.\n\nSo let's say `var yourModuleName = 'goldengrahams'` â€” here's how cosmiconfig will work:\n\n- Starting from `process.cwd()` (or some other directory defined by the `searchPath` argument to `load()`), it looks for configuration objects in three places, in this order:\n  1. A `goldengrahams` property in a `package.json` file (or some other property defined by `options.packageProp`);\n  2. A `.goldengrahamsrc` file with JSON or YAML syntax (or some other filename defined by `options.rc`);\n  3. A `goldengrahams.config.js` JS file exporting the object (or some other filename defined by `options.js`).\n- If none of those searches reveal a configuration object, it moves up one directory level and tries again. So the search continues in `./`, `../`, `../../`, `../../../`, etc., checking those three locations in each directory.\n- It continues searching until it arrives at your home directory (or some other directory defined by `options.stopDir`).\n- If at any point a parseable configuration is found, the `cosmiconfig()` Promise resolves with its result object.\n- If no configuration object is found, the `cosmiconfig()` Promise resolves with `null`.\n- If a configuration object is found *but is malformed* (causing a parsing error), the `cosmiconfig()` Promise rejects and shares that error (so you should `.catch()` it).\n\nAll this searching can be short-circuited by passing `options.configPath` to specify a file.\ncosmiconfig will read that file and try parsing it as JSON, YAML, or JS.\n\n## Caching\n\nAs of v2, cosmiconfig uses a few caches to reduce the need for repetitious reading of the filesystem. Every new cosmiconfig instance (created with `cosmiconfig()`) has its own caches.\n\nTo avoid or work around caching, you can\n- create separate instances of cosmiconfig, or\n- set `cache: false` in your options.\n- use the cache clearing methods documented below.\n\n## API\n\n### `var explorer = cosmiconfig(moduleName[, options])`\n\nCreates a cosmiconfig instance (i.e. explorer) configured according to the arguments, and initializes its caches.\n\n#### moduleName\n\nType: `string`\n\nYou module name. This is used to create the default filenames that cosmiconfig will look for.\n\n#### Options\n\n##### packageProp\n\nType: `string` or `false`\nDefault: `'[moduleName]'`\n\nName of the property in `package.json` to look for.\n\nIf `false`, cosmiconfig will not look in `package.json` files.\n\n##### rc\n\nType: `string` or `false`\nDefault: `'.[moduleName]rc'`\n\nName of the \"rc file\" to look for, which can be formatted as JSON or YAML.\n\nIf `false`, cosmiconfig will not look for an rc file.\n\nIf `rcExtensions: true`, the rc file can also have extensions that specify the syntax, e.g. `.[moduleName]rc.json`.\nYou may like extensions on your rc files because you'll get syntax highlighting and linting in text editors.\nAlso, with `rcExtensions: true`, you can use JS modules as rc files, e.g. `.[moduleName]rc.js`.\n\n##### js\n\nType: `string` or `false`\nDefault: `'[moduleName].config.js'`\n\nName of a JS file to look for, which must export the configuration object.\n\nIf `false`, cosmiconfig will not look for a JS file.\n\n##### rcStrictJson\n\nType: `boolean`\nDefault: `false`\n\nIf `true`, cosmiconfig will expect rc files to be strict JSON. No YAML permitted, and no sloppy JSON.\n\nBy default, rc files are parsed with [js-yaml](https://github.com/nodeca/js-yaml), which is\nmore permissive with punctuation than standard strict JSON.\n\n##### rcExtensions\n\nType: `boolean`\nDefault: `false`\n\nIf `true`, cosmiconfig will look for rc files with extensions, in addition to rc files without.\n\nThis adds a few steps to the search process.\nInstead of *just* looking for `.goldengrahamsrc` (no extension), it will also look for the following, in this order:\n\n- `.goldengrahamsrc.json`\n- `.goldengrahamsrc.yaml`\n- `.goldengrahamsrc.yml`\n- `.goldengrahamsrc.js`\n\n##### stopDir\n\nType: `string`\nDefault: Absolute path to your home directory\n\nDirectory where the search will stop.\n\n##### cache\n\nType: `boolean`\nDefault: `true`\n\nIf `false`, no caches will be used.\n\n##### sync\n\nType: `boolean`\nDefault: `false`\n\nIf `true`, config will be loaded synchronously.\n\n##### transform\n\nType: `Function`\n\nA function that transforms the parsed configuration. Receives the result object with `config` and `filepath` properties.\n\nIf the option `sync` is `false` (default), the function must return a Promise that resolves with the transformed result.\nIf the option `sync` is `true`, though, `transform` should be a synchronous function which returns the transformed result.\n\nThe reason you might use this option instead of simply applying your transform function some other way is that *the transformed result will be cached*. If your transformation involves additional filesystem I/O or other potentially slow processing, you can use this option to avoid repeating those steps every time a given configuration is loaded.\n\n##### configPath\n\nType: `string`\n\nIf provided, cosmiconfig will load and parse a config from this path, and will not perform its usual search.\n\n##### format\n\nType: `'json' | 'yaml' | 'js'`\n\nThe expected file format for the config loaded from `configPath`.\n\nIf not specified, cosmiconfig will try to infer the format using the extension name (if it has one).\nIn the event that the file does not have an extension or the extension is unrecognized, cosmiconfig will try to parse it as a JSON, YAML, or JS file.\n\n### Instance methods (on `explorer`)\n\n#### `load([searchPath, configPath])`\n\nFind and load a configuration file. Returns a Promise that resolves with `null`, if nothing is found, or an object with two properties:\n- `config`: The loaded and parsed configuration.\n- `filepath`: The filepath where this configuration was found.\n\nYou should provide *either* `searchPath` *or* `configPath`. Use `configPath` if you know the path of the configuration file you want to load. Otherwise, use `searchPath`.\n\n```js\nexplorer.load('start/search/here');\nexplorer.load('start/search/at/this/file.css');\n\nexplorer.load(null, 'load/this/file.json');\n```\n\nIf you provide `searchPath`, cosmiconfig will start its search at `searchPath` and continue to search up the directory tree, as documented above.\n\nIf you provide `configPath` (i.e. you already know where the configuration is that you want to load), cosmiconfig will try to read and parse that file. Note that the [`format` option](#format) is applicable for this as well.\n\n#### `clearFileCache()`\n\nClears the cache used when you provide a `configPath` argument to `load`.\n\n#### `clearDirectoryCache()`\n\nClears the cache used when you provide a `searchPath` argument to `load`.\n\n#### `clearCaches()`\n\nPerforms both `clearFileCache()` and `clearDirectoryCache()`.\n\n## Differences from [rc](https://github.com/dominictarr/rc)\n\n[rc](https://github.com/dominictarr/rc) serves its focused purpose well. cosmiconfig differs in a few key ways â€”Â making it more useful for some projects, less useful for others:\n\n- Looks for configuration in some different places: in a `package.json` property, an rc file, a `.config.js` file, and rc files with extensions.\n- Built-in support for JSON, YAML, and CommonJS formats.\n- Stops at the first configuration found, instead of finding all that can be found up the directory tree and merging them automatically.\n- Options.\n- Asynchronous by default (though can be run synchronously).\n\n## Contributing & Development\n\nPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.\n\nAnd please do participate!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/davidtheclark/cosmiconfig.git"
  },
  "scripts": {
    "build": "flow-remove-types src --out-dir dist --quiet",
    "coverage": "jest --coverage --coverageReporters=html --coverageReporters=text",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "precommit": "lint-staged && jest && flow check",
    "prepublishOnly": "npm run build",
    "pretest": "npm run lint && flow check",
    "test": "jest --coverage",
    "test:watch": "jest --watch"
  },
  "version": "3.1.0"
}

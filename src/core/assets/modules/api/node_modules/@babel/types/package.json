{
  "_args": [
    [
      {
        "raw": "@babel/types@7.0.0-beta.32",
        "scope": "@babel",
        "escapedName": "@babel%2ftypes",
        "name": "@babel/types",
        "rawSpec": "7.0.0-beta.32",
        "spec": "7.0.0-beta.32",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/@babel/helper-module-imports"
    ]
  ],
  "_from": "@babel/types@7.0.0-beta.32",
  "_id": "@babel/types@7.0.0-beta.32",
  "_inCache": true,
  "_location": "/@babel/types",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/types-7.0.0-beta.32.tgz_1510493607326_0.45274083921685815"
  },
  "_npmUser": {
    "name": "hzoo",
    "email": "hi@henryzoo.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@babel/types@7.0.0-beta.32",
    "scope": "@babel",
    "escapedName": "@babel%2ftypes",
    "name": "@babel/types",
    "rawSpec": "7.0.0-beta.32",
    "spec": "7.0.0-beta.32",
    "type": "version"
  },
  "_requiredBy": [
    "/@babel/helper-module-imports"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.32.tgz",
  "_shasum": "c317d0ecc89297b80bbcb2f50608e31f6452a5ff",
  "_shrinkwrap": null,
  "_spec": "@babel/types@7.0.0-beta.32",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/@babel/helper-module-imports",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "dependencies": {
    "esutils": "^2.0.2",
    "lodash": "^4.2.0",
    "to-fast-properties": "^2.0.0"
  },
  "description": "Babel Types is a Lodash-esque utility library for AST nodes",
  "devDependencies": {
    "@babel/generator": "7.0.0-beta.32",
    "babylon": "7.0.0-beta.32"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-w8+wzVcYCMb9OfaBfay2Vg5hyj7UfBX6qQtA+kB0qsW1h1NH/7xHMwvTZNqkuFBwjz5wxGS2QmaIcC3HH+UoxA==",
    "shasum": "c317d0ecc89297b80bbcb2f50608e31f6452a5ff",
    "tarball": "https://registry.npmjs.org/@babel/types/-/types-7.0.0-beta.32.tgz"
  },
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    }
  ],
  "name": "@babel/types",
  "optionalDependencies": {},
  "readme": "# @babel/types\n\n> This module contains methods for building ASTs manually and for checking the types of AST nodes.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/types\n```\n\n## API\n\n<!-- begin generated section -->\n\n### anyTypeAnnotation\n```javascript\nt.anyTypeAnnotation()\n```\n\nSee also `t.isAnyTypeAnnotation(node, opts)` and `t.assertAnyTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### arrayExpression\n```javascript\nt.arrayExpression(elements)\n```\n\nSee also `t.isArrayExpression(node, opts)` and `t.assertArrayExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `elements`: `Array<null | Expression | SpreadElement>` (default: `[]`)\n\n---\n\n### arrayPattern\n```javascript\nt.arrayPattern(elements)\n```\n\nSee also `t.isArrayPattern(node, opts)` and `t.assertArrayPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `elements`: `Array<PatternLike>` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### arrayTypeAnnotation\n```javascript\nt.arrayTypeAnnotation(elementType)\n```\n\nSee also `t.isArrayTypeAnnotation(node, opts)` and `t.assertArrayTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `elementType` (required)\n\n---\n\n### arrowFunctionExpression\n```javascript\nt.arrowFunctionExpression(params, body, async)\n```\n\nSee also `t.isArrowFunctionExpression(node, opts)` and `t.assertArrowFunctionExpression(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Expression`, `Pureish`\n\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement | Expression` (required)\n - `async`: `boolean` (default: `false`)\n - `expression`: `boolean` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### assignmentExpression\n```javascript\nt.assignmentExpression(operator, left, right)\n```\n\nSee also `t.isAssignmentExpression(node, opts)` and `t.assertAssignmentExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `operator`: `string` (required)\n - `left`: `LVal` (required)\n - `right`: `Expression` (required)\n\n---\n\n### assignmentPattern\n```javascript\nt.assignmentPattern(left, right)\n```\n\nSee also `t.isAssignmentPattern(node, opts)` and `t.assertAssignmentPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `left`: `Identifier | ObjectPattern | ArrayPattern` (required)\n - `right`: `Expression` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### awaitExpression\n```javascript\nt.awaitExpression(argument)\n```\n\nSee also `t.isAwaitExpression(node, opts)` and `t.assertAwaitExpression(node, opts)`.\n\nAliases: `Expression`, `Terminatorless`\n\n - `argument`: `Expression` (required)\n\n---\n\n### binaryExpression\n```javascript\nt.binaryExpression(operator, left, right)\n```\n\nSee also `t.isBinaryExpression(node, opts)` and `t.assertBinaryExpression(node, opts)`.\n\nAliases: `Binary`, `Expression`\n\n - `operator`: `'+' | '-' | '/' | '%' | '*' | '**' | '&' | '|' | '>>' | '>>>' | '<<' | '^' | '==' | '===' | '!=' | '!==' | 'in' | 'instanceof' | '>' | '<' | '>=' | '<='` (required)\n - `left`: `Expression` (required)\n - `right`: `Expression` (required)\n\n---\n\n### bindExpression\n```javascript\nt.bindExpression(object, callee)\n```\n\nSee also `t.isBindExpression(node, opts)` and `t.assertBindExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `object` (required)\n - `callee` (required)\n\n---\n\n### blockStatement\n```javascript\nt.blockStatement(body, directives)\n```\n\nSee also `t.isBlockStatement(node, opts)` and `t.assertBlockStatement(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`, `Block`, `Statement`\n\n - `body`: `Array<Statement>` (required)\n - `directives`: `Array<Directive>` (default: `[]`)\n\n---\n\n### booleanLiteral\n```javascript\nt.booleanLiteral(value)\n```\n\nSee also `t.isBooleanLiteral(node, opts)` and `t.assertBooleanLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `boolean` (required)\n\n---\n\n### booleanLiteralTypeAnnotation\n```javascript\nt.booleanLiteralTypeAnnotation()\n```\n\nSee also `t.isBooleanLiteralTypeAnnotation(node, opts)` and `t.assertBooleanLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n\n---\n\n### booleanTypeAnnotation\n```javascript\nt.booleanTypeAnnotation()\n```\n\nSee also `t.isBooleanTypeAnnotation(node, opts)` and `t.assertBooleanTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### breakStatement\n```javascript\nt.breakStatement(label)\n```\n\nSee also `t.isBreakStatement(node, opts)` and `t.assertBreakStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `label`: `Identifier` (default: `null`)\n\n---\n\n### callExpression\n```javascript\nt.callExpression(callee, arguments)\n```\n\nSee also `t.isCallExpression(node, opts)` and `t.assertCallExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName>` (required)\n - `optional`: `true | false` (default: `null`)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### catchClause\n```javascript\nt.catchClause(param, body)\n```\n\nSee also `t.isCatchClause(node, opts)` and `t.assertCatchClause(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`\n\n - `param`: `Identifier` (default: `null`)\n - `body`: `BlockStatement` (required)\n\n---\n\n### classBody\n```javascript\nt.classBody(body)\n```\n\nSee also `t.isClassBody(node, opts)` and `t.assertClassBody(node, opts)`.\n\n - `body`: `Array<ClassMethod | ClassProperty | TSDeclareMethod | TSIndexSignature>` (required)\n\n---\n\n### classDeclaration\n```javascript\nt.classDeclaration(id, superClass, body, decorators)\n```\n\nSee also `t.isClassDeclaration(node, opts)` and `t.assertClassDeclaration(node, opts)`.\n\nAliases: `Scopable`, `Class`, `Statement`, `Declaration`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `superClass`: `Expression` (default: `null`)\n - `body`: `ClassBody` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `declare`: `boolean` (default: `null`)\n - `implements`: `Array<TSExpressionWithTypeArguments | FlowClassImplements>` (default: `null`)\n - `mixins` (default: `null`)\n - `superTypeParameters`: `TypeParameterInstantiation` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classExpression\n```javascript\nt.classExpression(id, superClass, body, decorators)\n```\n\nSee also `t.isClassExpression(node, opts)` and `t.assertClassExpression(node, opts)`.\n\nAliases: `Scopable`, `Class`, `Expression`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `superClass`: `Expression` (default: `null`)\n - `body`: `ClassBody` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `implements`: `Array<TSExpressionWithTypeArguments | FlowClassImplements>` (default: `null`)\n - `mixins` (default: `null`)\n - `superTypeParameters`: `TypeParameterInstantiation` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classImplements\n```javascript\nt.classImplements(id, typeParameters)\n```\n\nSee also `t.isClassImplements(node, opts)` and `t.assertClassImplements(node, opts)`.\n\nAliases: `Flow`\n\n - `id` (required)\n - `typeParameters` (required)\n\n---\n\n### classMethod\n```javascript\nt.classMethod(kind, key, params, body, computed, static)\n```\n\nSee also `t.isClassMethod(node, opts)` and `t.assertClassMethod(node, opts)`.\n\nAliases: `Function`, `Scopable`, `BlockParent`, `FunctionParent`, `Method`\n\n - `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`)\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `computed`: `boolean` (default: `false`)\n - `static`: `boolean` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `optional`: `boolean` (default: `null`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### classProperty\n```javascript\nt.classProperty(key, value, typeAnnotation, decorators, computed)\n```\n\nSee also `t.isClassProperty(node, opts)` and `t.assertClassProperty(node, opts)`.\n\nAliases: `Property`\n\n - `key` (required)\n - `value`: `Expression` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `computed`: `boolean` (default: `false`)\n - `abstract`: `boolean` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### conditionalExpression\n```javascript\nt.conditionalExpression(test, consequent, alternate)\n```\n\nSee also `t.isConditionalExpression(node, opts)` and `t.assertConditionalExpression(node, opts)`.\n\nAliases: `Expression`, `Conditional`\n\n - `test`: `Expression` (required)\n - `consequent`: `Expression` (required)\n - `alternate`: `Expression` (required)\n\n---\n\n### continueStatement\n```javascript\nt.continueStatement(label)\n```\n\nSee also `t.isContinueStatement(node, opts)` and `t.assertContinueStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `label`: `Identifier` (default: `null`)\n\n---\n\n### debuggerStatement\n```javascript\nt.debuggerStatement()\n```\n\nSee also `t.isDebuggerStatement(node, opts)` and `t.assertDebuggerStatement(node, opts)`.\n\nAliases: `Statement`\n\n\n---\n\n### declareClass\n```javascript\nt.declareClass(id, typeParameters, extends, body)\n```\n\nSee also `t.isDeclareClass(node, opts)` and `t.assertDeclareClass(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `extends` (required)\n - `body` (required)\n\n---\n\n### declareExportAllDeclaration\n```javascript\nt.declareExportAllDeclaration(source)\n```\n\nSee also `t.isDeclareExportAllDeclaration(node, opts)` and `t.assertDeclareExportAllDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `source` (required)\n\n---\n\n### declareExportDeclaration\n```javascript\nt.declareExportDeclaration(declaration, specifiers, source)\n```\n\nSee also `t.isDeclareExportDeclaration(node, opts)` and `t.assertDeclareExportDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `declaration` (required)\n - `specifiers` (required)\n - `source` (required)\n\n---\n\n### declareFunction\n```javascript\nt.declareFunction(id)\n```\n\nSee also `t.isDeclareFunction(node, opts)` and `t.assertDeclareFunction(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n\n---\n\n### declareInterface\n```javascript\nt.declareInterface(id, typeParameters, extends, body)\n```\n\nSee also `t.isDeclareInterface(node, opts)` and `t.assertDeclareInterface(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `extends` (required)\n - `body` (required)\n\n---\n\n### declareModule\n```javascript\nt.declareModule(id, body)\n```\n\nSee also `t.isDeclareModule(node, opts)` and `t.assertDeclareModule(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `body` (required)\n\n---\n\n### declareModuleExports\n```javascript\nt.declareModuleExports(typeAnnotation)\n```\n\nSee also `t.isDeclareModuleExports(node, opts)` and `t.assertDeclareModuleExports(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `typeAnnotation` (required)\n\n---\n\n### declareOpaqueType\n```javascript\nt.declareOpaqueType(id, typeParameters, supertype)\n```\n\nSee also `t.isDeclareOpaqueType(node, opts)` and `t.assertDeclareOpaqueType(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `supertype` (required)\n\n---\n\n### declareTypeAlias\n```javascript\nt.declareTypeAlias(id, typeParameters, right)\n```\n\nSee also `t.isDeclareTypeAlias(node, opts)` and `t.assertDeclareTypeAlias(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `right` (required)\n\n---\n\n### declareVariable\n```javascript\nt.declareVariable(id)\n```\n\nSee also `t.isDeclareVariable(node, opts)` and `t.assertDeclareVariable(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n\n---\n\n### declaredPredicate\n```javascript\nt.declaredPredicate(value)\n```\n\nSee also `t.isDeclaredPredicate(node, opts)` and `t.assertDeclaredPredicate(node, opts)`.\n\nAliases: `Flow`, `FlowPredicate`\n\n - `value` (required)\n\n---\n\n### decorator\n```javascript\nt.decorator(expression)\n```\n\nSee also `t.isDecorator(node, opts)` and `t.assertDecorator(node, opts)`.\n\n - `expression`: `Expression` (required)\n\n---\n\n### directive\n```javascript\nt.directive(value)\n```\n\nSee also `t.isDirective(node, opts)` and `t.assertDirective(node, opts)`.\n\n - `value`: `DirectiveLiteral` (required)\n\n---\n\n### directiveLiteral\n```javascript\nt.directiveLiteral(value)\n```\n\nSee also `t.isDirectiveLiteral(node, opts)` and `t.assertDirectiveLiteral(node, opts)`.\n\n - `value`: `string` (required)\n\n---\n\n### doExpression\n```javascript\nt.doExpression(body)\n```\n\nSee also `t.isDoExpression(node, opts)` and `t.assertDoExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `body`: `BlockStatement` (required)\n\n---\n\n### doWhileStatement\n```javascript\nt.doWhileStatement(test, body)\n```\n\nSee also `t.isDoWhileStatement(node, opts)` and `t.assertDoWhileStatement(node, opts)`.\n\nAliases: `Statement`, `BlockParent`, `Loop`, `While`, `Scopable`\n\n - `test`: `Expression` (required)\n - `body`: `Statement` (required)\n\n---\n\n### emptyStatement\n```javascript\nt.emptyStatement()\n```\n\nSee also `t.isEmptyStatement(node, opts)` and `t.assertEmptyStatement(node, opts)`.\n\nAliases: `Statement`\n\n\n---\n\n### emptyTypeAnnotation\n```javascript\nt.emptyTypeAnnotation()\n```\n\nSee also `t.isEmptyTypeAnnotation(node, opts)` and `t.assertEmptyTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### existsTypeAnnotation\n```javascript\nt.existsTypeAnnotation()\n```\n\nSee also `t.isExistsTypeAnnotation(node, opts)` and `t.assertExistsTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n\n---\n\n### exportAllDeclaration\n```javascript\nt.exportAllDeclaration(source)\n```\n\nSee also `t.isExportAllDeclaration(node, opts)` and `t.assertExportAllDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `source`: `StringLiteral` (required)\n\n---\n\n### exportDefaultDeclaration\n```javascript\nt.exportDefaultDeclaration(declaration)\n```\n\nSee also `t.isExportDefaultDeclaration(node, opts)` and `t.assertExportDefaultDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `declaration`: `FunctionDeclaration | TSDeclareFunction | ClassDeclaration | Expression` (required)\n\n---\n\n### exportDefaultSpecifier\n```javascript\nt.exportDefaultSpecifier(exported)\n```\n\nSee also `t.isExportDefaultSpecifier(node, opts)` and `t.assertExportDefaultSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `exported`: `Identifier` (required)\n\n---\n\n### exportNamedDeclaration\n```javascript\nt.exportNamedDeclaration(declaration, specifiers, source)\n```\n\nSee also `t.isExportNamedDeclaration(node, opts)` and `t.assertExportNamedDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`, `ExportDeclaration`\n\n - `declaration`: `Declaration` (default: `null`)\n - `specifiers`: `Array<ExportSpecifier | ExportDefaultSpecifier | ExportNamespaceSpecifier>` (required)\n - `source`: `StringLiteral` (default: `null`)\n\n---\n\n### exportNamespaceSpecifier\n```javascript\nt.exportNamespaceSpecifier(exported)\n```\n\nSee also `t.isExportNamespaceSpecifier(node, opts)` and `t.assertExportNamespaceSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `exported`: `Identifier` (required)\n\n---\n\n### exportSpecifier\n```javascript\nt.exportSpecifier(local, exported)\n```\n\nSee also `t.isExportSpecifier(node, opts)` and `t.assertExportSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n - `exported`: `Identifier` (required)\n\n---\n\n### expressionStatement\n```javascript\nt.expressionStatement(expression)\n```\n\nSee also `t.isExpressionStatement(node, opts)` and `t.assertExpressionStatement(node, opts)`.\n\nAliases: `Statement`, `ExpressionWrapper`\n\n - `expression`: `Expression` (required)\n\n---\n\n### file\n```javascript\nt.file(program, comments, tokens)\n```\n\nSee also `t.isFile(node, opts)` and `t.assertFile(node, opts)`.\n\n - `program`: `Program` (required)\n - `comments` (required)\n - `tokens` (required)\n\n---\n\n### forInStatement\n```javascript\nt.forInStatement(left, right, body)\n```\n\nSee also `t.isForInStatement(node, opts)` and `t.assertForInStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`, `ForXStatement`\n\n - `left`: `VariableDeclaration | LVal` (required)\n - `right`: `Expression` (required)\n - `body`: `Statement` (required)\n\n---\n\n### forOfStatement\n```javascript\nt.forOfStatement(left, right, body)\n```\n\nSee also `t.isForOfStatement(node, opts)` and `t.assertForOfStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`, `ForXStatement`\n\n - `left`: `VariableDeclaration | LVal` (required)\n - `right`: `Expression` (required)\n - `body`: `Statement` (required)\n - `await`: `boolean` (default: `false`)\n\n---\n\n### forStatement\n```javascript\nt.forStatement(init, test, update, body)\n```\n\nSee also `t.isForStatement(node, opts)` and `t.assertForStatement(node, opts)`.\n\nAliases: `Scopable`, `Statement`, `For`, `BlockParent`, `Loop`\n\n - `init`: `VariableDeclaration | Expression` (default: `null`)\n - `test`: `Expression` (default: `null`)\n - `update`: `Expression` (default: `null`)\n - `body`: `Statement` (required)\n\n---\n\n### functionDeclaration\n```javascript\nt.functionDeclaration(id, params, body, generator, async)\n```\n\nSee also `t.isFunctionDeclaration(node, opts)` and `t.assertFunctionDeclaration(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Statement`, `Pureish`, `Declaration`\n\n - `id`: `Identifier` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `generator`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `declare`: `boolean` (default: `null`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### functionExpression\n```javascript\nt.functionExpression(id, params, body, generator, async)\n```\n\nSee also `t.isFunctionExpression(node, opts)` and `t.assertFunctionExpression(node, opts)`.\n\nAliases: `Scopable`, `Function`, `BlockParent`, `FunctionParent`, `Expression`, `Pureish`\n\n - `id`: `Identifier` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `generator`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### functionTypeAnnotation\n```javascript\nt.functionTypeAnnotation(typeParameters, params, rest, returnType)\n```\n\nSee also `t.isFunctionTypeAnnotation(node, opts)` and `t.assertFunctionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `typeParameters` (required)\n - `params` (required)\n - `rest` (required)\n - `returnType` (required)\n\n---\n\n### functionTypeParam\n```javascript\nt.functionTypeParam(name, typeAnnotation)\n```\n\nSee also `t.isFunctionTypeParam(node, opts)` and `t.assertFunctionTypeParam(node, opts)`.\n\nAliases: `Flow`\n\n - `name` (required)\n - `typeAnnotation` (required)\n\n---\n\n### genericTypeAnnotation\n```javascript\nt.genericTypeAnnotation(id, typeParameters)\n```\n\nSee also `t.isGenericTypeAnnotation(node, opts)` and `t.assertGenericTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `id` (required)\n - `typeParameters` (required)\n\n---\n\n### identifier\n```javascript\nt.identifier(name)\n```\n\nSee also `t.isIdentifier(node, opts)` and `t.assertIdentifier(node, opts)`.\n\nAliases: `Expression`, `PatternLike`, `LVal`, `TSEntityName`\n\n - `name`: `string` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### ifStatement\n```javascript\nt.ifStatement(test, consequent, alternate)\n```\n\nSee also `t.isIfStatement(node, opts)` and `t.assertIfStatement(node, opts)`.\n\nAliases: `Statement`, `Conditional`\n\n - `test`: `Expression` (required)\n - `consequent`: `Statement` (required)\n - `alternate`: `Statement` (default: `null`)\n\n---\n\n### import\n```javascript\nt.import()\n```\n\nSee also `t.isImport(node, opts)` and `t.assertImport(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### importDeclaration\n```javascript\nt.importDeclaration(specifiers, source)\n```\n\nSee also `t.isImportDeclaration(node, opts)` and `t.assertImportDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`, `ModuleDeclaration`\n\n - `specifiers`: `Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>` (required)\n - `source`: `StringLiteral` (required)\n\n---\n\n### importDefaultSpecifier\n```javascript\nt.importDefaultSpecifier(local)\n```\n\nSee also `t.isImportDefaultSpecifier(node, opts)` and `t.assertImportDefaultSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n\n---\n\n### importNamespaceSpecifier\n```javascript\nt.importNamespaceSpecifier(local)\n```\n\nSee also `t.isImportNamespaceSpecifier(node, opts)` and `t.assertImportNamespaceSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n\n---\n\n### importSpecifier\n```javascript\nt.importSpecifier(local, imported)\n```\n\nSee also `t.isImportSpecifier(node, opts)` and `t.assertImportSpecifier(node, opts)`.\n\nAliases: `ModuleSpecifier`\n\n - `local`: `Identifier` (required)\n - `imported`: `Identifier` (required)\n - `importKind`: `null | 'type' | 'typeof'` (default: `null`)\n\n---\n\n### inferredPredicate\n```javascript\nt.inferredPredicate()\n```\n\nSee also `t.isInferredPredicate(node, opts)` and `t.assertInferredPredicate(node, opts)`.\n\nAliases: `Flow`, `FlowPredicate`\n\n\n---\n\n### interfaceDeclaration\n```javascript\nt.interfaceDeclaration(id, typeParameters, extends, body)\n```\n\nSee also `t.isInterfaceDeclaration(node, opts)` and `t.assertInterfaceDeclaration(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `extends` (required)\n - `body` (required)\n\n---\n\n### interfaceExtends\n```javascript\nt.interfaceExtends(id, typeParameters)\n```\n\nSee also `t.isInterfaceExtends(node, opts)` and `t.assertInterfaceExtends(node, opts)`.\n\nAliases: `Flow`\n\n - `id` (required)\n - `typeParameters` (required)\n\n---\n\n### intersectionTypeAnnotation\n```javascript\nt.intersectionTypeAnnotation(types)\n```\n\nSee also `t.isIntersectionTypeAnnotation(node, opts)` and `t.assertIntersectionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `types` (required)\n\n---\n\n### jSXAttribute\n```javascript\nt.jSXAttribute(name, value)\n```\n\nSee also `t.isJSXAttribute(node, opts)` and `t.assertJSXAttribute(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXNamespacedName` (required)\n - `value`: `JSXElement | JSXFragment | StringLiteral | JSXExpressionContainer` (default: `null`)\n\n---\n\n### jSXClosingElement\n```javascript\nt.jSXClosingElement(name)\n```\n\nSee also `t.isJSXClosingElement(node, opts)` and `t.assertJSXClosingElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXMemberExpression` (required)\n\n---\n\n### jSXClosingFragment\n```javascript\nt.jSXClosingFragment()\n```\n\nSee also `t.isJSXClosingFragment(node, opts)` and `t.assertJSXClosingFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n\n---\n\n### jSXElement\n```javascript\nt.jSXElement(openingElement, closingElement, children, selfClosing)\n```\n\nSee also `t.isJSXElement(node, opts)` and `t.assertJSXElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`, `Expression`\n\n - `openingElement`: `JSXOpeningElement` (required)\n - `closingElement`: `JSXClosingElement` (default: `null`)\n - `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n - `selfClosing` (required)\n\n---\n\n### jSXEmptyExpression\n```javascript\nt.jSXEmptyExpression()\n```\n\nSee also `t.isJSXEmptyExpression(node, opts)` and `t.assertJSXEmptyExpression(node, opts)`.\n\nAliases: `JSX`, `Expression`\n\n\n---\n\n### jSXExpressionContainer\n```javascript\nt.jSXExpressionContainer(expression)\n```\n\nSee also `t.isJSXExpressionContainer(node, opts)` and `t.assertJSXExpressionContainer(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `expression`: `Expression` (required)\n\n---\n\n### jSXFragment\n```javascript\nt.jSXFragment(openingFragment, closingFragment, children)\n```\n\nSee also `t.isJSXFragment(node, opts)` and `t.assertJSXFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`, `Expression`\n\n - `openingFragment`: `JSXOpeningFragment` (required)\n - `closingFragment`: `JSXClosingFragment` (required)\n - `children`: `Array<JSXText | JSXExpressionContainer | JSXSpreadChild | JSXElement | JSXFragment>` (required)\n\n---\n\n### jSXIdentifier\n```javascript\nt.jSXIdentifier(name)\n```\n\nSee also `t.isJSXIdentifier(node, opts)` and `t.assertJSXIdentifier(node, opts)`.\n\nAliases: `JSX`, `Expression`\n\n - `name`: `string` (required)\n\n---\n\n### jSXMemberExpression\n```javascript\nt.jSXMemberExpression(object, property)\n```\n\nSee also `t.isJSXMemberExpression(node, opts)` and `t.assertJSXMemberExpression(node, opts)`.\n\nAliases: `JSX`, `Expression`\n\n - `object`: `JSXMemberExpression | JSXIdentifier` (required)\n - `property`: `JSXIdentifier` (required)\n\n---\n\n### jSXNamespacedName\n```javascript\nt.jSXNamespacedName(namespace, name)\n```\n\nSee also `t.isJSXNamespacedName(node, opts)` and `t.assertJSXNamespacedName(node, opts)`.\n\nAliases: `JSX`\n\n - `namespace`: `JSXIdentifier` (required)\n - `name`: `JSXIdentifier` (required)\n\n---\n\n### jSXOpeningElement\n```javascript\nt.jSXOpeningElement(name, attributes, selfClosing)\n```\n\nSee also `t.isJSXOpeningElement(node, opts)` and `t.assertJSXOpeningElement(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `name`: `JSXIdentifier | JSXMemberExpression` (required)\n - `attributes`: `Array<JSXAttribute | JSXSpreadAttribute>` (required)\n - `selfClosing`: `boolean` (default: `false`)\n\n---\n\n### jSXOpeningFragment\n```javascript\nt.jSXOpeningFragment()\n```\n\nSee also `t.isJSXOpeningFragment(node, opts)` and `t.assertJSXOpeningFragment(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n\n---\n\n### jSXSpreadAttribute\n```javascript\nt.jSXSpreadAttribute(argument)\n```\n\nSee also `t.isJSXSpreadAttribute(node, opts)` and `t.assertJSXSpreadAttribute(node, opts)`.\n\nAliases: `JSX`\n\n - `argument`: `Expression` (required)\n\n---\n\n### jSXSpreadChild\n```javascript\nt.jSXSpreadChild(expression)\n```\n\nSee also `t.isJSXSpreadChild(node, opts)` and `t.assertJSXSpreadChild(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `expression`: `Expression` (required)\n\n---\n\n### jSXText\n```javascript\nt.jSXText(value)\n```\n\nSee also `t.isJSXText(node, opts)` and `t.assertJSXText(node, opts)`.\n\nAliases: `JSX`, `Immutable`\n\n - `value`: `string` (required)\n\n---\n\n### labeledStatement\n```javascript\nt.labeledStatement(label, body)\n```\n\nSee also `t.isLabeledStatement(node, opts)` and `t.assertLabeledStatement(node, opts)`.\n\nAliases: `Statement`\n\n - `label`: `Identifier` (required)\n - `body`: `Statement` (required)\n\n---\n\n### logicalExpression\n```javascript\nt.logicalExpression(operator, left, right)\n```\n\nSee also `t.isLogicalExpression(node, opts)` and `t.assertLogicalExpression(node, opts)`.\n\nAliases: `Binary`, `Expression`\n\n - `operator`: `'||' | '&&' | '??'` (required)\n - `left`: `Expression` (required)\n - `right`: `Expression` (required)\n\n---\n\n### memberExpression\n```javascript\nt.memberExpression(object, property, computed, optional)\n```\n\nSee also `t.isMemberExpression(node, opts)` and `t.assertMemberExpression(node, opts)`.\n\nAliases: `Expression`, `LVal`\n\n - `object`: `Expression` (required)\n - `property`: if computed then `Expression` else `Identifier` (required)\n - `computed`: `boolean` (default: `false`)\n - `optional`: `true | false` (default: `null`)\n\n---\n\n### metaProperty\n```javascript\nt.metaProperty(meta, property)\n```\n\nSee also `t.isMetaProperty(node, opts)` and `t.assertMetaProperty(node, opts)`.\n\nAliases: `Expression`\n\n - `meta`: `Identifier` (required)\n - `property`: `Identifier` (required)\n\n---\n\n### mixedTypeAnnotation\n```javascript\nt.mixedTypeAnnotation()\n```\n\nSee also `t.isMixedTypeAnnotation(node, opts)` and `t.assertMixedTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### newExpression\n```javascript\nt.newExpression(callee, arguments)\n```\n\nSee also `t.isNewExpression(node, opts)` and `t.assertNewExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `callee`: `Expression` (required)\n - `arguments`: `Array<Expression | SpreadElement | JSXNamespacedName>` (required)\n - `optional`: `true | false` (default: `null`)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### noop\n```javascript\nt.noop()\n```\n\nSee also `t.isNoop(node, opts)` and `t.assertNoop(node, opts)`.\n\n\n---\n\n### nullLiteral\n```javascript\nt.nullLiteral()\n```\n\nSee also `t.isNullLiteral(node, opts)` and `t.assertNullLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n\n---\n\n### nullLiteralTypeAnnotation\n```javascript\nt.nullLiteralTypeAnnotation()\n```\n\nSee also `t.isNullLiteralTypeAnnotation(node, opts)` and `t.assertNullLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### nullableTypeAnnotation\n```javascript\nt.nullableTypeAnnotation(typeAnnotation)\n```\n\nSee also `t.isNullableTypeAnnotation(node, opts)` and `t.assertNullableTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `typeAnnotation` (required)\n\n---\n\n### numberLiteralTypeAnnotation\n```javascript\nt.numberLiteralTypeAnnotation()\n```\n\nSee also `t.isNumberLiteralTypeAnnotation(node, opts)` and `t.assertNumberLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n\n---\n\n### numberTypeAnnotation\n```javascript\nt.numberTypeAnnotation()\n```\n\nSee also `t.isNumberTypeAnnotation(node, opts)` and `t.assertNumberTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### numericLiteral\n```javascript\nt.numericLiteral(value)\n```\n\nSee also `t.isNumericLiteral(node, opts)` and `t.assertNumericLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `number` (required)\n\n---\n\n### objectExpression\n```javascript\nt.objectExpression(properties)\n```\n\nSee also `t.isObjectExpression(node, opts)` and `t.assertObjectExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `properties`: `Array<ObjectMethod | ObjectProperty | SpreadElement>` (required)\n\n---\n\n### objectMethod\n```javascript\nt.objectMethod(kind, key, params, body, computed)\n```\n\nSee also `t.isObjectMethod(node, opts)` and `t.assertObjectMethod(node, opts)`.\n\nAliases: `UserWhitespacable`, `Function`, `Scopable`, `BlockParent`, `FunctionParent`, `Method`, `ObjectMember`\n\n - `kind`: `\"method\" | \"get\" | \"set\"` (default: `'method'`)\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `params`: `Array<LVal>` (required)\n - `body`: `BlockStatement` (required)\n - `computed`: `boolean` (default: `false`)\n - `async`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n\n---\n\n### objectPattern\n```javascript\nt.objectPattern(properties)\n```\n\nSee also `t.isObjectPattern(node, opts)` and `t.assertObjectPattern(node, opts)`.\n\nAliases: `Pattern`, `PatternLike`, `LVal`\n\n - `properties`: `Array<RestElement | ObjectProperty>` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### objectProperty\n```javascript\nt.objectProperty(key, value, computed, shorthand, decorators)\n```\n\nSee also `t.isObjectProperty(node, opts)` and `t.assertObjectProperty(node, opts)`.\n\nAliases: `UserWhitespacable`, `Property`, `ObjectMember`\n\n - `key`: if computed then `Expression` else `Identifier | Literal` (required)\n - `value`: `Expression | PatternLike` (required)\n - `computed`: `boolean` (default: `false`)\n - `shorthand`: `boolean` (default: `false`)\n - `decorators`: `Array<Decorator>` (default: `null`)\n\n---\n\n### objectTypeAnnotation\n```javascript\nt.objectTypeAnnotation(properties, indexers, callProperties)\n```\n\nSee also `t.isObjectTypeAnnotation(node, opts)` and `t.assertObjectTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `properties` (required)\n - `indexers` (required)\n - `callProperties` (required)\n\n---\n\n### objectTypeCallProperty\n```javascript\nt.objectTypeCallProperty(value)\n```\n\nSee also `t.isObjectTypeCallProperty(node, opts)` and `t.assertObjectTypeCallProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `value` (required)\n\n---\n\n### objectTypeIndexer\n```javascript\nt.objectTypeIndexer(id, key, value)\n```\n\nSee also `t.isObjectTypeIndexer(node, opts)` and `t.assertObjectTypeIndexer(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `id` (required)\n - `key` (required)\n - `value` (required)\n\n---\n\n### objectTypeProperty\n```javascript\nt.objectTypeProperty(key, value)\n```\n\nSee also `t.isObjectTypeProperty(node, opts)` and `t.assertObjectTypeProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `key` (required)\n - `value` (required)\n\n---\n\n### objectTypeSpreadProperty\n```javascript\nt.objectTypeSpreadProperty(argument)\n```\n\nSee also `t.isObjectTypeSpreadProperty(node, opts)` and `t.assertObjectTypeSpreadProperty(node, opts)`.\n\nAliases: `Flow`, `UserWhitespacable`\n\n - `argument` (required)\n\n---\n\n### opaqueType\n```javascript\nt.opaqueType(id, typeParameters, supertype, impltype)\n```\n\nSee also `t.isOpaqueType(node, opts)` and `t.assertOpaqueType(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `supertype` (required)\n - `impltype` (required)\n\n---\n\n### parenthesizedExpression\n```javascript\nt.parenthesizedExpression(expression)\n```\n\nSee also `t.isParenthesizedExpression(node, opts)` and `t.assertParenthesizedExpression(node, opts)`.\n\nAliases: `Expression`, `ExpressionWrapper`\n\n - `expression`: `Expression` (required)\n\n---\n\n### program\n```javascript\nt.program(body, directives, sourceType)\n```\n\nSee also `t.isProgram(node, opts)` and `t.assertProgram(node, opts)`.\n\nAliases: `Scopable`, `BlockParent`, `Block`\n\n - `body`: `Array<Statement>` (required)\n - `directives`: `Array<Directive>` (default: `[]`)\n - `sourceType`: `'script' | 'module'` (default: `'script'`)\n - `sourceFile`: `string` (default: `null`)\n\n---\n\n### qualifiedTypeIdentifier\n```javascript\nt.qualifiedTypeIdentifier(id, qualification)\n```\n\nSee also `t.isQualifiedTypeIdentifier(node, opts)` and `t.assertQualifiedTypeIdentifier(node, opts)`.\n\nAliases: `Flow`\n\n - `id` (required)\n - `qualification` (required)\n\n---\n\n### regExpLiteral\n```javascript\nt.regExpLiteral(pattern, flags)\n```\n\nSee also `t.isRegExpLiteral(node, opts)` and `t.assertRegExpLiteral(node, opts)`.\n\nAliases: `Expression`, `Literal`\n\n - `pattern`: `string` (required)\n - `flags`: `string` (default: `''`)\n\n---\n\n### restElement\n```javascript\nt.restElement(argument)\n```\n\nSee also `t.isRestElement(node, opts)` and `t.assertRestElement(node, opts)`.\n\nAliases: `LVal`, `PatternLike`\n\n - `argument`: `LVal` (required)\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `typeAnnotation`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n\n---\n\n### returnStatement\n```javascript\nt.returnStatement(argument)\n```\n\nSee also `t.isReturnStatement(node, opts)` and `t.assertReturnStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `argument`: `Expression` (default: `null`)\n\n---\n\n### sequenceExpression\n```javascript\nt.sequenceExpression(expressions)\n```\n\nSee also `t.isSequenceExpression(node, opts)` and `t.assertSequenceExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expressions`: `Array<Expression>` (required)\n\n---\n\n### spreadElement\n```javascript\nt.spreadElement(argument)\n```\n\nSee also `t.isSpreadElement(node, opts)` and `t.assertSpreadElement(node, opts)`.\n\nAliases: `UnaryLike`\n\n - `argument`: `Expression` (required)\n\n---\n\n### stringLiteral\n```javascript\nt.stringLiteral(value)\n```\n\nSee also `t.isStringLiteral(node, opts)` and `t.assertStringLiteral(node, opts)`.\n\nAliases: `Expression`, `Pureish`, `Literal`, `Immutable`\n\n - `value`: `string` (required)\n\n---\n\n### stringLiteralTypeAnnotation\n```javascript\nt.stringLiteralTypeAnnotation()\n```\n\nSee also `t.isStringLiteralTypeAnnotation(node, opts)` and `t.assertStringLiteralTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n\n---\n\n### stringTypeAnnotation\n```javascript\nt.stringTypeAnnotation()\n```\n\nSee also `t.isStringTypeAnnotation(node, opts)` and `t.assertStringTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### super\n```javascript\nt.super()\n```\n\nSee also `t.isSuper(node, opts)` and `t.assertSuper(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### switchCase\n```javascript\nt.switchCase(test, consequent)\n```\n\nSee also `t.isSwitchCase(node, opts)` and `t.assertSwitchCase(node, opts)`.\n\n - `test`: `Expression` (default: `null`)\n - `consequent`: `Array<Statement>` (required)\n\n---\n\n### switchStatement\n```javascript\nt.switchStatement(discriminant, cases)\n```\n\nSee also `t.isSwitchStatement(node, opts)` and `t.assertSwitchStatement(node, opts)`.\n\nAliases: `Statement`, `BlockParent`, `Scopable`\n\n - `discriminant`: `Expression` (required)\n - `cases`: `Array<SwitchCase>` (required)\n\n---\n\n### tSAnyKeyword\n```javascript\nt.tSAnyKeyword()\n```\n\nSee also `t.isTSAnyKeyword(node, opts)` and `t.assertTSAnyKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSArrayType\n```javascript\nt.tSArrayType(elementType)\n```\n\nSee also `t.isTSArrayType(node, opts)` and `t.assertTSArrayType(node, opts)`.\n\nAliases: `TSType`\n\n - `elementType`: `TSType` (required)\n\n---\n\n### tSAsExpression\n```javascript\nt.tSAsExpression(expression, typeAnnotation)\n```\n\nSee also `t.isTSAsExpression(node, opts)` and `t.assertTSAsExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expression`: `Expression` (required)\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSBooleanKeyword\n```javascript\nt.tSBooleanKeyword()\n```\n\nSee also `t.isTSBooleanKeyword(node, opts)` and `t.assertTSBooleanKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSCallSignatureDeclaration\n```javascript\nt.tSCallSignatureDeclaration(typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSCallSignatureDeclaration(node, opts)` and `t.assertTSCallSignatureDeclaration(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\n---\n\n### tSConstructSignatureDeclaration\n```javascript\nt.tSConstructSignatureDeclaration(typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSConstructSignatureDeclaration(node, opts)` and `t.assertTSConstructSignatureDeclaration(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n\n---\n\n### tSConstructorType\n```javascript\nt.tSConstructorType(typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSConstructorType(node, opts)` and `t.assertTSConstructorType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n\n---\n\n### tSDeclareFunction\n```javascript\nt.tSDeclareFunction(id, typeParameters, params, returnType)\n```\n\nSee also `t.isTSDeclareFunction(node, opts)` and `t.assertTSDeclareFunction(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (default: `null`)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `declare`: `boolean` (default: `null`)\n - `generator`: `boolean` (default: `false`)\n\n---\n\n### tSDeclareMethod\n```javascript\nt.tSDeclareMethod(decorators, key, typeParameters, params, returnType)\n```\n\nSee also `t.isTSDeclareMethod(node, opts)` and `t.assertTSDeclareMethod(node, opts)`.\n\n - `decorators`: `Array<Decorator>` (default: `null`)\n - `key` (required)\n - `typeParameters`: `TypeParameterDeclaration | Noop` (default: `null`)\n - `params`: `Array<LVal>` (required)\n - `returnType`: `TypeAnnotation | TSTypeAnnotation | Noop` (default: `null`)\n - `abstract`: `boolean` (default: `null`)\n - `access`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `accessibility`: `\"public\" | \"private\" | \"protected\"` (default: `null`)\n - `async`: `boolean` (default: `false`)\n - `computed`: `boolean` (default: `false`)\n - `generator`: `boolean` (default: `false`)\n - `kind`: `\"get\" | \"set\" | \"method\" | \"constructor\"` (default: `'method'`)\n - `optional`: `boolean` (default: `null`)\n - `static`: `boolean` (default: `null`)\n\n---\n\n### tSEnumDeclaration\n```javascript\nt.tSEnumDeclaration(id, members)\n```\n\nSee also `t.isTSEnumDeclaration(node, opts)` and `t.assertTSEnumDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `members`: `Array<TSEnumMember>` (required)\n - `const`: `boolean` (default: `null`)\n - `declare`: `boolean` (default: `null`)\n - `initializer`: `Expression` (default: `null`)\n\n---\n\n### tSEnumMember\n```javascript\nt.tSEnumMember(id, initializer)\n```\n\nSee also `t.isTSEnumMember(node, opts)` and `t.assertTSEnumMember(node, opts)`.\n\n - `id`: `Identifier | StringLiteral` (required)\n - `initializer`: `Expression` (default: `null`)\n\n---\n\n### tSExportAssignment\n```javascript\nt.tSExportAssignment(expression)\n```\n\nSee also `t.isTSExportAssignment(node, opts)` and `t.assertTSExportAssignment(node, opts)`.\n\nAliases: `Statement`\n\n - `expression`: `Expression` (required)\n\n---\n\n### tSExpressionWithTypeArguments\n```javascript\nt.tSExpressionWithTypeArguments(expression, typeParameters)\n```\n\nSee also `t.isTSExpressionWithTypeArguments(node, opts)` and `t.assertTSExpressionWithTypeArguments(node, opts)`.\n\nAliases: `TSType`\n\n - `expression`: `TSEntityName` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### tSExternalModuleReference\n```javascript\nt.tSExternalModuleReference(expression)\n```\n\nSee also `t.isTSExternalModuleReference(node, opts)` and `t.assertTSExternalModuleReference(node, opts)`.\n\n - `expression`: `StringLiteral` (required)\n\n---\n\n### tSFunctionType\n```javascript\nt.tSFunctionType(typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSFunctionType(node, opts)` and `t.assertTSFunctionType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n\n---\n\n### tSImportEqualsDeclaration\n```javascript\nt.tSImportEqualsDeclaration(id, moduleReference)\n```\n\nSee also `t.isTSImportEqualsDeclaration(node, opts)` and `t.assertTSImportEqualsDeclaration(node, opts)`.\n\nAliases: `Statement`\n\n - `id`: `Identifier` (required)\n - `moduleReference`: `TSEntityName | TSExternalModuleReference` (required)\n - `isExport`: `boolean` (default: `null`)\n\n---\n\n### tSIndexSignature\n```javascript\nt.tSIndexSignature(parameters, typeAnnotation)\n```\n\nSee also `t.isTSIndexSignature(node, opts)` and `t.assertTSIndexSignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `parameters`: `Array<Identifier>` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSIndexedAccessType\n```javascript\nt.tSIndexedAccessType(objectType, indexType)\n```\n\nSee also `t.isTSIndexedAccessType(node, opts)` and `t.assertTSIndexedAccessType(node, opts)`.\n\nAliases: `TSType`\n\n - `objectType`: `TSType` (required)\n - `indexType`: `TSType` (required)\n\n---\n\n### tSInterfaceBody\n```javascript\nt.tSInterfaceBody(body)\n```\n\nSee also `t.isTSInterfaceBody(node, opts)` and `t.assertTSInterfaceBody(node, opts)`.\n\n - `body`: `Array<TSTypeElement>` (required)\n\n---\n\n### tSInterfaceDeclaration\n```javascript\nt.tSInterfaceDeclaration(id, typeParameters, extends, body)\n```\n\nSee also `t.isTSInterfaceDeclaration(node, opts)` and `t.assertTSInterfaceDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `extends`: `Array<TSExpressionWithTypeArguments>` (default: `null`)\n - `body`: `TSInterfaceBody` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### tSIntersectionType\n```javascript\nt.tSIntersectionType(types)\n```\n\nSee also `t.isTSIntersectionType(node, opts)` and `t.assertTSIntersectionType(node, opts)`.\n\nAliases: `TSType`\n\n - `types`: `Array<TSType>` (required)\n\n---\n\n### tSLiteralType\n```javascript\nt.tSLiteralType(literal)\n```\n\nSee also `t.isTSLiteralType(node, opts)` and `t.assertTSLiteralType(node, opts)`.\n\nAliases: `TSType`\n\n - `literal`: `NumericLiteral | StringLiteral | BooleanLiteral` (required)\n\n---\n\n### tSMappedType\n```javascript\nt.tSMappedType(typeParameter, typeAnnotation)\n```\n\nSee also `t.isTSMappedType(node, opts)` and `t.assertTSMappedType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeParameter`: `TypeParameter` (required)\n - `typeAnnotation`: `TSType` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSMethodSignature\n```javascript\nt.tSMethodSignature(key, typeParameters, parameters, typeAnnotation)\n```\n\nSee also `t.isTSMethodSignature(node, opts)` and `t.assertTSMethodSignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `key`: `Expression` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `parameters`: `Array<Identifier | RestElement>` (default: `null`)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `computed`: `boolean` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n\n---\n\n### tSModuleBlock\n```javascript\nt.tSModuleBlock(body)\n```\n\nSee also `t.isTSModuleBlock(node, opts)` and `t.assertTSModuleBlock(node, opts)`.\n\n - `body`: `Array<Statement>` (required)\n\n---\n\n### tSModuleDeclaration\n```javascript\nt.tSModuleDeclaration(id, body)\n```\n\nSee also `t.isTSModuleDeclaration(node, opts)` and `t.assertTSModuleDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier | StringLiteral` (required)\n - `body`: `TSModuleBlock | TSModuleDeclaration` (required)\n - `declare`: `boolean` (default: `null`)\n - `global`: `boolean` (default: `null`)\n\n---\n\n### tSNamespaceExportDeclaration\n```javascript\nt.tSNamespaceExportDeclaration(id)\n```\n\nSee also `t.isTSNamespaceExportDeclaration(node, opts)` and `t.assertTSNamespaceExportDeclaration(node, opts)`.\n\nAliases: `Statement`\n\n - `id`: `Identifier` (required)\n\n---\n\n### tSNeverKeyword\n```javascript\nt.tSNeverKeyword()\n```\n\nSee also `t.isTSNeverKeyword(node, opts)` and `t.assertTSNeverKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSNonNullExpression\n```javascript\nt.tSNonNullExpression(expression)\n```\n\nSee also `t.isTSNonNullExpression(node, opts)` and `t.assertTSNonNullExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `expression`: `Expression` (required)\n\n---\n\n### tSNullKeyword\n```javascript\nt.tSNullKeyword()\n```\n\nSee also `t.isTSNullKeyword(node, opts)` and `t.assertTSNullKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSNumberKeyword\n```javascript\nt.tSNumberKeyword()\n```\n\nSee also `t.isTSNumberKeyword(node, opts)` and `t.assertTSNumberKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSObjectKeyword\n```javascript\nt.tSObjectKeyword()\n```\n\nSee also `t.isTSObjectKeyword(node, opts)` and `t.assertTSObjectKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSParameterProperty\n```javascript\nt.tSParameterProperty(parameter)\n```\n\nSee also `t.isTSParameterProperty(node, opts)` and `t.assertTSParameterProperty(node, opts)`.\n\nAliases: `LVal`\n\n - `parameter`: `Identifier | AssignmentPattern` (required)\n - `accessibility`: `'public' | 'private' | 'protected'` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSParenthesizedType\n```javascript\nt.tSParenthesizedType(typeAnnotation)\n```\n\nSee also `t.isTSParenthesizedType(node, opts)` and `t.assertTSParenthesizedType(node, opts)`.\n\nAliases: `TSType`\n\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSPropertySignature\n```javascript\nt.tSPropertySignature(key, typeAnnotation, initializer)\n```\n\nSee also `t.isTSPropertySignature(node, opts)` and `t.assertTSPropertySignature(node, opts)`.\n\nAliases: `TSTypeElement`\n\n - `key`: `Expression` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (default: `null`)\n - `initializer`: `Expression` (default: `null`)\n - `computed`: `boolean` (default: `null`)\n - `optional`: `boolean` (default: `null`)\n - `readonly`: `boolean` (default: `null`)\n\n---\n\n### tSQualifiedName\n```javascript\nt.tSQualifiedName(left, right)\n```\n\nSee also `t.isTSQualifiedName(node, opts)` and `t.assertTSQualifiedName(node, opts)`.\n\nAliases: `TSEntityName`\n\n - `left`: `TSEntityName` (required)\n - `right`: `Identifier` (required)\n\n---\n\n### tSStringKeyword\n```javascript\nt.tSStringKeyword()\n```\n\nSee also `t.isTSStringKeyword(node, opts)` and `t.assertTSStringKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSSymbolKeyword\n```javascript\nt.tSSymbolKeyword()\n```\n\nSee also `t.isTSSymbolKeyword(node, opts)` and `t.assertTSSymbolKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSThisType\n```javascript\nt.tSThisType()\n```\n\nSee also `t.isTSThisType(node, opts)` and `t.assertTSThisType(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSTupleType\n```javascript\nt.tSTupleType(elementTypes)\n```\n\nSee also `t.isTSTupleType(node, opts)` and `t.assertTSTupleType(node, opts)`.\n\nAliases: `TSType`\n\n - `elementTypes`: `Array<TSType>` (required)\n\n---\n\n### tSTypeAliasDeclaration\n```javascript\nt.tSTypeAliasDeclaration(id, typeParameters, typeAnnotation)\n```\n\nSee also `t.isTSTypeAliasDeclaration(node, opts)` and `t.assertTSTypeAliasDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `id`: `Identifier` (required)\n - `typeParameters`: `TypeParameterDeclaration` (default: `null`)\n - `typeAnnotation`: `TSType` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### tSTypeAnnotation\n```javascript\nt.tSTypeAnnotation(typeAnnotation)\n```\n\nSee also `t.isTSTypeAnnotation(node, opts)` and `t.assertTSTypeAnnotation(node, opts)`.\n\n - `typeAnnotation`: `TSType` (required)\n\n---\n\n### tSTypeAssertion\n```javascript\nt.tSTypeAssertion(typeAnnotation, expression)\n```\n\nSee also `t.isTSTypeAssertion(node, opts)` and `t.assertTSTypeAssertion(node, opts)`.\n\nAliases: `Expression`\n\n - `typeAnnotation`: `TSType` (required)\n - `expression`: `Expression` (required)\n\n---\n\n### tSTypeLiteral\n```javascript\nt.tSTypeLiteral(members)\n```\n\nSee also `t.isTSTypeLiteral(node, opts)` and `t.assertTSTypeLiteral(node, opts)`.\n\nAliases: `TSType`\n\n - `members`: `Array<TSTypeElement>` (required)\n\n---\n\n### tSTypeOperator\n```javascript\nt.tSTypeOperator(typeAnnotation)\n```\n\nSee also `t.isTSTypeOperator(node, opts)` and `t.assertTSTypeOperator(node, opts)`.\n\nAliases: `TSType`\n\n - `typeAnnotation`: `TSType` (required)\n - `operator`: `string` (default: `null`)\n\n---\n\n### tSTypeParameter\n```javascript\nt.tSTypeParameter(constraint, default)\n```\n\nSee also `t.isTSTypeParameter(node, opts)` and `t.assertTSTypeParameter(node, opts)`.\n\n - `constraint`: `TSType` (default: `null`)\n - `default`: `TSType` (default: `null`)\n - `name`: `string` (default: `null`)\n\n---\n\n### tSTypeParameterDeclaration\n```javascript\nt.tSTypeParameterDeclaration(params)\n```\n\nSee also `t.isTSTypeParameterDeclaration(node, opts)` and `t.assertTSTypeParameterDeclaration(node, opts)`.\n\n - `params`: `Array<TSTypeParameter>` (required)\n\n---\n\n### tSTypeParameterInstantiation\n```javascript\nt.tSTypeParameterInstantiation(params)\n```\n\nSee also `t.isTSTypeParameterInstantiation(node, opts)` and `t.assertTSTypeParameterInstantiation(node, opts)`.\n\n - `params`: `Array<TSType>` (required)\n\n---\n\n### tSTypePredicate\n```javascript\nt.tSTypePredicate(parameterName, typeAnnotation)\n```\n\nSee also `t.isTSTypePredicate(node, opts)` and `t.assertTSTypePredicate(node, opts)`.\n\nAliases: `TSType`\n\n - `parameterName`: `Identifier | TSThisType` (required)\n - `typeAnnotation`: `TSTypeAnnotation` (required)\n\n---\n\n### tSTypeQuery\n```javascript\nt.tSTypeQuery(exprName)\n```\n\nSee also `t.isTSTypeQuery(node, opts)` and `t.assertTSTypeQuery(node, opts)`.\n\nAliases: `TSType`\n\n - `exprName`: `TSEntityName` (required)\n\n---\n\n### tSTypeReference\n```javascript\nt.tSTypeReference(typeName, typeParameters)\n```\n\nSee also `t.isTSTypeReference(node, opts)` and `t.assertTSTypeReference(node, opts)`.\n\nAliases: `TSType`\n\n - `typeName`: `TSEntityName` (required)\n - `typeParameters`: `TypeParameterInstantiation` (default: `null`)\n\n---\n\n### tSUndefinedKeyword\n```javascript\nt.tSUndefinedKeyword()\n```\n\nSee also `t.isTSUndefinedKeyword(node, opts)` and `t.assertTSUndefinedKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### tSUnionType\n```javascript\nt.tSUnionType(types)\n```\n\nSee also `t.isTSUnionType(node, opts)` and `t.assertTSUnionType(node, opts)`.\n\nAliases: `TSType`\n\n - `types`: `Array<TSType>` (required)\n\n---\n\n### tSVoidKeyword\n```javascript\nt.tSVoidKeyword()\n```\n\nSee also `t.isTSVoidKeyword(node, opts)` and `t.assertTSVoidKeyword(node, opts)`.\n\nAliases: `TSType`\n\n\n---\n\n### taggedTemplateExpression\n```javascript\nt.taggedTemplateExpression(tag, quasi)\n```\n\nSee also `t.isTaggedTemplateExpression(node, opts)` and `t.assertTaggedTemplateExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `tag`: `Expression` (required)\n - `quasi`: `TemplateLiteral` (required)\n\n---\n\n### templateElement\n```javascript\nt.templateElement(value, tail)\n```\n\nSee also `t.isTemplateElement(node, opts)` and `t.assertTemplateElement(node, opts)`.\n\n - `value` (required)\n - `tail`: `boolean` (default: `false`)\n\n---\n\n### templateLiteral\n```javascript\nt.templateLiteral(quasis, expressions)\n```\n\nSee also `t.isTemplateLiteral(node, opts)` and `t.assertTemplateLiteral(node, opts)`.\n\nAliases: `Expression`, `Literal`\n\n - `quasis`: `Array<TemplateElement>` (required)\n - `expressions`: `Array<Expression>` (required)\n\n---\n\n### thisExpression\n```javascript\nt.thisExpression()\n```\n\nSee also `t.isThisExpression(node, opts)` and `t.assertThisExpression(node, opts)`.\n\nAliases: `Expression`\n\n\n---\n\n### thisTypeAnnotation\n```javascript\nt.thisTypeAnnotation()\n```\n\nSee also `t.isThisTypeAnnotation(node, opts)` and `t.assertThisTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### throwStatement\n```javascript\nt.throwStatement(argument)\n```\n\nSee also `t.isThrowStatement(node, opts)` and `t.assertThrowStatement(node, opts)`.\n\nAliases: `Statement`, `Terminatorless`, `CompletionStatement`\n\n - `argument`: `Expression` (required)\n\n---\n\n### tryStatement\n```javascript\nt.tryStatement(block, handler, finalizer)\n```\n\nSee also `t.isTryStatement(node, opts)` and `t.assertTryStatement(node, opts)`.\n\nAliases: `Statement`\n\n - `block`: `BlockStatement` (required)\n - `handler`: `CatchClause` (default: `null`)\n - `finalizer`: `BlockStatement` (default: `null`)\n\n---\n\n### tupleTypeAnnotation\n```javascript\nt.tupleTypeAnnotation(types)\n```\n\nSee also `t.isTupleTypeAnnotation(node, opts)` and `t.assertTupleTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `types` (required)\n\n---\n\n### typeAlias\n```javascript\nt.typeAlias(id, typeParameters, right)\n```\n\nSee also `t.isTypeAlias(node, opts)` and `t.assertTypeAlias(node, opts)`.\n\nAliases: `Flow`, `FlowDeclaration`, `Statement`, `Declaration`\n\n - `id` (required)\n - `typeParameters` (required)\n - `right` (required)\n\n---\n\n### typeAnnotation\n```javascript\nt.typeAnnotation(typeAnnotation)\n```\n\nSee also `t.isTypeAnnotation(node, opts)` and `t.assertTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `typeAnnotation`: `Flow` (required)\n\n---\n\n### typeCastExpression\n```javascript\nt.typeCastExpression(expression, typeAnnotation)\n```\n\nSee also `t.isTypeCastExpression(node, opts)` and `t.assertTypeCastExpression(node, opts)`.\n\nAliases: `Flow`, `ExpressionWrapper`, `Expression`\n\n - `expression` (required)\n - `typeAnnotation` (required)\n\n---\n\n### typeParameter\n```javascript\nt.typeParameter(bound, default)\n```\n\nSee also `t.isTypeParameter(node, opts)` and `t.assertTypeParameter(node, opts)`.\n\nAliases: `Flow`\n\n - `bound`: `TypeAnnotation` (default: `null`)\n - `default`: `Flow` (default: `null`)\n - `name`: `string` (default: `null`)\n\n---\n\n### typeParameterDeclaration\n```javascript\nt.typeParameterDeclaration(params)\n```\n\nSee also `t.isTypeParameterDeclaration(node, opts)` and `t.assertTypeParameterDeclaration(node, opts)`.\n\nAliases: `Flow`\n\n - `params`: `Array<TypeParameter>` (required)\n\n---\n\n### typeParameterInstantiation\n```javascript\nt.typeParameterInstantiation(params)\n```\n\nSee also `t.isTypeParameterInstantiation(node, opts)` and `t.assertTypeParameterInstantiation(node, opts)`.\n\nAliases: `Flow`\n\n - `params`: `Array<Flow>` (required)\n\n---\n\n### typeofTypeAnnotation\n```javascript\nt.typeofTypeAnnotation(argument)\n```\n\nSee also `t.isTypeofTypeAnnotation(node, opts)` and `t.assertTypeofTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `argument` (required)\n\n---\n\n### unaryExpression\n```javascript\nt.unaryExpression(operator, argument, prefix)\n```\n\nSee also `t.isUnaryExpression(node, opts)` and `t.assertUnaryExpression(node, opts)`.\n\nAliases: `UnaryLike`, `Expression`\n\n - `operator`: `'void' | 'throw' | 'delete' | '!' | '+' | '-' | '~' | 'typeof'` (required)\n - `argument`: `Expression` (required)\n - `prefix`: `boolean` (default: `true`)\n\n---\n\n### unionTypeAnnotation\n```javascript\nt.unionTypeAnnotation(types)\n```\n\nSee also `t.isUnionTypeAnnotation(node, opts)` and `t.assertUnionTypeAnnotation(node, opts)`.\n\nAliases: `Flow`\n\n - `types` (required)\n\n---\n\n### updateExpression\n```javascript\nt.updateExpression(operator, argument, prefix)\n```\n\nSee also `t.isUpdateExpression(node, opts)` and `t.assertUpdateExpression(node, opts)`.\n\nAliases: `Expression`\n\n - `operator`: `'++' | '--'` (required)\n - `argument`: `Expression` (required)\n - `prefix`: `boolean` (default: `false`)\n\n---\n\n### variableDeclaration\n```javascript\nt.variableDeclaration(kind, declarations)\n```\n\nSee also `t.isVariableDeclaration(node, opts)` and `t.assertVariableDeclaration(node, opts)`.\n\nAliases: `Statement`, `Declaration`\n\n - `kind`: `\"var\" | \"let\" | \"const\"` (required)\n - `declarations`: `Array<VariableDeclarator>` (required)\n - `declare`: `boolean` (default: `null`)\n\n---\n\n### variableDeclarator\n```javascript\nt.variableDeclarator(id, init)\n```\n\nSee also `t.isVariableDeclarator(node, opts)` and `t.assertVariableDeclarator(node, opts)`.\n\n - `id`: `LVal` (required)\n - `init`: `Expression` (default: `null`)\n\n---\n\n### voidTypeAnnotation\n```javascript\nt.voidTypeAnnotation()\n```\n\nSee also `t.isVoidTypeAnnotation(node, opts)` and `t.assertVoidTypeAnnotation(node, opts)`.\n\nAliases: `Flow`, `FlowBaseAnnotation`\n\n\n---\n\n### whileStatement\n```javascript\nt.whileStatement(test, body)\n```\n\nSee also `t.isWhileStatement(node, opts)` and `t.assertWhileStatement(node, opts)`.\n\nAliases: `Statement`, `BlockParent`, `Loop`, `While`, `Scopable`\n\n - `test`: `Expression` (required)\n - `body`: `BlockStatement | Statement` (required)\n\n---\n\n### withStatement\n```javascript\nt.withStatement(object, body)\n```\n\nSee also `t.isWithStatement(node, opts)` and `t.assertWithStatement(node, opts)`.\n\nAliases: `Statement`\n\n - `object` (required)\n - `body`: `BlockStatement | Statement` (required)\n\n---\n\n### yieldExpression\n```javascript\nt.yieldExpression(argument, delegate)\n```\n\nSee also `t.isYieldExpression(node, opts)` and `t.assertYieldExpression(node, opts)`.\n\nAliases: `Expression`, `Terminatorless`\n\n - `argument`: `Expression` (default: `null`)\n - `delegate`: `boolean` (default: `false`)\n\n---\n\n\n<!-- end generated section -->\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-types"
  },
  "version": "7.0.0-beta.32"
}

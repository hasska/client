{
  "_args": [
    [
      {
        "raw": "libmime@3.0.0",
        "scope": null,
        "escapedName": "libmime",
        "name": "libmime",
        "rawSpec": "3.0.0",
        "spec": "3.0.0",
        "type": "version"
      },
      "/Users/vt/Desktop/projects/newv1/node_modules/nodemailer"
    ]
  ],
  "_from": "libmime@3.0.0",
  "_id": "libmime@3.0.0",
  "_inCache": true,
  "_location": "/libmime",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/libmime-3.0.0.tgz_1481190212521_0.8747396518010646"
  },
  "_npmUser": {
    "name": "andris",
    "email": "andris@kreata.ee"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "libmime@3.0.0",
    "scope": null,
    "escapedName": "libmime",
    "name": "libmime",
    "rawSpec": "3.0.0",
    "spec": "3.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/buildmail",
    "/mailcomposer",
    "/nodemailer"
  ],
  "_resolved": "https://registry.npmjs.org/libmime/-/libmime-3.0.0.tgz",
  "_shasum": "51a1a9e7448ecbd32cda54421675bb21bc093da6",
  "_shrinkwrap": null,
  "_spec": "libmime@3.0.0",
  "_where": "/Users/vt/Desktop/projects/newv1/node_modules/nodemailer",
  "author": {
    "name": "Andris Reinman",
    "email": "andris@kreata.ee"
  },
  "bugs": {
    "url": "https://github.com/andris9/libmime/issues"
  },
  "dependencies": {
    "iconv-lite": "0.4.15",
    "libbase64": "0.1.0",
    "libqp": "1.1.0"
  },
  "description": "Encode and decode quoted printable and base64 strings",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-test": "^0.13.2",
    "mocha": "^3.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "51a1a9e7448ecbd32cda54421675bb21bc093da6",
    "tarball": "https://registry.npmjs.org/libmime/-/libmime-3.0.0.tgz"
  },
  "gitHead": "a96378c519e48f1c2850fbe4cf8d626a9ae3e08a",
  "homepage": "https://github.com/andris9/libmime",
  "keywords": [
    "MIME",
    "Base64",
    "Quoted-Printable"
  ],
  "license": "MIT",
  "main": "lib/libmime",
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@node.ee"
    }
  ],
  "name": "libmime",
  "optionalDependencies": {},
  "readme": "# libmime\n\n`libmime` provides useful MIME related functions. For Quoted-Printable and Base64 encoding and decoding see [libqp](https://github.com/andris9/libqp) and [libbase64](https://github.com/andris9/libabase64).\n\n## Installation\n\n### [npm](https://www.npmjs.org/):\n\n    npm install libmime\n\n## Usage\n\n    var libmime = require('libmime');\n\n## Methods\n\n### Encoded Words\n\n#### #encodeWord\n\nEncodes a string into mime [encoded word](http://en.wikipedia.org/wiki/MIME#Encoded-Word) format.\n\n    libmime.encodeWord(str [, mimeWordEncoding[, maxLength]]) → String\n\n  * **str** - String or Buffer to be encoded\n  * **mimeWordEncoding** - Encoding for the mime word, either Q or B (default is 'Q')\n  * **maxLength** - If set, split mime words into several chunks if needed\n\n**Example**\n\n    libmime.encodeWord('See on õhin test', 'Q');\n\nBecomes with UTF-8 and Quoted-printable encoding\n\n    =?UTF-8?Q?See_on_=C3=B5hin_test?=\n\n#### #decodeWord\n\nDecodes a string from mime encoded word format.\n\n    libmime.decodeWord(str) → String\n\n  * **str** - String to be decoded\n\n**Example**\n\n    libmime.decodeWord('=?UTF-8?Q?See_on_=C3=B5hin_test?=');\n\nwill become\n\n    See on õhin test\n\n#### #encodeWords\n\nEncodes non ascii sequences in a string to mime words.\n\n    libmime.encodeWords(str[, mimeWordEncoding[, maxLength]) → String\n\n  * **str** - String or Buffer to be encoded\n  * **mimeWordEncoding** - Encoding for the mime word, either Q or B (default is 'Q')\n  * **maxLength** - If set, split mime words into several chunks if needed\n\n#### #decodeWords\n\nDecodes a string that might include one or several mime words. If no mime words are found from the string, the original string is returned\n\n    libmime.decodeWords(str) → String\n\n  * **str** - String to be decoded\n\n### Folding\n\n#### #foldLines\n\nFolds a long line according to the [RFC 5322](http://tools.ietf.org/html/rfc5322#section-2.1.1). Mostly needed for folding header lines.\n\n    libmime.foldLines(str [, lineLength[, afterSpace]]) → String\n\n  * **str** - String to be folded\n  * **lineLength** - Maximum length of a line (defaults to 76)\n  * **afterSpace** - If true, leave a space in the end of a line\n\n**Example**\n\n    libmime.foldLines('Content-Type: multipart/alternative; boundary=\"----zzzz----\"')\n\nresults in\n\n    Content-Type: multipart/alternative;\n         boundary=\"----zzzz----\"\n\n\n#### #encodeFlowed\n\nAdds soft line breaks to content marked with `format=flowed` options to ensure that no line in the message is never longer than lineLength.\n\n    libmime.encodeFlowed(str [, lineLength]) → String\n\n  * **str** Plaintext string that requires wrapping\n  * **lineLength** (defaults to 76) Maximum length of a line\n\n#### #decodeFlowed\n\nUnwraps a plaintext string in format=flowed wrapping.\n\n    libmime.decodeFlowed(str [, delSp]) → String\n\n  * **str** Plaintext string with format=flowed to decode\n  * **delSp** If true, delete leading spaces (delsp=yes)\n\n### Headers\n\n#### #decodeHeader\n\nUnfolds a header line and splits it to key and value pair. The return value is in the form of `{key: 'subject', value: 'test'}`. The value is not mime word decoded, you need to do your own decoding based on the rules for the specific header key.\n\n    libmime.decodeHeader(headerLine) → Object\n\n  * **headerLine** - Single header line, might include linebreaks as well if folded\n\n#### #decodeHeaders\n\nParses a block of header lines. Does not decode mime words as every header might have its own rules (eg. formatted email addresses and such).\n\nReturn value is an object of headers, where header keys are object keys and values are arrays.\n\n    libmime.decodeHeaders(headers) → Object\n\n  * **headers** - Headers string\n\n#### #parseHeaderValue\n\nParses a header value with `key=value` arguments into a structured object. Useful when dealing with\n`content-type` and such. Continuation encoded params are joined into mime encoded words.\n\n    parseHeaderValue(valueString) → Object\n\n  * **valueString** - a header value without the key\n\n**Example**\n\n```javascript\nparseHeaderValue('content-type: text/plain; CHARSET=\"UTF-8\"');\n```\n\nOutputs\n\n```json\n{\n    \"value\": \"text/plain\",\n    \"params\": {\n        \"charset\": \"UTF-8\"\n    }\n}\n```\n\n#### #buildHeaderValue\n\nJoins structured header value together as 'value; param1=value1; param2=value2'\n\n    buildHeaderValue(structuredHeader) → String\n\n  * **structuredHeader** - a header value formatted with `parseHeaderValue`\n\n`filename` argument is encoded with continuation encoding if needed\n\n#### #buildHeaderParam\n\nEncodes and splits a header param value according to [RFC2231](https://tools.ietf.org/html/rfc2231#section-3) Parameter Value Continuations.\n\n    libmime.buildHeaderParam(key, str, maxLength) → Array\n\n  * **key** - Parameter key (eg. `filename`)\n  * **str** - String or an Buffer value to encode\n  * **maxLength** - Maximum length of the encoded string part (not line length). Defaults to 50\n\nThe method returns an array of encoded parts with the following structure: `[{key:'...', value: '...'}]`\n\n**Example**\n\n```\nlibmime.buildHeaderParam('filename', 'filename õäöü.txt', 20);\n→\n[ { key: 'filename*0*', value: 'utf-8\\'\\'filename%20' },\n  { key: 'filename*1*', value: '%C3%B5%C3%A4%C3%B6' },\n  { key: 'filename*2*', value: '%C3%BC.txt' } ]\n```\n\nThis can be combined into a properly formatted header:\n\n```\nContent-disposition: attachment; filename*0*=utf-8''filename%20\n  filename*1*=%C3%B5%C3%A4%C3%B6; filename*2*=%C3%BC.txt\n```\n\n### MIME Types\n\n#### #detectExtension\n\nReturns file extension for a content type string. If no suitable extensions are found, 'bin' is used as the default extension.\n\n    libmime.detectExtension(mimeType) → String\n\n  * **mimeType** - Content type to be checked for\n\n**Example**\n\n    libmime.detectExtension('image/jpeg') // returns 'jpeg'\n\n#### #detectMimeType\n\nReturns content type for a file extension. If no suitable content types are found, 'application/octet-stream' is used as the default content type\n\n    libmime.detectMimeType(extension) → String\n\n  * **extension** Extension (or filename) to be checked for\n\n**Example**\n\n    libmime.detectExtension('logo.jpg') // returns 'image/jpeg'\n\n## License\n\n**MIT**",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/andris9/libmime.git"
  },
  "scripts": {
    "test": "grunt mochaTest"
  },
  "version": "3.0.0"
}

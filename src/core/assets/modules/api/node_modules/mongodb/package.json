{
  "_args": [
    [
      {
        "raw": "mongodb@^3.0.1",
        "scope": null,
        "escapedName": "mongodb",
        "name": "mongodb",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/loopback-connector-mongodb"
    ]
  ],
  "_from": "mongodb@>=3.0.1 <4.0.0",
  "_id": "mongodb@3.0.5",
  "_inCache": true,
  "_location": "/mongodb",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mongodb_3.0.5_1521832165412_0.028730498010002492"
  },
  "_npmUser": {
    "name": "mbroadst",
    "email": "mbroadst@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mongodb@^3.0.1",
    "scope": null,
    "escapedName": "mongodb",
    "name": "mongodb",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/loopback-connector-mongodb"
  ],
  "_resolved": "https://registry.npmjs.org/mongodb/-/mongodb-3.0.5.tgz",
  "_shasum": "1a3abe6bfdecaee3f35986e1669903b8564a4909",
  "_shrinkwrap": null,
  "_spec": "mongodb@^3.0.1",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/loopback-connector-mongodb",
  "author": {
    "name": "Christian Kvalheim"
  },
  "bugs": {
    "url": "https://github.com/mongodb/node-mongodb-native/issues"
  },
  "dependencies": {
    "mongodb-core": "3.0.5"
  },
  "description": "The official MongoDB driver for Node.js",
  "devDependencies": {
    "betterbenchmarks": "^0.1.0",
    "bluebird": "3.5.0",
    "bson": "^1.0.4",
    "chai": "^4.1.1",
    "co": "4.6.0",
    "conventional-changelog-cli": "^1.3.5",
    "coveralls": "^2.11.6",
    "eslint": "^4.5.0",
    "eslint-plugin-prettier": "^2.2.0",
    "istanbul": "^0.4.5",
    "jsdoc": "3.5.4",
    "mongodb-extended-json": "^1.10.0",
    "mongodb-mock-server": "^1.0.0",
    "mongodb-test-runner": "^1.1.18",
    "prettier": "^1.5.3",
    "semver": "5.4.1",
    "sinon": "^4.3.0",
    "worker-farm": "^1.5.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8ioTyyc8tkNwZCTDa1FPWvmpJFfvE484DnugC8KpVrw4AKAE03OOAlORl2yYTNtz3TX4Ab7FRo00vzgexB/67A==",
    "shasum": "1a3abe6bfdecaee3f35986e1669903b8564a4909",
    "tarball": "https://registry.npmjs.org/mongodb/-/mongodb-3.0.5.tgz",
    "fileCount": 39,
    "unpackedSize": 897939
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "f8dfa2080c0b6ba7980b881b23650e93f194162c",
  "homepage": "https://github.com/mongodb/node-mongodb-native",
  "keywords": [
    "mongodb",
    "driver",
    "official"
  ],
  "license": "Apache-2.0",
  "main": "index.js",
  "maintainers": [
    {
      "name": "christkv",
      "email": "christkv@gmail.com"
    },
    {
      "name": "daprahamian",
      "email": "dan.aprahamian@gmail.com"
    },
    {
      "name": "mbroadst",
      "email": "mbroadst@gmail.com"
    }
  ],
  "name": "mongodb",
  "optionalDependencies": {},
  "readme": "[![npm](https://nodei.co/npm/mongodb.png?downloads=true&downloadRank=true)](https://nodei.co/npm/mongodb/) [![npm](https://nodei.co/npm-dl/mongodb.png?months=6&height=3)](https://nodei.co/npm/mongodb/)\n\n[![Build Status](https://secure.travis-ci.org/mongodb/node-mongodb-native.svg?branch=2.1)](http://travis-ci.org/mongodb/node-mongodb-native)\n[![Coverage Status](https://coveralls.io/repos/github/mongodb/node-mongodb-native/badge.svg?branch=2.1)](https://coveralls.io/github/mongodb/node-mongodb-native?branch=2.1)\n[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mongodb/node-mongodb-native?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n\n# Description\n\nThe official [MongoDB](https://www.mongodb.com/) driver for Node.js. Provides a high-level API on top of [mongodb-core](https://www.npmjs.com/package/mongodb-core) that is meant for end users.\n\n**NOTE: v3.x was recently released with breaking API changes. You can find a list of changes [here](CHANGES_3.0.0.md).**\n\n## MongoDB Node.JS Driver\n\n| what          | where                                          |\n|---------------|------------------------------------------------|\n| documentation | http://mongodb.github.io/node-mongodb-native  |\n| api-doc        | http://mongodb.github.io/node-mongodb-native/3.0/api  |\n| source        | https://github.com/mongodb/node-mongodb-native |\n| mongodb       | http://www.mongodb.org                        |\n\n### Bugs / Feature Requests\n\nThink you’ve found a bug? Want to see a new feature in `node-mongodb-native`? Please open a\ncase in our issue management tool, JIRA:\n\n- Create an account and login [jira.mongodb.org](https://jira.mongodb.org).\n- Navigate to the NODE project [jira.mongodb.org/browse/NODE](https://jira.mongodb.org/browse/NODE).\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. NODE, PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\n### Questions and Bug Reports\n\n * Mailing List: [groups.google.com/forum/#!forum/node-mongodb-native](https://groups.google.com/forum/#!forum/node-mongodb-native)\n * JIRA: [jira.mongodb.org](http://jira.mongodb.org)\n\n### Change Log\n\nChange history can be found in [`HISTORY.md`](HISTORY.md).\n\n# Installation\n\nThe recommended way to get started using the Node.js 3.0 driver is by using the `npm` (Node Package Manager) to install the dependency in your project.\n\n## MongoDB Driver\n\nGiven that you have created your own project using `npm init` we install the MongoDB driver and its dependencies by executing the following `npm` command.\n\n```bash\nnpm install mongodb --save\n```\n\nThis will download the MongoDB driver and add a dependency entry in your `package.json` file.\n\nYou can also use the [Yarn](https://yarnpkg.com/en) package manager.\n\n## Troubleshooting\n\nThe MongoDB driver depends on several other packages. These are:\n\n* [mongodb-core](https://github.com/mongodb-js/mongodb-core)\n* [bson](https://github.com/mongodb/js-bson)\n* [kerberos](https://github.com/mongodb-js/kerberos)\n* [node-gyp](https://github.com/nodejs/node-gyp)\n\nThe `kerberos` package is a C++ extension that requires a build environment to be installed on your system. You must be able to build Node.js itself in order to compile and install the `kerberos` module. Furthermore, the `kerberos` module requires the MIT Kerberos package to correctly compile on UNIX operating systems. Consult your UNIX operation system package manager for what libraries to install.\n\n**Windows already contains the SSPI API used for Kerberos authentication. However, you will need to install a full compiler tool chain using Visual Studio C++ to correctly install the Kerberos extension.**\n\n### Diagnosing on UNIX\n\nIf you don’t have the build-essentials, this module won’t build. In the case of Linux, you will need gcc, g++, Node.js with all the headers and Python. The easiest way to figure out what’s missing is by trying to build the Kerberos project. You can do this by performing the following steps.\n\n```bash\ngit clone https://github.com/mongodb-js/kerberos\ncd kerberos\nnpm install\n```\n\nIf all the steps complete, you have the right toolchain installed. If you get the error \"node-gyp not found,\" you need to install `node-gyp` globally:\n\n```bash\nnpm install -g node-gyp\n```\n\nIf it correctly compiles and runs the tests you are golden. We can now try to install the `mongod` driver by performing the following command.\n\n```bash\ncd yourproject\nnpm install mongodb --save\n```\n\nIf it still fails the next step is to examine the npm log. Rerun the command but in this case in verbose mode.\n\n```bash\nnpm --loglevel verbose install mongodb\n```\n\nThis will print out all the steps npm is performing while trying to install the module.\n\n### Diagnosing on Windows\n\nA compiler tool chain known to work for compiling `kerberos` on Windows is the following.\n\n* Visual Studio C++ 2010 (do not use higher versions)\n* Windows 7 64bit SDK\n* Python 2.7 or higher\n\nOpen the Visual Studio command prompt. Ensure `node.exe` is in your path and install `node-gyp`.\n\n```bash\nnpm install -g node-gyp\n```\n\nNext, you will have to build the project manually to test it. Clone the repo, install dependencies and rebuild:\n\n```bash\ngit clone https://github.com/christkv/kerberos.git\ncd kerberos\nnpm install\nnode-gyp rebuild\n```\n\nThis should rebuild the driver successfully if you have everything set up correctly.\n\n### Other possible issues\n\nYour Python installation might be hosed making gyp break. Test your deployment environment first by trying to build Node.js itself on the server in question, as this should unearth any issues with broken packages (and there are a lot of broken packages out there).\n\nAnother tip is to ensure your user has write permission to wherever the Node.js modules are being installed.\n\n## Quick Start\n\nThis guide will show you how to set up a simple application using Node.js and MongoDB. Its scope is only how to set up the driver and perform the simple CRUD operations. For more in-depth coverage, see the [tutorials](docs/reference/content/tutorials/main.md).\n\n### Create the `package.json` file\n\nFirst, create a directory where your application will live.\n\n```bash\nmkdir myproject\ncd myproject\n```\n\nEnter the following command and answer the questions to create the initial structure for your new project:\n\n```bash\nnpm init\n```\n\nNext, install the driver dependency.\n\n```bash\nnpm install mongodb --save\n```\n\nYou should see **NPM** download a lot of files. Once it's done you'll find all the downloaded packages under the **node_modules** directory.\n\n### Start a MongoDB Server\n\nFor complete MongoDB installation instructions, see [the manual](https://docs.mongodb.org/manual/installation/).\n\n1. Download the right MongoDB version from [MongoDB](https://www.mongodb.org/downloads)\n2. Create a database directory (in this case under **/data**).\n3. Install and start a ``mongod`` process.\n\n```bash\nmongod --dbpath=/data\n```\n\nYou should see the **mongod** process start up and print some status information.\n\n### Connect to MongoDB\n\nCreate a new **app.js** file and add the following code to try out some basic CRUD\noperations using the MongoDB driver.\n\nAdd code to connect to the server and the database **myproject**:\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\n// Database Name\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n\n  client.close();\n});\n```\n\nRun your app from the command line with:\n\n```bash\nnode app.js\n```\n\nThe application should print **Connected successfully to server** to the console.\n\n### Insert a Document\n\nAdd to **app.js** the following function which uses the **insertMany**\nmethod to add three documents to the **documents** collection.  \n\n```js\nconst insertDocuments = function(db, callback) {\n  // Get the documents collection\n  const collection = db.collection('documents');\n  // Insert some documents\n  collection.insertMany([\n    {a : 1}, {a : 2}, {a : 3}\n  ], function(err, result) {\n    assert.equal(err, null);\n    assert.equal(3, result.result.n);\n    assert.equal(3, result.ops.length);\n    console.log(\"Inserted 3 documents into the collection\");\n    callback(result);\n  });\n}\n```\n\nThe **insert** command returns an object with the following fields:\n\n* **result** Contains the result document from MongoDB\n* **ops** Contains the documents inserted with added **_id** fields\n* **connection** Contains the connection used to perform the insert\n\nAdd the following code to call the **insertDocuments** function:\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\n// Database Name\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n\n  insertDocuments(db, function() {\n    client.close();\n  });\n});\n```\n\nRun the updated **app.js** file:\n\n```bash\nnode app.js\n```\n\nThe operation returns the following output:\n\n```bash\nConnected successfully to server\nInserted 3 documents into the collection\n```\n\n### Find All Documents\n\nAdd a query that returns all the documents.\n\n```js\nconst findDocuments = function(db, callback) {\n  // Get the documents collection\n  const collection = db.collection('documents');\n  // Find some documents\n  collection.find({}).toArray(function(err, docs) {\n    assert.equal(err, null);\n    console.log(\"Found the following records\");\n    console.log(docs)\n    callback(docs);\n  });\n}\n```\n\nThis query returns all the documents in the **documents** collection. Add the **findDocument** method to the **MongoClient.connect** callback:\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\n// Database Name\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected correctly to server\");\n\n  const db = client.db(dbName);\n\n  insertDocuments(db, function() {\n    findDocuments(db, function() {\n      client.close();\n    });\n  });\n});\n```\n\n### Find Documents with a Query Filter\n\nAdd a query filter to find only documents which meet the query criteria.\n\n```js\nconst findDocuments = function(db, callback) {\n  // Get the documents collection\n  const collection = db.collection('documents');\n  // Find some documents\n  collection.find({'a': 3}).toArray(function(err, docs) {\n    assert.equal(err, null);\n    console.log(\"Found the following records\");\n    console.log(docs);\n    callback(docs);\n  });\n}\n```\n\nOnly the documents which match ``'a' : 3`` should be returned.\n\n### Update a document\n\nThe following operation updates a document in the **documents** collection.\n\n```js\nconst updateDocument = function(db, callback) {\n  // Get the documents collection\n  const collection = db.collection('documents');\n  // Update document where a is 2, set b equal to 1\n  collection.updateOne({ a : 2 }\n    , { $set: { b : 1 } }, function(err, result) {\n    assert.equal(err, null);\n    assert.equal(1, result.result.n);\n    console.log(\"Updated the document with the field a equal to 2\");\n    callback(result);\n  });  \n}\n```\n\nThe method updates the first document where the field **a** is equal to **2** by adding a new field **b** to the document set to **1**. Next, update the callback function from **MongoClient.connect** to include the update method.\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\n// Database Name\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n\n  insertDocuments(db, function() {\n    updateDocument(db, function() {\n      client.close();\n    });\n  });\n});\n```\n\n### Remove a document\n\nRemove the document where the field **a** is equal to **3**.\n\n```js\nconst removeDocument = function(db, callback) {\n  // Get the documents collection\n  const collection = db.collection('documents');\n  // Delete document where a is 3\n  collection.deleteOne({ a : 3 }, function(err, result) {\n    assert.equal(err, null);\n    assert.equal(1, result.result.n);\n    console.log(\"Removed the document with the field a equal to 3\");\n    callback(result);\n  });    \n}\n```\n\nAdd the new method to the **MongoClient.connect** callback function.\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\n// Database Name\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n\n  insertDocuments(db, function() {\n    updateDocument(db, function() {\n      removeDocument(db, function() {\n        client.close();\n      });\n    });\n  });\n});\n```\n\n### Index a Collection\n\n[Indexes](https://docs.mongodb.org/manual/indexes/) can improve your application's\nperformance. The following function creates an index on the **a** field in the\n**documents** collection.\n\n```js\nconst indexCollection = function(db, callback) {\n  db.collection('documents').createIndex(\n    { \"a\": 1 },\n      null,\n      function(err, results) {\n        console.log(results);\n        callback();\n    }\n  );\n};\n```\n\nAdd the ``indexCollection`` method to your app:\n\n```js\nconst MongoClient = require('mongodb').MongoClient;\nconst assert = require('assert');\n\n// Connection URL\nconst url = 'mongodb://localhost:27017';\n\nconst dbName = 'myproject';\n\n// Use connect method to connect to the server\nMongoClient.connect(url, function(err, client) {\n  assert.equal(null, err);\n  console.log(\"Connected successfully to server\");\n\n  const db = client.db(dbName);\n\n  insertDocuments(db, function() {\n    indexCollection(db, function() {\n      client.close();\n    });\n  });\n});\n```\n\nFor more detailed information, see the [tutorials](docs/reference/content/tutorials/main.md).\n\n## Next Steps\n\n * [MongoDB Documentation](http://mongodb.org)\n * [Read about Schemas](http://learnmongodbthehardway.com)\n * [Star us on GitHub](https://github.com/mongodb/node-mongodb-native)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/mongodb/node-mongodb-native.git"
  },
  "scripts": {
    "changelog": "conventional-changelog -p angular -i HISTORY.md -s",
    "coverage": "istanbul cover mongodb-test-runner -- -t 60000  test/unit test/functional",
    "format": "prettier --print-width 100 --tab-width 2 --single-quote --write 'test/**/*.js' 'lib/**/*.js'",
    "lint": "eslint lib test",
    "test": "npm run lint && mongodb-test-runner -t 60000 test/unit test/functional"
  },
  "version": "3.0.5"
}

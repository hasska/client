{
  "_args": [
    [
      {
        "raw": "stack-chain@1.3.x",
        "scope": null,
        "escapedName": "stack-chain",
        "name": "stack-chain",
        "rawSpec": "1.3.x",
        "spec": ">=1.3.0 <1.4.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/clarify"
    ]
  ],
  "_from": "stack-chain@>=1.3.0 <1.4.0",
  "_id": "stack-chain@1.3.7",
  "_inCache": true,
  "_location": "/stack-chain",
  "_nodeVersion": "5.7.1",
  "_npmOperationalInternal": {
    "host": "packages-13-west.internal.npmjs.com",
    "tmp": "tmp/stack-chain-1.3.7.tgz_1457964892201_0.46984840696677566"
  },
  "_npmUser": {
    "name": "andreasmadsen",
    "email": "amwebdk@gmail.com"
  },
  "_npmVersion": "3.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stack-chain@1.3.x",
    "scope": null,
    "escapedName": "stack-chain",
    "name": "stack-chain",
    "rawSpec": "1.3.x",
    "spec": ">=1.3.0 <1.4.0",
    "type": "range"
  },
  "_requiredBy": [
    "/clarify",
    "/trace"
  ],
  "_resolved": "https://registry.npmjs.org/stack-chain/-/stack-chain-1.3.7.tgz",
  "_shasum": "d192c9ff4ea6a22c94c4dd459171e3f00cea1285",
  "_shrinkwrap": null,
  "_spec": "stack-chain@1.3.x",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/clarify",
  "author": {
    "name": "Andreas Madsen",
    "email": "amwebdk@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/AndreasMadsen/stack-chain/issues"
  },
  "dependencies": {},
  "description": "API for combining call site modifiers",
  "devDependencies": {
    "tap": "2.x.x",
    "uglify-js": "2.5.x"
  },
  "directories": {},
  "dist": {
    "shasum": "d192c9ff4ea6a22c94c4dd459171e3f00cea1285",
    "tarball": "https://registry.npmjs.org/stack-chain/-/stack-chain-1.3.7.tgz"
  },
  "gitHead": "2445f95c5ffdfc9da36703da1be236745bb4a26e",
  "homepage": "https://github.com/AndreasMadsen/stack-chain#readme",
  "keywords": [
    "stack",
    "chain",
    "trace",
    "call site",
    "concat",
    "format"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "andreasmadsen",
      "email": "amwebdk@gmail.com"
    }
  ],
  "name": "stack-chain",
  "optionalDependencies": {},
  "readme": "#stack-chain [![Build Status](https://secure.travis-ci.org/AndreasMadsen/stack-chain.png)](http://travis-ci.org/AndreasMadsen/stack-chain)\n\n> API for combining call site modifyers\n\n## Installation\n\n```sheel\nnpm install stack-chain\n```\n## API documentation\n\n```JavaScript\nvar chain = require('stack-chain');\n```\n\nWhen the `Error.stack` getter is executed, the `stack-chain` will perform the\nfollowing:\n\n1. execute the `modifiers` attached by `chain.extend`.\n2. execute the `modifiers` attached by `chain.filter`.\n3. execute the `formater` set by `chain.format.replace`.\n\n### chain.extend.attach(modifier)\n### chain.filter.attach(modifier)\n\nWill modify the callSite array. Note you shouldn't format the stack trace.\n\nThe `modifier` is a function there takes two arguments `error` and `frames`.\n\n* `error` is the `Error` object.\n* `frames` is an array of `callSite` objects, see\n  [v8 documentation](http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\n  for details.\n\nWhen the `modifier` is done, it should `return` a modified `frames` array.\n\n```JavaScript\nchain.filter.attach(function (error, frames) {\n\n    // Filter out traces related to this file\n    var rewrite = frames.filter(function (callSite) {\n      return callSite.getFileName() !== module.filename;\n    });\n\n    return rewrite;\n});\n```\n\n### chain.extend.deattach(modifier)\n### chain.filter.deattach(modifier)\n\nRemoves a `modifier` function from the list of `modifiers`.\n\n```JavaScript\nvar modifier = function () {};\n\n// Attach modifier function\nchain.extend.attach(modifier);\n\n// Deattach modifier function\nchain.extend.deattach(modifier);\n```\n\n### chain.format.replace(formater)\n\nReplaces the default v8 `formater`. The new `formater` takes a two arguments\n`error` and `frames`.\n\n* `error` is the `Error` object.\n* `callSites` is an array of `callSite` objects, see\n  [v8 documentation](http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\n  for details.\n\nWhen the `formater` is done, it should `return` a `string`. The `string` will\nwhat `Error.stack` returns.\n\n```JavaScript\nchain.format.replace(function (error, frames) {\n  var lines = [];\n\n  lines.push(error.toString());\n\n  for (var i = 0; i < frames.length; i++) {\n    lines.push(\"    at \" + frames[i].toString());\n  }\n\n  return lines.join(\"\\n\");\n});\n```\n\n### chain.format.restore()\n\nWill restore the default v8 `formater`. Note that dude to the nature of v8\n`Error` objects, if one of the getters `Error.stack` or `Error.callSite` has\nalready executed, the value of `Error.stack` won't change.\n\n### chain.callSite([options])\n\nThis will return the unmodified `callSite` array from the current tick. This\nis a performance shortcut, as it does not require generating the `.stack`\nstring. This behaviour is different from the `Error().callSite` properties.\n\nWhile this is mostly generating `callSite` in hot code, it can be useful to\ndo some modification on the array. The `options` object, supports the following:\n\n```javascript\noptions = {\n  // (default false) run the extenders on the callSite array.\n  extend: true,\n\n  // (default false) run the filters on the callSite array.\n  filter: true,\n\n  // (default 0) before running extend or filter methods, slice of some of the\n  // end. This can be useful for hiding the place from where you called this\n  // function.\n  slice: 2\n}\n```\n\n### Error.stackTraceLimit\n\nThis limites the size of the `callSites` array. The default value is 10, and\ncan be set to any positive number including `Infinity`. See\n[v8 documentation](http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi)\nfor details.\n\n### Error().callSite.original\n\nReturns the original `callSite` array.\n\n### Error().callSite.mutated\n\nReturns the mutated `callSite` array, that is after `extend` and `filter`\nis applied. The array will not excite the `Error.stackTraceLimit`.\n\n## License\n\n**The software is license under \"MIT\"**\n\n> Copyright (c) 2012 Andreas Madsen\n>\n> Permission is hereby granted, free of charge, to any person obtaining a copy\n> of this software and associated documentation files (the \"Software\"), to deal\n> in the Software without restriction, including without limitation the rights\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n> copies of the Software, and to permit persons to whom the Software is\n> furnished to do so, subject to the following conditions:\n>\n> The above copyright notice and this permission notice shall be included in\n> all copies or substantial portions of the Software.\n>\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n> THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/AndreasMadsen/stack-chain.git"
  },
  "scripts": {
    "test": "tap ./test/simple"
  },
  "version": "1.3.7"
}

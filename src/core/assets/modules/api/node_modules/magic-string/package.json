{
  "_args": [
    [
      {
        "raw": "magic-string@^0.22.4",
        "scope": null,
        "escapedName": "magic-string",
        "name": "magic-string",
        "rawSpec": "^0.22.4",
        "spec": ">=0.22.4 <0.23.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/buble"
    ]
  ],
  "_from": "magic-string@>=0.22.4 <0.23.0",
  "_id": "magic-string@0.22.5",
  "_inCache": true,
  "_location": "/magic-string",
  "_nodeVersion": "9.5.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/magic-string_0.22.5_1521039125131_0.5786631180712392"
  },
  "_npmUser": {
    "name": "alangpierce",
    "email": "alangpierce@gmail.com"
  },
  "_npmVersion": "5.7.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "magic-string@^0.22.4",
    "scope": null,
    "escapedName": "magic-string",
    "name": "magic-string",
    "rawSpec": "^0.22.4",
    "spec": ">=0.22.4 <0.23.0",
    "type": "range"
  },
  "_requiredBy": [
    "/buble"
  ],
  "_resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.22.5.tgz",
  "_shasum": "8e9cf5afddf44385c1da5bc2a6a0dbd10b03657e",
  "_shrinkwrap": null,
  "_spec": "magic-string@^0.22.4",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/buble",
  "author": {
    "name": "Rich Harris"
  },
  "bugs": {
    "url": "https://github.com/rich-harris/magic-string/issues"
  },
  "dependencies": {
    "vlq": "^0.2.2"
  },
  "description": "Modify strings, generate sourcemaps",
  "devDependencies": {
    "buble": "^0.15.2",
    "codecov.io": "^0.1.6",
    "console-group": "^0.3.3",
    "eslint": "^4.5.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.5.0",
    "remap-istanbul": "^0.9.5",
    "resolve": "^1.4.0",
    "rollup": "^0.48.0",
    "rollup-plugin-buble": "^0.15.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^1.1.1",
    "source-map": "^0.5.6",
    "source-map-support": "^0.4.16"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-oreip9rJZkzvA8Qzk9HFs8fZGF/u7H/gtrE8EN6RjKJ9kh2HlC+yQ2QezifqTZfGyiuAV0dRv5a+y/8gBb1m9w==",
    "shasum": "8e9cf5afddf44385c1da5bc2a6a0dbd10b03657e",
    "tarball": "https://registry.npmjs.org/magic-string/-/magic-string-0.22.5.tgz",
    "fileCount": 10,
    "unpackedSize": 347442
  },
  "files": [
    "dist/*",
    "index.d.ts",
    "README.md"
  ],
  "gitHead": "581c1bfe3991662f972193271f2c44220a6ca556",
  "homepage": "https://github.com/rich-harris/magic-string#readme",
  "jsnext:main": "dist/magic-string.es.js",
  "keywords": [
    "string",
    "string manipulation",
    "sourcemap",
    "templating",
    "transpilation"
  ],
  "license": "MIT",
  "main": "dist/magic-string.cjs.js",
  "maintainers": [
    {
      "name": "alangpierce",
      "email": "alangpierce@gmail.com"
    },
    {
      "name": "rich_harris",
      "email": "richard.a.harris@gmail.com"
    }
  ],
  "module": "dist/magic-string.es.js",
  "name": "magic-string",
  "optionalDependencies": {},
  "readme": "# magic-string\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/Rich-Harris/magic-string\">\n    <img src=\"http://img.shields.io/travis/Rich-Harris/magic-string.svg\"\n         alt=\"build status\">\n  </a>\n  <a href=\"https://npmjs.org/package/magic-string\">\n    <img src=\"https://img.shields.io/npm/v/magic-string.svg\"\n         alt=\"npm version\">\n  </a>\n  <a href=\"https://github.com/Rich-Harris/magic-string/blob/master/LICENSE.md\">\n    <img src=\"https://img.shields.io/npm/l/magic-string.svg\"\n         alt=\"license\">\n  </a>\n  <a href=\"https://david-dm.org/Rich-Harris/magic-string\">\n    <img src=\"https://david-dm.org/Rich-Harris/magic-string.svg\"\n         alt=\"dependency status\">\n  </a>\n  <a href=\"http://codecov.io/github/Rich-Harris/magic-string?branch=master\">\n    <img src=\"http://codecov.io/github/Rich-Harris/magic-string/coverage.svg?branch=master\" alt=\"Coverage via Codecov\" />\n  </a>\n</p>\n\nSuppose you have some source code. You want to make some light modifications to it - replacing a few characters here and there, wrapping it with a header and footer, etc - and ideally you'd like to generate a source map at the end of it. You've thought about using something like [recast](https://github.com/benjamn/recast) (which allows you to generate an AST from some JavaScript, manipulate it, and reprint it with a sourcemap without losing your comments and formatting), but it seems like overkill for your needs (or maybe the source code isn't JavaScript).\n\nYour requirements are, frankly, rather niche. But they're requirements that I also have, and for which I made magic-string. It's a small, fast utility for manipulating strings and generating sourcemaps.\n\n## Installation\n\nmagic-string works in both node.js and browser environments. For node, install with npm:\n\n```bash\nnpm i magic-string\n```\n\nTo use in browser, grab the [magic-string.umd.js](https://unpkg.com/magic-string/dist/magic-string.umd.js) file and add it to your page:\n\n```html\n<script src='magic-string.umd.js'></script>\n```\n\n(It also works with various module systems, if you prefer that sort of thing - it has a dependency on [vlq](https://github.com/Rich-Harris/vlq).)\n\n## Usage\n\nThese examples assume you're in node.js, or something similar:\n\n```js\nvar MagicString = require( 'magic-string' );\nvar s = new MagicString( 'problems = 99' );\n\ns.overwrite( 0, 8, 'answer' );\ns.toString(); // 'answer = 99'\n\ns.overwrite( 11, 13, '42' ); // character indices always refer to the original string\ns.toString(); // 'answer = 42'\n\ns.prepend( 'var ' ).append( ';' ); // most methods are chainable\ns.toString(); // 'var answer = 42;'\n\nvar map = s.generateMap({\n  source: 'source.js',\n  file: 'converted.js.map',\n  includeContent: true\n}); // generates a v3 sourcemap\n\nrequire( 'fs' ).writeFile( 'converted.js', s.toString() );\nrequire( 'fs' ).writeFile( 'converted.js.map', map.toString() );\n```\n\nYou can pass an options argument:\n\n```js\nvar s = new MagicString( someCode, {\n  // both these options will be used if you later\n  // call `bundle.addSource( s )` - see below\n  filename: 'foo.js',\n  indentExclusionRanges: [/*...*/]\n});\n```\n\n## Methods\n\n### s.addSourcemapLocation( index )\n\nAdds the specified character index (with respect to the original string) to sourcemap mappings, if `hires` is `false` (see below).\n\n### s.append( content )\n\nAppends the specified content to the end of the string. Returns `this`.\n\n### s.appendLeft( index, content )\n\nAppends the specified `content` at the `index` in the original string. If a range *ending* with `index` is subsequently moved, the insert will be moved with it. Returns `this`. See also `s.prependLeft(...)`.\n\n### s.appendRight( index, content )\n\nAppends the specified `content` at the `index` in the original string. If a range *starting* with `index` is subsequently moved, the insert will be moved with it. Returns `this`. See also `s.prependRight(...)`.\n\n### s.clone()\n\nDoes what you'd expect.\n\n### s.generateMap( options )\n\nGenerates a [version 3 sourcemap](https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit). All options are, well, optional:\n\n* `file` - the filename where you plan to write the sourcemap\n* `source` - the filename of the file containing the original source\n* `includeContent` - whether to include the original content in the map's `sourcesContent` array\n* `hires` - whether the mapping should be high-resolution. Hi-res mappings map every single character, meaning (for example) your devtools will always be able to pinpoint the exact location of function calls and so on. With lo-res mappings, devtools may only be able to identify the correct line - but they're quicker to generate and less bulky. If sourcemap locations have been specified with `s.addSourceMapLocation()`, they will be used here.\n\nThe returned sourcemap has two (non-enumerable) methods attached for convenience:\n\n* `toString` - returns the equivalent of `JSON.stringify(map)`\n* `toUrl` - returns a DataURI containing the sourcemap. Useful for doing this sort of thing:\n\n```js\ncode += '\\n//# sourceMappingURL=' + map.toUrl();\n```\n\n### s.indent( prefix[, options] )\n\nPrefixes each line of the string with `prefix`. If `prefix` is not supplied, the indentation will be guessed from the original content, falling back to a single tab character. Returns `this`.\n\nThe `options` argument can have an `exclude` property, which is an array of `[start, end]` character ranges. These ranges will be excluded from the indentation - useful for (e.g.) multiline strings.\n\n### s.insertLeft( index, content )\n\n**DEPRECATED** since 0.17 – use `s.appendLeft(...)` instead\n\n### s.insertRight( index, content )\n\n**DEPRECATED** since 0.17 – use `s.prependRight(...)` instead\n\n### s.locate( index )\n\n**DEPRECATED** since 0.10 – see [#30](https://github.com/Rich-Harris/magic-string/pull/30)\n\n### s.locateOrigin( index )\n\n**DEPRECATED** since 0.10 – see [#30](https://github.com/Rich-Harris/magic-string/pull/30)\n\n### s.move( start, end, newIndex )\n\nMoves the characters from `start` and `end` to `index`. Returns `this`.\n\n### s.overwrite( start, end, content[, options] )\n\nReplaces the characters from `start` to `end` with `content`. The same restrictions as `s.remove()` apply. Returns `this`.\n\nThe fourth argument is optional. It can have a `storeName` property — if `true`, the original name will be stored for later inclusion in a sourcemap's `names` array — and a `contentOnly` property which determines whether only the content is overwritten, or anything that was appended/prepended to the range as well.\n\n### s.prepend( content )\n\nPrepends the string with the specified content. Returns `this`.\n\n### s.prependLeft ( index, content )\n\nSame as `s.appendLeft(...)`, except that the inserted content will go *before* any previous appends or prepends at `index`\n\n### s.prependRight ( index, content )\n\nSame as `s.appendRight(...)`, except that the inserted content will go *before* any previous appends or prepends at `index`\n\n### s.remove( start, end )\n\nRemoves the characters from `start` to `end` (of the original string, **not** the generated string). Removing the same content twice, or making removals that partially overlap, will cause an error. Returns `this`.\n\n### s.slice( start, end )\n\nReturns the content of the generated string that corresponds to the slice between `start` and `end` of the original string. Throws error if the indices are for characters that were already removed.\n\n### s.snip( start, end )\n\nReturns a clone of `s`, with all content before the `start` and `end` characters of the original string removed.\n\n### s.toString()\n\nReturns the generated string.\n\n### s.trim([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the start and end. Returns `this`.\n\n### s.trimStart([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the start. Returns `this`.\n\n### s.trimEnd([ charType ])\n\nTrims content matching `charType` (defaults to `\\s`, i.e. whitespace) from the end. Returns `this`.\n\n### s.trimLines()\n\nRemoves empty lines from the start and end. Returns `this`.\n\n## Bundling\n\nTo concatenate several sources, use `MagicString.Bundle`:\n\n```js\nvar bundle = new MagicString.Bundle();\n\nbundle.addSource({\n  filename: 'foo.js',\n  content: new MagicString( 'var answer = 42;' )\n});\n\nbundle.addSource({\n  filename: 'bar.js',\n  content: new MagicString( 'console.log( answer )' )\n});\n\n// Advanced: a source can include an `indentExclusionRanges` property\n// alongside `filename` and `content`. This will be passed to `s.indent()`\n// - see documentation above\n\nbundle.indent() // optionally, pass an indent string, otherwise it will be guessed\n  .prepend( '(function () {\\n' )\n  .append( '}());' );\n\nbundle.toString();\n// (function () {\n//   var answer = 42;\n//   console.log( answer );\n// }());\n\n// options are as per `s.generateMap()` above\nvar map = bundle.generateMap({\n  file: 'bundle.js',\n  includeContent: true,\n  hires: true\n});\n```\n\nAs an alternative syntax, if you a) don't have `filename` or `indentExclusionRanges` options, or b) passed those in when you used `new MagicString(...)`, you can simply pass the `MagicString` instance itself:\n\n```js\nvar bundle = new MagicString.Bundle();\nvar source = new MagicString( someCode, {\n  filename: 'foo.js'\n});\n\nbundle.addSource( source );\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/rich-harris/magic-string.git"
  },
  "scripts": {
    "build": "rollup -c",
    "ci": "npm run test-coverage && codecov < coverage/coverage-remapped.lcov",
    "lint": "eslint src test",
    "posttest-coverage": "remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped.json -b dist && remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped.lcov -t lcovonly -b dist && remap-istanbul -i coverage/coverage-final.json -o coverage/coverage-remapped -t html -b dist",
    "prepublish": "rm -rf dist && npm test",
    "pretest": "npm run build",
    "pretest-coverage": "npm run build",
    "test": "mocha",
    "test-coverage": "rm -rf coverage/* && istanbul cover --report json node_modules/.bin/_mocha -- -u exports -R spec test/*.js",
    "watch": "rollup -cw"
  },
  "typings": "index.d.ts",
  "version": "0.22.5"
}

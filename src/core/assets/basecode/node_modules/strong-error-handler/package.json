{
  "_args": [
    [
      {
        "raw": "strong-error-handler@^1.0.1",
        "scope": null,
        "escapedName": "strong-error-handler",
        "name": "strong-error-handler",
        "rawSpec": "^1.0.1",
        "spec": ">=1.0.1 <2.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode"
    ]
  ],
  "_from": "strong-error-handler@>=1.0.1 <2.0.0",
  "_id": "strong-error-handler@1.2.1",
  "_inCache": true,
  "_location": "/strong-error-handler",
  "_nodeVersion": "4.7.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/strong-error-handler-1.2.1.tgz_1485785123156_0.25425537512637675"
  },
  "_npmUser": {
    "name": "bajtos",
    "email": "mbajtoss@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {
    "esprima": "4.0.0",
    "estraverse": "4.2.0",
    "g11n-pipeline": "2.0.5",
    "htmlparser2": "3.9.2",
    "lodash": "4.17.5",
    "md5": "2.2.1",
    "mkdirp": "0.5.1",
    "mktmpdir": "0.1.1",
    "ms": "2.0.0",
    "optional": "0.1.4",
    "os-locale": "2.1.0",
    "posix-getopt": "1.2.0",
    "word-count": "0.2.2",
    "xtend": "4.0.1",
    "yamljs": "0.3.0"
  },
  "_requested": {
    "raw": "strong-error-handler@^1.0.1",
    "scope": null,
    "escapedName": "strong-error-handler",
    "name": "strong-error-handler",
    "rawSpec": "^1.0.1",
    "spec": ">=1.0.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/strong-error-handler/-/strong-error-handler-1.2.1.tgz",
  "_shasum": "7edfe77a4244695154516c63d14ddb57361a03fc",
  "_shrinkwrap": null,
  "_spec": "strong-error-handler@^1.0.1",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode",
  "browser": {
    "strong-error-handler": false
  },
  "bugs": {
    "url": "https://github.com/strongloop/strong-error-handler/issues"
  },
  "ci": {
    "downstreamIgnoreList": [
      "dashboard-controller"
    ]
  },
  "dependencies": {
    "accepts": "^1.3.3",
    "debug": "^2.2.0",
    "ejs": "^2.4.2",
    "http-status": "^0.2.2",
    "js2xmlparser": "^2.0.2",
    "strong-globalize": "^2.6.7"
  },
  "description": "Error handler for use in development and production environments.",
  "devDependencies": {
    "chai": "^2.1.1",
    "eslint": "^2.13.1",
    "eslint-config-loopback": "^4.0.0",
    "express": "^4.13.4",
    "mocha": "^2.1.0",
    "supertest": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "7edfe77a4244695154516c63d14ddb57361a03fc",
    "tarball": "https://registry.npmjs.org/strong-error-handler/-/strong-error-handler-1.2.1.tgz"
  },
  "gitHead": "c8845ff4480bce5799e958cf220705bfb144b714",
  "homepage": "https://github.com/strongloop/strong-error-handler#readme",
  "license": "MIT",
  "main": "lib/handler.js",
  "maintainers": [
    {
      "name": "0candy",
      "email": "ngcandy@ca.ibm.com"
    },
    {
      "name": "amir-61",
      "email": "amirali.jfr61@gmail.com"
    },
    {
      "name": "bajtos",
      "email": "mbajtoss@gmail.com"
    },
    {
      "name": "davidcheung",
      "email": "davidcheung@live.ca"
    },
    {
      "name": "hacksparrow",
      "email": "captain@hacksparrow.com"
    },
    {
      "name": "ibmcloud-admin",
      "email": "rmg@ca.ibm.com"
    },
    {
      "name": "jannyhou2016",
      "email": "juehou@ca.ibm.com"
    },
    {
      "name": "loay",
      "email": "gewily@ca.ibm.com"
    },
    {
      "name": "qpresley",
      "email": "qpresley@ca.ibm.com"
    },
    {
      "name": "rfeng",
      "email": "enjoyjava@gmail.com"
    },
    {
      "name": "ritch",
      "email": "skawful@gmail.com"
    },
    {
      "name": "rmg",
      "email": "r.m.graham@gmail.com"
    },
    {
      "name": "superkhau",
      "email": "superkhau@gmail.com"
    },
    {
      "name": "thegman",
      "email": "gpandya@live.com"
    },
    {
      "name": "tonyf-ibm",
      "email": "tffrench@us.ibm.com"
    }
  ],
  "name": "strong-error-handler",
  "optionalDependencies": {},
  "readme": "# strong-error-handler\n\nThis package is an error handler for use in both development (debug) and production environments.\n\nIn production mode, `strong-error-handler` omits details from error responses to prevent leaking sensitive information:\n\n- For 5xx errors, the output contains only the status code and the status name from the HTTP specification.\n- For 4xx errors, the output contains the full error message (`error.message`) and the contents of the `details`\n  property (`error.details`) that `ValidationError` typically uses to provide machine-readable details\n  about validation problems.\n\nIn debug mode, `strong-error-handler` returns full error stack traces and internal details of any error objects to the client in the HTTP responses.\n\n## Installation\n\n```bash\n$ npm install --save strong-error-handler\n```\n\n## Use\n\nIn an Express-based application:\n\n```js\nvar express = require('express');\nvar errorHandler = require('strong-error-handler');\n\nvar app = express();\n// setup your routes\n// `options` are set to default values. For more info, see `options` below.\n// app.use(errorHandler({ /* options, see below */ }));\napp.use(errorHandler({\n  debug: app.get('env') === 'development',\n  log: true,\n}));\n\napp.listen(3000);\n```\n\nIn LoopBack applications, add the following entry to `server/middleware.json`:\n\n```json\n{\n  \"final:after\": {\n    \"strong-error-handler\": {\n      \"params\": {\n         \"debug\": false,\n         \"log\": true\n       }\n    }\n  }\n}\n```\n\nIn general, `strong-error-handler` must be the last middleware function registered.\n\nThe above configuration will log errors to the server console, but not return stack traces in HTTP responses.\nFor details on configuration options, see below.\n\n### Response format and content type\n\nThe `strong-error-handler` package supports HTML and JSON responses:\n\n- When the object is a standard Error object, it returns the string provided by the stack property in HTML/text\n  responses.\n- When the object is a non-Error object, it returns the result of `util.inspect` in HTML/text responses.\n- For JSON responses, the result is an object with all enumerable properties from the object in the response.\n\nThe content type of the response depends on the request's `Accepts` header.\n\n-  For Accepts header `json` or `application/json`, the response content type is JSON.\n-  For Accepts header `html` or `text/html`, the response content type is HTML.\n\n*There are plans to support other formats such as Text and XML.*\n\n## Options\n\n| Option | Type | Default | Description |\n| ---- | ---- | ---- | ---- |\n| debug | Boolean&nbsp;&nbsp;&nbsp; | `false` | If `true`, HTTP responses include all error properties, including sensitive data such as file paths, URLs and stack traces. See [Example output](#example) below. |\n| log | Boolean | `true` |  If `true`, all errors are printed via `console.error`, including an array of fields (custom error properties) that are safe to include in response messages (both 4xx and 5xx). <br/> If `false`, sends only the error back in the response. |\n\n### Customizing log format\n\n**Express** \n\nTo use a different log format, add your own custom error-handling middleware then disable `errorHandler.log`. \nFor example, in an Express application:\n\n```js\napp.use(myErrorLogger());\napp.use(errorHandler({ log: false }));\n```\n\nIn general, add `strong-error-handler` as the last middleware function, just before calling `app.listen()`.\n\n**LoopBack**\n\nFor LoopBack applications, put custom error-logging middleware in a separate file; for example, `server/middleware/error-logger.js`:\n\n```\nmodule.exports = function(options) {\n  return function logError(err, req, res, next) {\n    console.log('unhandled error' ,err);\n    next(err);\n  };\n};\n```\n\nThen in `server/middleware.json`, specify your custom error logging function as follows:\n\n```\n{\n  // ...\n  \"final:after\": {\n    \"./middleware/error-logger\": {},\n    \"strong-error-handler\": {\n      \"params\": {\n        log: false\n      }\n    }\n}\n```\n\nThe default `middleware.development.json` file explicitly enables logging in strong-error-handler params, so you will need to change that file too.\n\n## Migration from old LoopBack error handler\n\nNOTE: This is only required for applications scaffolded with old versions of the `slc loopback` tool.\n\nTo migrate a LoopBack 2.x application to use `strong-error-handler`:\n\n1. In `package.json` dependencies, remove `\"errorhandler\": \"^x.x.x‚Äù,`\n1. Install the new error handler by entering the command:\n    <pre>npm install --save strong-error-handler</pre>\n1. In `server/config.json`, remove:\n    <pre>\n    \"remoting\": {\n      ...\n      \"errorHandler\": {\n        \"disableStackTrace\": false\n      }</pre>\n  and replace it with:\n  <pre>\n  \"remoting\": {\n    ...,\n    \"rest\": {\n      \"handleErrors\": false\n    }</pre>\n1. In `server/middleware.json`, remove:\n    <pre>\n    \"final:after\": {\n      \"loopback#errorHandler\": {}\n    }</pre>\n  and replace it with:\n    <pre>\n    \"final:after\": {\n      \"strong-error-handler\": {}\n    }</pre>\n1. Delete `server/middleware.production.json`.\n1. Create `server/middleware.development.json` containing:\n  <pre>\n  \"final:after\": {\n    \"strong-error-handler\": {\n      \"params\": {\n        \"debug\": true,\n        \"log\": true\n      }\n    }\n  }\n</pre>\n\nFor more information, see \n[Migrating apps to LoopBack 3.0](http://loopback.io/doc/en/lb3/Migrating-to-3.0.html#update-use-of-rest-error-handler).\n\n## Example\n\nError generated when `debug: false` :\n\n```\n{ error: { statusCode: 500, message: 'Internal Server Error' } }\n```\n\nError generated when `debug: true` :\n\n```\n{ error:\n  { statusCode: 500,\n  name: 'Error',\n  message: 'a test error message',\n  stack: 'Error: a test error message    \n  at Context.<anonymous> (User/strong-error-handler/test/handler.test.js:220:21)    \n  at callFnAsync (User/strong-error-handler/node_modules/mocha/lib/runnable.js:349:8)    \n  at Test.Runnable.run (User/strong-error-handler/node_modules/mocha/lib/runnable.js:301:7)    \n  at Runner.runTest (User/strong-error-handler/node_modules/mocha/lib/runner.js:422:10)    \n  at User/strong-error-handler/node_modules/mocha/lib/runner.js:528:12    \n  at next (User/strong-error-handler/node_modules/mocha/lib/runner.js:342:14)    \n  at User/strong-error-handler/node_modules/mocha/lib/runner.js:352:7    \n  at next (User/strong-error-handler/node_modules/mocha/lib/runner.js:284:14)    \n  at Immediate._onImmediate (User/strong-error-handler/node_modules/mocha/lib/runner.js:320:5)    \n  at tryOnImmediate (timers.js:543:15)    \n  at processImmediate [as _immediateCallback] (timers.js:523:5)' }}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/strongloop/strong-error-handler.git"
  },
  "scripts": {
    "lint": "eslint .",
    "posttest": "npm run lint",
    "test": "mocha"
  },
  "version": "1.2.1"
}

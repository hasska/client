{
  "_args": [
    [
      {
        "raw": "bintrees@1.0.1",
        "scope": null,
        "escapedName": "bintrees",
        "name": "bintrees",
        "rawSpec": "1.0.1",
        "spec": "1.0.1",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/tdigest"
    ]
  ],
  "_from": "bintrees@1.0.1",
  "_id": "bintrees@1.0.1",
  "_inCache": true,
  "_location": "/bintrees",
  "_nodeVersion": "0.12.1",
  "_npmUser": {
    "name": "vadimg",
    "email": "dimva13@gmail.com"
  },
  "_npmVersion": "2.7.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bintrees@1.0.1",
    "scope": null,
    "escapedName": "bintrees",
    "name": "bintrees",
    "rawSpec": "1.0.1",
    "spec": "1.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/tdigest"
  ],
  "_resolved": "https://registry.npmjs.org/bintrees/-/bintrees-1.0.1.tgz",
  "_shasum": "0e655c9b9c2435eaab68bf4027226d2b55a34524",
  "_shrinkwrap": null,
  "_spec": "bintrees@1.0.1",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/tdigest",
  "author": {
    "name": "Vadim Graboys",
    "email": "dimva13@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/vadimg/js_bintrees/issues"
  },
  "dependencies": {},
  "description": "Binary Search Trees",
  "devDependencies": {
    "jshint": "0.5.9",
    "nodeunit": "0.9.1",
    "reunion": "0.0.0",
    "underscore": "1.3.1"
  },
  "directories": {
    "lib": "lib"
  },
  "dist": {
    "shasum": "0e655c9b9c2435eaab68bf4027226d2b55a34524",
    "tarball": "https://registry.npmjs.org/bintrees/-/bintrees-1.0.1.tgz"
  },
  "gitHead": "cfae7fcb27ea2550f9c6aeb81cebef6a37f7783e",
  "homepage": "https://github.com/vadimg/js_bintrees#readme",
  "keywords": [
    "binary tree",
    "red black tree",
    "red-black tree",
    "redblack tree"
  ],
  "main": "./index.js",
  "maintainers": [
    {
      "name": "vadimg",
      "email": "dimva13@gmail.com"
    }
  ],
  "name": "bintrees",
  "optionalDependencies": {},
  "readme": "Binary Trees [![Build Status](https://secure.travis-ci.org/vadimg/js_bintrees.png?branch=master)](http://travis-ci.org/vadimg/js_bintrees)\n============\n\nThis package provides Binary and Red-Black Search Trees written in Javascript. It is released under the MIT License.\n\nBinary Search Trees are a good way to store data in sorted order. A Red-Black tree is a variation of a Binary Tree that balances itself.\n\nAlgorithms were taken from Julienne Walker: http://eternallyconfuzzled.com/jsw_home.aspx\n\nTrees\n------------\n\n* BinTree - Binary Search Tree\n* RBTree - Red-Black Tree\n\nQuickstart\n------------\nnode.js:\n\n```\nnpm install bintrees\n```\n\n```javascript\nvar RBTree = require('bintrees').RBTree;\n\nvar tree = new RBTree(function(a, b) { return a - b; });\n\ntree.insert(2);\ntree.insert(-3);\n```\n\nsee examples/node.js for more info\n\nIn the browser:\n\n```html\n<script src=\"/path/to/rbtree.js\"></script>\n<script>\n    var tree = new RBTree(function(a, b) { return a - b; });\n    tree.insert(0);\n    tree.insert(1);\n</script>\n```\n\nsee examples/client.html for more info\n\nConstructor\n------------\n\nRequires 1 argument: a comparator function f(a,b) which returns:\n* 0 if a == b\n* >0 if a > b\n* <0 if a < b\n\nMethods\n------------\n\n### insert(item)\n> Inserts the item into the tree. Returns true if inserted, false if duplicate.\n\n### remove(item)\n> Removes the item from the tree. Returns true if removed, false if not found.\n\n### size\n> Number of nodes in the tree.\n\n### clear()\n> Removes all nodes from the tree.\n\n### find(item)\n> Returns node data if found, null otherwise.\n\n### findIter(item)\n> Returns an iterator to the node if found, null otherwise.\n\n### lowerBound(item)\n> Returns an iterator to the tree node at or immediately after the item. Returns null-iterator if tree is empty.\n>> __NOTE: Changed in version 1.0.0 to match C++ lower_bound__\n\n### upperBound(item)\n> Returns an iterator to the tree node immediately after the item. Returns null-iterator if tree is empty.\n>> __NOTE: Changed in version 1.0.0 to match C++ upper_bound__\n\n### min()\n> Returns the min node data in the tree, or null if the tree is empty.\n\n### max()\n> Returns the max node data in the tree, or null if the tree is empty.\n\n### each(f)\n> Calls f on each node's data, in order.\n\n### reach(f)\n> Calls f on each node's data, in reverse order.\n\n### iterator()\n> Returns a null-iterator. See __Iterators__ section below.\n\nIterators\n------------\n\ntree.iterator() will return a null-iterator. On a null iterator,\n* next() will return the first element in the tree\n* prev() will return the last element in the tree\n\nOtherwise,\n* next() will return the next element\n* prev() will return the previous element\n* data() will return the node the iterator is pointing to\n\nWhen iteration reaches the end, the iterator becomes a null-iterator again.\n\nForward iteration example:\n\n```javascript\nvar it=tree.iterator(), item;\nwhile((item = it.next()) !== null) {\n    // do stuff with item\n}\n```\n\nIf you are iterating forward through the tree, you can always call prev() to go back, and vice versa.\n\n__NOTE:__ iterators become invalid when you add or remove elements from the tree.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vadimg/js_bintrees.git"
  },
  "scripts": {
    "test": "nodeunit ./test/test_*.js && jshint lib/*.js index.js"
  },
  "version": "1.0.1"
}

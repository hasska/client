{
  "_args": [
    [
      {
        "raw": "swagger-stats",
        "scope": null,
        "escapedName": "swagger-stats",
        "name": "swagger-stats",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode"
    ]
  ],
  "_from": "swagger-stats@latest",
  "_id": "swagger-stats@0.95.2",
  "_inCache": true,
  "_location": "/swagger-stats",
  "_nodeVersion": "8.9.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/swagger-stats-0.95.2.tgz_1514930666721_0.540456724120304"
  },
  "_npmUser": {
    "name": "sv2",
    "email": "sv2@slanatech.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "swagger-stats",
    "scope": null,
    "escapedName": "swagger-stats",
    "name": "swagger-stats",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/swagger-stats/-/swagger-stats-0.95.2.tgz",
  "_shasum": "41d1e122b581c5b7e3fecb103a74367a3ff38592",
  "_shrinkwrap": null,
  "_spec": "swagger-stats",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode",
  "author": {
    "name": "https://github.com/sv2"
  },
  "bugs": {
    "url": "https://github.com/slanatech/swagger-stats/issues",
    "email": "sv2@slana.tech"
  },
  "dependencies": {
    "basic-auth": "^2.0.0",
    "cookies": "^0.7.1",
    "debug": "^3.1.0",
    "moment": "^2.19.3",
    "path-to-regexp": "^2.1.0",
    "prom-client": "^10.2.2",
    "request": "^2.83.0",
    "uuid": "^3.1.0"
  },
  "description": "API Telemetry and APM. Trace API calls and Monitor API performance, health and usage statistics in Node.js Microservices, based on express routes and Swagger (Open API) specification",
  "devDependencies": {
    "artillery": "^1.6.0-12",
    "body-parser": "^1.18.2",
    "bootstrap": "^3.3.7",
    "chai": "^4.1.2",
    "chart.js": "^2.7.1",
    "chokidar": "^1.6.1",
    "chosen-js": "^1.8.2",
    "coveralls": "^2.13.3",
    "cross-env": "^5.1.1",
    "css-loader": "^0.28.7",
    "cuid": "^1.3.8",
    "d3": "^4.12.0",
    "d3-horizon-chart": "0.0.6",
    "datatables": "^1.10.13",
    "express": "^4.16.2",
    "file-loader": "^0.11.1",
    "font-awesome": "^4.7.0",
    "gulp": "^3.9.1",
    "gulp-clean-css": "^3.9.0",
    "gulp-concat": "^2.6.1",
    "gulp-concat-css": "^2.3.0",
    "gulp-css-base64": "^1.3.4",
    "gulp-minify": "^1.0.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^2.6.1",
    "gulp-uglify": "^3.0.0",
    "highlightjs": "^9.10.0",
    "istanbul": "^0.4.5",
    "jquery": "^3.1.1",
    "jshint": "^2.9.4",
    "karma": "^1.7.1",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.1.1",
    "karma-cli": "^1.0.1",
    "karma-coverage": "^1.1.1",
    "karma-firefox-launcher": "^1.0.1",
    "karma-fixture": "^0.2.6",
    "karma-html2js-preprocessor": "^1.1.0",
    "karma-mocha": "^1.3.0",
    "karma-mocha-reporter": "^2.2.5",
    "karma-phantomjs-launcher": "^1.0.4",
    "karma-should": "^1.0.0",
    "mocha": "^3.5.3",
    "mocha-jscs": "^5.0.0",
    "mocha-jshint": "^2.3.1",
    "nyc": "^11.4.0",
    "phantomjs-prebuilt": "^2.1.16",
    "postcss-loader": "^2.0.9",
    "q": "^1.5.1",
    "serve-favicon": "^2.4.5",
    "serve-static": "^1.13.1",
    "should": "^11.2.1",
    "style-loader": "^0.18.1",
    "supertest": "^3.0.0",
    "swagger-jsdoc": "^1.9.1",
    "swagger-parser": "^3.4.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-6i1tl8xWYIwZ8rU9Ko8Pn9jLLIopQmvhMT2Ovrt730D059r17Oi1QJBXf5mlBPYt3yQUamRtWvowlf7uPXKc7w==",
    "shasum": "41d1e122b581c5b7e3fecb103a74367a3ff38592",
    "tarball": "https://registry.npmjs.org/swagger-stats/-/swagger-stats-0.95.2.tgz"
  },
  "gitHead": "219d3ea7b11d7300f79c3cb1aee5717f30ba030f",
  "homepage": "http://swaggerstats.io",
  "keywords": [
    "node",
    "express",
    "api",
    "restful",
    "statistics",
    "monitoring",
    "swagger",
    "schema"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "sv2",
      "email": "sv2@slanatech.com"
    }
  ],
  "name": "swagger-stats",
  "optionalDependencies": {},
  "readme": "<p align=\"center\">\n<img src=\"https://github.com/slanatech/swagger-stats/blob/master/screenshots/logo-c-ssm.png?raw=true\" alt=\"swagger-stats\"/>\n</p>\n\n# swagger-stats\n\n\n####  [http://swaggerstats.io](http://swaggerstats.io) | [Documentation](http://swaggerstats.io/docs.html) | [API DOC](http://swaggerstats.io/apidoc.html) | [API SPEC](http://swaggerstats.io/sws-api-swagger.yaml)\n\n[![Build Status](https://travis-ci.org/slanatech/swagger-stats.svg?branch=master)](https://travis-ci.org/slanatech/swagger-stats)\n[![Dependencies](https://david-dm.org/slanatech/swagger-stats.svg)](https://david-dm.org/slanatech/swagger-stats)\n[![Coverage Status](https://coveralls.io/repos/github/slanatech/swagger-stats/badge.svg?branch=master&dummy)](https://coveralls.io/github/slanatech/swagger-stats?branch=master&dummy)\n[![Tested on APIs.guru](https://api.apis.guru/badges/tested_on.svg)](https://APIs.guru)\n[![npm version](https://badge.fury.io/js/swagger-stats.svg)](https://badge.fury.io/js/swagger-stats)\n\n\n\n## API Telemetry and APM\n\n> Trace API calls and Monitor API performance, health and usage statistics in Node.js Microservices\n\n**swagger-stats** traces REST API requests and responses in Node.js Microservices, and collects statistics per API Operation.\n**swagger-stats** detects API operations based on express routes. You may also provide [Swagger (Open API) specification](https://swagger.io/specification/), \nand swagger-stats will match API requests with API Operations defined in swagger specification. \n\n\n**swagger-stats** exposes statistics and metrics per API Operation, such as `GET /myapi/:parameter`, or `GET /pet/{petId}`\n \n       \n### API Analytics with [Elasticsearch](https://www.elastic.co/) and [Kibana](https://www.elastic.co/products/kibana)\n\n> **swagger-stats** stores details about each request/response in [Elasticsearch](https://www.elastic.co/), so you may use [Kibana](https://www.elastic.co/products/kibana) \n> to perform detailed analysis of API usage over time, build visualizations and dashboards\n\n\n![swagger-stats Kibana Dashboard](screenshots/kibana.gif?raw=true)\n\nSee `dashboards/elastic6` for swagger-stats Kibana visualizations and dashboards\n \n\n### Monitoring and Alerting with [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/)\n\n> **swagger-stats** exposes metrics in [Prometheus](https://prometheus.io/) format, so you may use [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) to setup API monitoring and alerting\n\n\n![swagger-stats Prometheus Dashboard](screenshots/prometheus-dashboard-2-sm.png?raw=true)\n\n\nSee `dashboards/prometheus` for swagger-stats Grafana dashboards \n\n\n### Built-In API Telemetry \n\n> **swagger-stats** provides built-in Telemetry UI, so you may enable **swagger-stats** in your app, and start monitoring immediately, with no infrastructure requirements.\n> Navigate to `http://<your app host:port>/swagger-stats/ui`   \n\n\n![swagger-stats Built-In Monitoring](screenshots/ui0950.gif?raw=true)\n\n\nWith statistics and metrics exposed by **swagger-stats** you may spot problematic API endpoints, see where most of errors happens, \ncatch long-running requests, analyze details of last errors, observe trends, setup alerting. \n\n \n**swagger-stats** provides:\n* Metrics in [Prometheus](https://prometheus.io/) format, so you may use [Prometheus](https://prometheus.io/) and [Grafana](https://grafana.com/) to setup API monitoring and alerting\n* Storing details about each API Request/Response in [Elasticsearch](https://www.elastic.co/), so you may use [Kibana](https://www.elastic.co/products/kibana) to perform analysis of API usage over time, build visualizations and dashboards  \n* Built-in API Telemetry UI, so you may enable swagger-stats in your app, and start monitoring right away, with no additional tools required\n* Exposing collected statistics via API, including:\n* Counts of requests and responses(total and by response class), processing time (total/avg/max), \ncontent length(total/avg/max) for requests and responses, rates for requests and errors. \nThis is baseline set of stats. \n* Statistics by Request Method: baseline stats collected for each request method\n* Timeline: baseline stats collected for each 1 minute interval during last 60 minutes. Timeline helps you to analyze trends.\n* Errors: count of responses per each error code, top \"not found\" resources, top \"server error\" resources\n* Last errors: request and response details for the last 100 errors (last 100 error responses)\n* Longest requests: request and response details for top 100 requests that took longest time to process (time to send response)\n* Tracing: Request and Response details - method, URLs, parameters, request and response headers, addresses, start/stop times and processing duration, matched API Operation info\n* API Statistics: baseline stats and parameter stats per each API Operation. API operation detected based on express routes, and based on [Swagger (Open API) specification](https://swagger.io/specification/) \n* CPU and Memory Usage of Node process\n\n\n## How to Use \n\n\n### Install \n\n```\nnpm install swagger-stats --save\n```\n\n### Enable swagger-stats middleware in your app\n\n```javascript\nvar swStats = require('swagger-stats');\nvar apiSpec = require('swagger.json');\napp.use(swStats.getMiddleware({swaggerSpec:apiSpec}));\n```\n\nSee `/examples` for sample apps \n\n### Get Statistics with API\n\n\n```\n$ curl http://<your app host:port>/swagger-stats/stats\n{\n  \"startts\": 1501647865959,\n  \"all\": {\n    \"requests\": 7,\n    \"responses\": 7,\n    \"errors\": 3,\n    \"info\": 0,\n    \"success\": 3,\n    \"redirect\": 1,\n    \"client_error\": 2,\n    \"server_error\": 1,\n    \"total_time\": 510,\n    \"max_time\": 502,\n    \"avg_time\": 72.85714285714286,\n    \"total_req_clength\": 0,\n    \"max_req_clength\": 0,\n    \"avg_req_clength\": 0,\n    \"total_res_clength\": 692,\n    \"max_res_clength\": 510,\n    \"avg_res_clength\": 98,\n    \"req_rate\": 1.0734549915657108,\n    \"err_rate\": 0.4600521392424475\n  },\n  \"sys\": {\n    \"rss\": 59768832,\n    \"heapTotal\": 36700160,\n    \"heapUsed\": 20081776,\n    \"external\": 5291923,\n    \"cpu\": 0\n  },\n  \"name\": \"swagger-stats-testapp\",\n  \"version\": \"0.90.1\",\n  \"hostname\": \"hostname\",\n  \"ip\": \"127.0.0.1\"\n}\n```\n\nTake a look at [Documentation](http://swaggerstats.io/docs.html#api) for more details on API and returned statistics.\n\n\n### Get Prometheus Metrics \n\n\n```\n$ curl http://<your app host:port>/swagger-stats/metrics\n# HELP api_all_request_total The total number of all API requests received\n# TYPE api_all_request_total counter\napi_all_request_total 88715\n# HELP api_all_success_total The total number of all API requests with success response\n# TYPE api_all_success_total counter\napi_all_success_total 49051\n# HELP api_all_errors_total The total number of all API requests with error response\n# TYPE api_all_errors_total counter\napi_all_errors_total 32152\n# HELP api_all_client_error_total The total number of all API requests with client error response\n# TYPE api_all_client_error_total counter\napi_all_client_error_total 22986\n\n. . . . . . . . . .  \n\n```\n\n\n### Embedded Monitoring User Interface \n\nSwagger-stats comes with built-in User Interface. Navigate to `/swagger-stats/ui` in your app to start monitoring right away\n   \n```\nhttp://<your app host:port>/swagger-stats/ui\n```\n\n##### Key metrics\n\n![swagger-stats bundled User Interface](screenshots/metrics.png?raw=true)\n\n##### Timeline\n\n![swagger-stats bundled User Interface](screenshots/timeline.png?raw=true)\n\n##### Request and error rates \n\n![swagger-stats bundled User Interface](screenshots/rates.png?raw=true)\n\n##### API Operations \n\n![swagger-stats bundled User Interface](screenshots/apitable.png?raw=true)\n\n##### Stats By Method\n\n![swagger-stats bundled User Interface](screenshots/methods.png?raw=true)\n\n\n## Updates \n\n#### v0.95.0\n\n* [feature] Elasticsearch support [#12](https://github.com/slanatech/swagger-stats/issues/12)  \n\n*swagger-stats* now supports storing details about each API Request/Response in [Elasticsearch](https://www.elastic.co/), so you may use [Kibana](https://www.elastic.co/products/kibana) to perform analysis of API usage over time, build visualizations and dashboards.\nExample Kibana dashboards provided in `dashboards/elastic6`\n\n\n#### v0.94.0\n\n* [feature] Apdex score [#10](https://github.com/slanatech/swagger-stats/issues/10)  \n\n* [feature] Support Authentication for /stats and /metrics [#14](https://github.com/slanatech/swagger-stats/issues/14)\n\n* [feature] Add label \"code\" to Prometheus histogram metrics [#21](https://github.com/slanatech/swagger-stats/issues/21)\n\nSee updated dashboard at [Grafana Dashboards](https://grafana.com/dashboards/3091) \n\n\n\n#### v0.93.1\n\n* [bug] Can't start on node v7.10.1, Mac Os 10.12.6 [#22](https://github.com/slanatech/swagger-stats/issues/22)  \n\n#### v0.93.0\n\n* [feature] Support providing Prometheus metrics via [prom-client](https://www.npmjs.com/package/prom-client) library [#20](https://github.com/slanatech/swagger-stats/issues/20)  \n\n\n#### v0.92.0\n\n* [feature] OnResponseFinish hook: pass request/response record to callback so app can post proceses it add it to the log [#5](https://github.com/slanatech/swagger-stats/issues/5)  \n\n\n#### v0.91.0\n\n* [feature] Option to specify alternative URI path for ui,stats and metrics  [#17](https://github.com/slanatech/swagger-stats/issues/17)\n\n```javascript\napp.use(swStats.getMiddleware({\n   uriPath: '/myservice',\n   swaggerSpec:swaggerSpec\n}));\n```\n```\n$ curl http://<your app host:port>/myservice/stats\n```\n\n#### v0.90.3\n\n* [feature] Added new chart to API Operation Page [#16](https://github.com/slanatech/swagger-stats/issues/16)                                                   \n    - handle time histogram\n    - request size histogram\n    - response size histogram\n    - response codes counts  \n\n#### v0.90.2\n\n* [feature] Added [Prometheus](https://prometheus.io/) metrics and [Grafana](https://grafana.com/) dashboards [#9](https://github.com/slanatech/swagger-stats/issues/9)\n  \n\n#### v0.90.1\n\n* [feature] Added CPU and Memory Usage Stats and monitoring in UI [#8](https://github.com/slanatech/swagger-stats/issues/8)  \n\n\n## Enhancements and Bug Reports\n\nIf you find a bug, or have an enhancement in mind please post [issues](https://github.com/slanatech/swagger-stats/issues) on GitHub.\n\n## License\n \nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/slanatech/swagger-stats.git"
  },
  "scripts": {
    "cov000": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/000 mocha --delay test/000_baseline.js",
    "cov010": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/010 mocha --delay test/010_swsapistats.js",
    "cov100": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/100 mocha --delay test/100_method.js",
    "cov200": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/200 mocha --delay test/200_apicore.js",
    "cov300": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/300 mocha --delay test/300_timeline.js",
    "cov400": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/400 mocha --delay test/400_auth.js",
    "cov500": "nyc --reporter=lcov --reporter=html --reporter=json --reporter=text --report-dir=coverage/500 mocha --delay test/500_elastic.js",
    "coverage": "nyc --reporter=lcov --reporter=html --reporter=text --report-dir=coverage/mocha mocha -S --delay",
    "coverage-report": "istanbul report --root ./coverage --dir ./coverage-report lcov",
    "karma": "cross-env NODE_ENV=test karma start karma.conf.js",
    "karma-ci": "cross-env NODE_ENV=ci DEBUG=sws:* karma start karma.conf.js",
    "karma-dev": "cross-env NODE_ENV=development karma start karma.conf.js",
    "quickload": "artillery quick --duration 120 --rate 10 -n 20 http://localhost:3030/api/v1/tester/200",
    "specstest": "mocha test/specstest/swaggerspecstest.js",
    "start": "node example/app.js",
    "test": "npm run cov000 && npm run cov010 && npm run cov100 && npm run cov200 && npm run cov300 && npm run cov400 && npm run cov500 && npm run karma-ci && npm run coverage-report",
    "test-old": "npm run coverage && npm run karma-ci",
    "testonly": "mocha -S --delay"
  },
  "version": "0.95.2"
}

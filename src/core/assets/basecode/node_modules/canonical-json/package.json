{
  "_args": [
    [
      {
        "raw": "canonical-json@0.0.4",
        "scope": null,
        "escapedName": "canonical-json",
        "name": "canonical-json",
        "rawSpec": "0.0.4",
        "spec": "0.0.4",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/loopback"
    ]
  ],
  "_from": "canonical-json@0.0.4",
  "_id": "canonical-json@0.0.4",
  "_inCache": true,
  "_location": "/canonical-json",
  "_npmUser": {
    "name": "mirkok",
    "email": "mail@mirkokiefer.com"
  },
  "_npmVersion": "1.3.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "canonical-json@0.0.4",
    "scope": null,
    "escapedName": "canonical-json",
    "name": "canonical-json",
    "rawSpec": "0.0.4",
    "spec": "0.0.4",
    "type": "version"
  },
  "_requiredBy": [
    "/loopback"
  ],
  "_resolved": "https://registry.npmjs.org/canonical-json/-/canonical-json-0.0.4.tgz",
  "_shasum": "6579c072c3db5c477ec41dc978fbf2b8f41074a3",
  "_shrinkwrap": null,
  "_spec": "canonical-json@0.0.4",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/loopback",
  "author": {
    "name": "Mirko Kiefer",
    "email": "mail@mirkokiefer.com"
  },
  "bugs": {
    "url": "https://github.com/mirkokiefer/canonical-json/issues"
  },
  "dependencies": {},
  "description": "a canonical json implementation",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "6579c072c3db5c477ec41dc978fbf2b8f41074a3",
    "tarball": "https://registry.npmjs.org/canonical-json/-/canonical-json-0.0.4.tgz"
  },
  "homepage": "https://github.com/mirkokiefer/canonical-json",
  "license": "BSD",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mirkok",
      "email": "mail@mirkokiefer.com"
    }
  ],
  "name": "canonical-json",
  "optionalDependencies": {},
  "readme": "#Canonical JSON\n\nThe goal of this module is to implement a version of JSON.stringify that returns a canonical JSON format.\n\nCanonical JSON means that the same object should always be stringified to the exact same string.  \nJavaScripts native JSON.stringify does not guarantee any order for object keys when serializing:\n\n> Properties of non-array objects are not guaranteed to be stringified in any particular order. Do not rely on ordering of properties within the same object within the stringification.\n\nSource: [https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify](https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/JSON/stringify)\n\nThis module implements two alternative solutions to this problem:\n\n- [index.js](https://github.com/mirkok/canonical-json/blob/master/index.js) is based on [Douglas Crockford's json2.js](https://github.com/douglascrockford/JSON-js/blob/master/json2.js). I modified it to serialize object keys sorted on the fly.\n- [index2.js](https://github.com/mirkok/canonical-json/blob/master/index2.js) recursively creates a copy of the object to sort its keys. The copy is then simply passed to native JSON.stringify\n\nIt currently exports the index.js version.\n\n##Performance comparison\nI compared the performance of native JSON.stringify and the two alternative implementations that output keys sorted:\n\n- native JSON.stringify: `75 ms`\n- js JSON.stringify with sorted keys ([implementation](https://github.com/mirkok/canonical-json/blob/master/index.js)): `308 ms`\n- copy and native JSON.stringify with sorted keys ([implementation](https://github.com/mirkok/canonical-json/blob/master/index2.js): `291 ms`\n\nThe tests were run in Node.js on a 2011 MacBook Pro.  \nPerformance test source: [test/performance.js](https://github.com/mirkok/canonical-json/blob/master/test/performance.js)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mirkokiefer/canonical-json.git"
  },
  "scripts": {
    "test": "mocha test/index.js"
  },
  "version": "0.0.4"
}

{
  "_args": [
    [
      {
        "raw": "cvss@https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
        "scope": null,
        "escapedName": "cvss",
        "name": "cvss",
        "rawSpec": "https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
        "spec": "https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
        "type": "remote"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/nsp"
    ]
  ],
  "_from": "cvss@https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
  "_id": "cvss@1.0.2",
  "_inCache": true,
  "_location": "/nsp/cvss",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cvss@https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
    "scope": null,
    "escapedName": "cvss",
    "name": "cvss",
    "rawSpec": "https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
    "spec": "https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/nsp"
  ],
  "_resolved": "https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
  "_shasum": "df67e92bf12a796f49e928799c8db3ba74b9fcd6",
  "_shrinkwrap": null,
  "_spec": "cvss@https://registry.npmjs.org/cvss/-/cvss-1.0.2.tgz",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/nsp",
  "author": {
    "name": "Aaron McCall",
    "email": "aaron@andyet.net",
    "url": "https://github.com/aaronmccall"
  },
  "bugs": {
    "url": "https://github.com/aaronmccall/cvss/issues"
  },
  "dependencies": {},
  "description": "A CommonJS library for working with Common Vulnerability Scoring System vectors and scores.",
  "devDependencies": {
    "code": "^2.2.0",
    "eslint": "^2.8.0",
    "lab": "^10.3.1"
  },
  "homepage": "https://github.com/aaronmccall/cvss#readme",
  "keywords": [],
  "license": "ISC",
  "main": "index.js",
  "name": "cvss",
  "optionalDependencies": {},
  "readme": "# cvss\nA CommonJS library for working with Common Vulnerability Scoring System vectors and scores.\n\n## Install\n\n`npm i cvss`\n\n## Usage\n\n```javascript\nvar cvss = require('cvss');\n\nvar score = cvss.getScore('CVSS:3.0/AV:P/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L');\n\nconsole.log(score) // => 6.2\n\nvar rating = cvss.getRating(score);\n\nconsole.log(rating) // => Medium\n```\n\n### #getScore [String or Object input], [Object options (optional)]\n\nThis is the main scoring method. It may be called with either a valid CVSS3 vector string (`'CVSS:3.0/AV:P/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L'`) or an object containing the key/value pairs (`{ AV: 'P', AC: 'H', PR: 'N', UI:'R', S: 'C', C: 'L', I: 'H', A: 'L' }`) corresponding to one as its **input** parameter.\n\nThe optional **options** parameter controls whether validation errors throw or not and whether optional temporal and environmental metrics are considered in score calculation\n\n**options**\n- _throw_: if validation returns an error, throw the error\n- _baseOnly_: only consider base metrics when calculating score\n- _temporal_: include temporal metrics when calculating score\n- _environmental_: include temporal AND environmental metrics when calculating score (both are included per CVSS3 spec)\n\n### #getBaseScore [String or Object input], [Object options (optional)]\n\nAccepts the same arguments as _getScore_ above, but enforces the _baseOnly_ option.\n\n### #getTemporalScore [String or Object input], [Object options (optional)]\n\nAccepts the same arguments as _getScore_ above, but enforces the _temporal_ option.\n### #getEnvironmentalScore [String or Object input], [Object options (optional)]\n\nAccepts the same arguments as _getScore_ above, but enforces the _environmental_ option.\n\n### #getRating [Number score]\n\nGiven a numeric score, returns the appropriate CVSS3 severity rating for that number: _None_ for scores < 0.1, _Low_ for scores >= 0.1 and < 4, _Medium_ for scores >=4 and < 7, _High_ for scores >= 7 and < 9, _Critical_ for scores >= 9.\n\n### #getBase [String or Object input], [Object options (optional)]\n\nReturns an object with the base score and its rating. Equivalent to\n```javascript\n{\n    score: getBaseScore(input),\n    rating: getRating(getBaseScore(input))\n}\n```\n\n### #getEnvironmental [String or Object input], [Object options (optional)]\n\nReturns an object with the environmental score and its rating. Equivalent to\n```javascript\n{\n    score: getEnvironmentalScore(input),\n    rating: getRating(getEnvironmentalScore(input))\n}\n```\n\n### #getTemporal [String or Object input], [Object options (optional)]\n\nReturns an object with the environmental score and its rating. Equivalent to\n```javascript\n{\n    score: getTemporalScore(input),\n    rating: getRating(getTemporalScore(input))\n}\n```\n\n### #getAll [String or Object input], [Object options (optional)]\n\nReturns object with the score and rating for all three scores:\n```javascript\n{\n    base: getBase(input),\n    temporal: getTemporal(input),\n    environmental: getEnvironmental(input)\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aaronmccall/cvss.git"
  },
  "scripts": {
    "test": "lab -v -t 99"
  },
  "version": "1.0.2"
}

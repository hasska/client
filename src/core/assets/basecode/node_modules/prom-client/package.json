{
  "_args": [
    [
      {
        "raw": "prom-client@^10.2.2",
        "scope": null,
        "escapedName": "prom-client",
        "name": "prom-client",
        "rawSpec": "^10.2.2",
        "spec": ">=10.2.2 <11.0.0",
        "type": "range"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/swagger-stats"
    ]
  ],
  "_from": "prom-client@>=10.2.2 <11.0.0",
  "_id": "prom-client@10.2.2",
  "_inCache": true,
  "_location": "/prom-client",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/prom-client-10.2.2.tgz_1509615261806_0.4004218648187816"
  },
  "_npmUser": {
    "name": "simenb",
    "email": "sbekkhus91@gmail.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "prom-client@^10.2.2",
    "scope": null,
    "escapedName": "prom-client",
    "name": "prom-client",
    "rawSpec": "^10.2.2",
    "spec": ">=10.2.2 <11.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/swagger-stats"
  ],
  "_resolved": "https://registry.npmjs.org/prom-client/-/prom-client-10.2.2.tgz",
  "_shasum": "76b39720710ec10796d7ce60135b5d5dafbff615",
  "_shrinkwrap": null,
  "_spec": "prom-client@^10.2.2",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/swagger-stats",
  "author": {
    "name": "Simon Nyberg"
  },
  "bugs": {
    "url": "https://github.com/siimon/prom-client/issues"
  },
  "dependencies": {
    "tdigest": "^0.1.1"
  },
  "description": "Client for prometheus",
  "devDependencies": {
    "eslint": "^4.1.1",
    "eslint-plugin-prettier": "^2.1.2",
    "express": "^4.13.3",
    "husky": "^0.14.3",
    "jest": "^21.2.1",
    "lint-staged": "^4.0.0",
    "lolex": "^2.1.3",
    "prettier": "1.7.4",
    "typescript": "^2.5.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-d3qCBK41qZx00/WVzWOX4tau9FinCztqaECZiGuMI5vGYD//5VSdKMOZPRQKjVh5RkI4Ex98DI0YPsoFnEo1QQ==",
    "shasum": "76b39720710ec10796d7ce60135b5d5dafbff615",
    "tarball": "https://registry.npmjs.org/prom-client/-/prom-client-10.2.2.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "lib/",
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "bd55876a1d6ae36deeac41b7df45d25431d27df8",
  "homepage": "https://github.com/siimon/prom-client",
  "jest": {
    "testEnvironment": "node",
    "testRegex": ".*Test\\.js$"
  },
  "keywords": [
    "Prometheus",
    "Metrics",
    "Client"
  ],
  "license": "Apache-2.0",
  "lint-staged": {
    "*.js": [
      "eslint --fix",
      "git add"
    ],
    "*.ts": [
      "prettier --write --use-tabs --single-quote",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "siimon",
      "email": "simon@nyberg.io"
    },
    {
      "name": "simenb",
      "email": "sbekkhus91@gmail.com"
    }
  ],
  "name": "prom-client",
  "optionalDependencies": {},
  "readme": "# Prometheus client for node.js [![Build Status](https://travis-ci.org/siimon/prom-client.svg?branch=master)](https://travis-ci.org/siimon/prom-client) [![Build status](https://ci.appveyor.com/api/projects/status/k2e0gwonkcee3lp9/branch/master?svg=true)](https://ci.appveyor.com/project/siimon/prom-client/branch/master)\n\nA prometheus client for node.js that supports histogram, summaries, gauges and counters.\n\n### Usage\n\nSee example folder for a sample usage. The library does not bundle any web framework, to expose the metrics just return the `metrics()` function in the registry.\n\n#### Usage with Node.js's `cluster` module\n\nNode.js's `cluster` module spawns multiple processes and hands off socket connections to those workers. Returning metrics from a worker's local registry will only reveal that individual worker's metrics, which is generally undesirable. To solve this, you can aggregate all of the workers' metrics in the master process. See `example/cluster.js` for an example.\n\nDefault metrics use sensible aggregation methods. Custom metrics are summed across workers by default. To use a different aggregation method, set the `aggregator` property in the metric config to one of 'sum', 'first', 'min', 'max', 'average' or 'omit'. (See `lib/metrics/version.js` for an example.)\n\nIf you need to expose metrics about an individual worker, you can include a value that is unique to the worker (such as the worker ID or process ID) in a label. (See `example/server.js` for an example using `worker_${cluster.worker.id}` as a label value.)\n\nMetrics are aggregated from the global registry by default. To use a different registry, call `client.AggregatorRegistry.setRegistries(registryOrArrayOfRegistries)` from the worker processes.\n\n### API\n\n#### Configuration\n\nAll metric types has 2 mandatory parameters, name and help.\n\n#### Default metrics\n\nThere are some default metrics recommended by Prometheus\n[itself](https://prometheus.io/docs/instrumenting/writing_clientlibs/#standard-and-runtime-collectors).\nTo collect these, call `collectDefaultMetrics`\n\nNOTE: Some of the metrics, concerning File Descriptors and Memory, are only available on Linux.\n\nIn addition, some Node-specific metrics are included, such as event loop lag, active handles and Node.js version. See what metrics there are in\n[lib/metrics](lib/metrics).\n\n`collectDefaultMetrics` takes 1 options object with 2 entries, a timeout for how often the probe should be fired and a\nregistry to which metrics should be registered. By default probes are launched every 10 seconds, but this can be\nmodified like this:\n\n```js\nconst client = require('prom-client');\n\nconst collectDefaultMetrics = client.collectDefaultMetrics;\n\n// Probe every 5th second.\ncollectDefaultMetrics({ timeout: 5000 });\n````\n\nTo register metrics to another registry, pass it in as `register`:\n\n```js\nconst client = require('prom-client');\n\nconst collectDefaultMetrics = client.collectDefaultMetrics;\nconst Registry = client.Registry;\nconst register = new Registry();\n\ncollectDefaultMetrics({ register });\n````\n\nYou can get the full list of metrics by inspecting `client.collectDefaultMetrics.metricsList`.\n\n`collectDefaultMetrics` returns an identification when invoked, which is a reference to the `Timer` used to keep the probes going. This can be\npassed to `clearInterval` in order to stop all probes.\n\nNOTE: Existing intervals are automatically cleared when calling `collectDefaultMetrics`.\n\n```js\nconst client = require('prom-client');\n\nconst collectDefaultMetrics = client.collectDefaultMetrics;\n\nconst interval = collectDefaultMetrics();\n\n// ... some time later\n\nclearInterval(interval);\n````\n\nNOTE: `unref` is called on the `interval` internally, so it will not keep your node process going indefinitely if it's the only thing\nkeeping it from shutting down.\n\n##### Stop polling default metrics\n\nTo stop collecting the default metrics, you have to call the function and pass it to `clearInterval`.\n\n```js\nconst client = require('prom-client');\n\nclearInterval(client.collectDefaultMetrics());\n\n// Clear the register\nclient.register.clear();\n```\n\n#### Counter\n\nCounters go up, and reset when the process restarts.\n\n```js\nconst client = require('prom-client');\nconst counter = new client.Counter({ name: 'metric_name', help: 'metric_help' });\ncounter.inc(); // Inc with 1\ncounter.inc(10); // Inc with 10\n```\n\nA counter can be reset manually. This removes the label-values combinations and\ninitializes to 0.\n\n```js\ncounter.reset();\ncounter.inc(); // Inc with 1 starting from 0\n```\n\n#### Gauge\n\nGauges are similar to Counters but Gauges value can be decreased.\n\n```js\nconst client = require('prom-client');\nconst gauge = new client.Gauge({ name: 'metric_name', help: 'metric_help' });\ngauge.set(10); // Set to 10\ngauge.inc(); // Inc with 1\ngauge.inc(10); // Inc with 10\ngauge.dec(); // Dec with 1\ngauge.dec(10); // Dec with 10\n```\nA gauge can be reset manually. This removes the label-values combinations and\ninitializes to 0.\n\n```js\ngauge.reset();\ngauge.inc(); // Inc with 1 starting from 0\n```\n\nThere are some utilities for common use cases:\n\n```js\ngauge.setToCurrentTime(); // Sets value to current time\n\nconst end = gauge.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Sets value to xhrRequests duration in seconds\n});\n```\n\n#### Histogram\n\nHistograms track sizes and frequency of events.\n\n**Configuration**\n\nThe defaults buckets are intended to cover usual web/rpc requests, this can however be overriden.\n```js\nconst client = require('prom-client');\nnew client.Histogram({ name: 'metric_name', help: 'metric_help', buckets: [ 0.10, 5, 15, 50, 100, 500 ] });\n```\nYou can include all label names as a property as well.\n```js\nconst client = require('prom-client');\nnew client.Histogram({ name: 'metric_name', help: 'metric_help', labelNames: [ 'status_code' ], buckets: [ 0.10, 5, 15, 50, 100, 500 ] });\n```\n\nExamples\n\n```js\nconst client = require('prom-client');\nconst histogram = new client.Histogram({ name: 'metric_name', help: 'metric_help' });\nhistogram.observe(10); // Observe value in histogram\n```\n\nUtility to observe request durations\n```js\nconst end = histogram.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Observes the value to xhrRequests duration in seconds\n});\n```\nA Histogram can be reset manually. This removes the label-values combinations and\nreinitializes the observations.\n\n```js\nhistogram.reset();\n```\n\n#### Summary\n\nSummaries calculate percentiles of observed values.\n\n**Configuration**\n\nThe default percentiles are: 0.01, 0.05, 0.5, 0.9, 0.95, 0.99, 0.999. But they can be overriden like this:\n\n```js\nconst client = require('prom-client');\nnew client.Summary({ name: 'metric_name', help: 'metric_help', percentiles: [ 0.01, 0.1, 0.9, 0.99 ] });\n```\n\nUsage example\n\n```js\nconst client = require('prom-client');\nconst summary = new client.Summary({ name: 'metric_name', help: 'metric_help' });\nsummary.observe(10);\n```\n\nUtility to observe request durations\n```js\nconst end = summary.startTimer();\nxhrRequest(function(err, res) {\n\tend(); // Observes the value to xhrRequests duration in seconds\n});\n```\n\nA Summary can be reset manually. This removes the label-values combinations and\nreinitializes the observations.\n\n```js\nsummary.reset();\n```\n\n#### Labels\n\nAll metrics can take a labelNames property in the configuration object. All labelNames that the metric support needs to be declared here. There are 2 ways to add values to the labels\n```js\nconst client = require('prom-client');\nconst gauge = new client.Gauge({ name: 'metric_name', help: 'metric_help', labelNames: [ 'method', 'statusCode' ] });\n\ngauge.set({ method: 'GET', statusCode: '200' }, 100); // 1st version, Set value 100 with method set to GET and statusCode to 200\ngauge.labels('GET', '200').set(100); // 2nd version, Same as above\n```\n\nIt is also possible to use timers with labels, both before and after the timer is created:\n```js\nconst end = startTimer({ method: 'GET' }); // Set method to GET, we don't know statusCode yet\nxhrRequest(function(err, res) {\n\tif (err) {\n\t\tend({ statusCode: '500' }); // Sets value to xhrRequest duration in seconds with statusCode 500\n\t} else {\n\t\tend({ statusCode: '200' }); // Sets value to xhrRequest duration in seconds with statusCode 200\n\t}\n});\n```\n\n##### Default Labels (segmented by registry)\n\nStatic labels may be applied to every metric emitted by a registry:\n```js\nconst client = require('prom-client');\nconst defaultLabels = { serviceName: \"api-v1\" };\nclient.register.setDefaultLabels(defaultLabels);\n```\n\nThis will output metrics in the following way:\n```\n# HELP process_resident_memory_bytes Resident memory size in bytes.\n# TYPE process_resident_memory_bytes gauge\nprocess_resident_memory_bytes{serviceName=\"api-v1\"} 33853440 1498510040309\n```\n\nDefault labels will be overridden if there is a name conflict.\n\n`register.clear()` will clear default labels.\n\n#### Timestamps\n\nCounter and gauge metrics can take a timestamp argument after the value argument.\nThis argument must be a Date or a number (milliseconds since Unix epoch, i.e. 1970-01-01 00:00:00 UTC, excluding leap seconds).\n\n```js\ngauge.set(100, 1485531442231); // Set gauge value and timestamp as milliseconds since Unix epoch\ngauge.set(100, Date.now()); // Set gauge value and timestamp as milliseconds since Unix epoch\ngauge.set(100, new Date()); // Set gauge value and timestamp as Date\ngauge.set({ method: 'GET', statusCode: '200' }, 100, new Date()); // Set gauge value and timestamp with labels\ngauge.labels('GET', '200').set(100, new Date()); // Same as above\n\ncounter.inc(1, new Date()); // Increment counter with timestamp\n\n```\n\n#### Multiple registries\n\nBy default, metrics are automatically registered to the global registry (located at `require('prom-client').register`).\nYou can prevent this by setting last parameter when creating the metric to `false` (depending on metric, this might be 4th or 5th parameter).\n\nUsing non-global registries requires creating Registry instance and adding it inside `registers` inside the configuration object. Alternatively\nyou can pass an empty `registers` array and register it manually.\n\nRegistry has a `merge` function that enables you to expose multiple registries on the same endpoint. If the same metric name exists in both registries, an error will be thrown.\n\n```js\nconst client = require('prom-client');\nconst registry = new client.Registry();\nconst counter = new client.Counter({name: 'metric_name', help: 'metric_help', registers: [ registry ]});\nconst histogram = new client.Histogram({name: 'metric_name', help: 'metric_help', registers: [ ]});\nregistry.registerMetric(histogram);\ncounter.inc();\n\nconst mergedRegistries = client.Registry.merge([registry, client.register]);\n```\n\nIf you want to use multiple or non-default registries with the Node.js `cluster` module, you will need to set the registry/registries to aggregate from:\n\n```js\nconst AggregatorRegistry = client.AggregatorRegistry;\nAggregatorRegistry.setRegistries(registry);\n// or for multiple registries:\nAggregatorRegistry.setRegistries([registry1, registry2]);\n```\n\n#### Register\n\nYou can get all metrics by running `register.metrics()`, which will output a string for prometheus to consume.\n\n`register.metrics()` takes an optional object with a `timestamps` field. Setting this to false will strip timestamps from the string.\n\n##### Getting a single metric for Prometheus displaying\n\nIf you need to output a single metric for Prometheus, you can use `register.getSingleMetricAsString(*name of metric*)`, it will output a string for Prometheus to consume.\n\n##### Getting a single metric\n\nIf you need to get a reference to a previously registered metric, you can use `register.getSingleMetric(*name of metric*)`.\n\n##### Removing metrics\n\nYou can remove all metrics by calling `register.clear()`. You can also remove a single metric by calling\n`register.removeSingleMetric(*name of metric*)`.\n\n##### Resetting metrics\n\nIf you need to reset all metrics, you can use `register.resetMetrics()`. The metrics will remain present in the register and can be used without the need to\ninstantiate them again, like you would need to do after `register.clear()`.\n\n##### Cluster metrics\n\nYou can get aggregated metrics for all workers in a node.js cluster with `register.clusterMetrics()`. This method both returns a promise and accepts a callback, both of which resolve with a metrics string suitable for Prometheus to consume.\n\n```js\nregister.clusterMetrics()\n\t.then(metrics => { /* ... */ })\n\t.catch(err => { /* ... */ });\n\n// - or -\n\nregister.clusterMetrics((err, metrics) => {\n\t// ...\n});\n```\n\n#### Pushgateway\n\nIt is possible to push metrics via a [Pushgateway](https://github.com/prometheus/pushgateway).\n\nNote that timestamps will be stripped before the metrics are pushed, since pushgateway >= 0.4 does not accept timestamps.\n\n```js\nconst client = require('prom-client');\nlet gateway = new client.Pushgateway('http://127.0.0.1:9091');\n\ngateway.pushAdd({ jobName: 'test' }, function(err, resp, body) { }); //Add metric and overwrite old ones\ngateway.push({ jobName: 'test' }, function(err, resp, body) { }); //Overwrite all metrics (use PUT)\ngateway.delete({ jobName: 'test' }, function(err, resp, body) { }); //Delete all metrics for jobName\n\n//All gateway requests can have groupings on it\ngateway.pushAdd({ jobName: 'test', groupings: { key: 'value' } }, function(err, resp, body) { });\n\n//It's possible to extend the Pushgateway with request options from nodes core http/https library\ngateway = new client.Pushgateway('http://127.0.0.1:9091', { timeout: 5000 }); //Set the request timeout to 5000ms\n```\n\n\n#### Utilites\n\nFor convenience, there are 2 bucket generator functions - linear and exponential.\n\n```js\nconst client = require('prom-client');\nnew client.Histogram({\n\tname: 'metric_name',\n\thelp: 'metric_help',\n\tbuckets: client.linearBuckets(0, 10, 20) //Create 20 buckets, starting on 0 and a width of 10\n});\n\nnew client.Histogram({\n\tname: 'metric_name',\n\thelp: 'metric_help',\n\tbuckets: client.exponentialBuckets(1, 2, 5) //Create 5 buckets, starting on 1 and with a factor of 2\n});\n```\n\nThe content-type prometheus expects is also exported as a constant, both on the `register` and from the main file of this project, called `contentType`.\n\n### Garbage Collection\n\nTo avoid dependencies in this module, GC stats are kept outside of it. If you want GC stats, you can use https://github.com/SimenB/node-prometheus-gc-stats\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/siimon/prom-client.git"
  },
  "scripts": {
    "compile-typescript": "tsc index.d.ts --noImplicitAny",
    "lint": "eslint .",
    "precommit": "lint-staged",
    "test": "npm run lint && npm run compile-typescript && npm run test-unit",
    "test-unit": "jest"
  },
  "types": "./index.d.ts",
  "version": "10.2.2"
}

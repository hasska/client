{
  "_args": [
    [
      {
        "raw": "mailcomposer@4.0.1",
        "scope": null,
        "escapedName": "mailcomposer",
        "name": "mailcomposer",
        "rawSpec": "4.0.1",
        "spec": "4.0.1",
        "type": "version"
      },
      "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/nodemailer"
    ]
  ],
  "_from": "mailcomposer@4.0.1",
  "_id": "mailcomposer@4.0.1",
  "_inCache": true,
  "_location": "/mailcomposer",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/mailcomposer-4.0.1.tgz_1483528622706_0.9465109081938863"
  },
  "_npmUser": {
    "name": "andris",
    "email": "andris@kreata.ee"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mailcomposer@4.0.1",
    "scope": null,
    "escapedName": "mailcomposer",
    "name": "mailcomposer",
    "rawSpec": "4.0.1",
    "spec": "4.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/nodemailer"
  ],
  "_resolved": "https://registry.npmjs.org/mailcomposer/-/mailcomposer-4.0.1.tgz",
  "_shasum": "0e1c44b2a07cf740ee17dc149ba009f19cadfeb4",
  "_shrinkwrap": null,
  "_spec": "mailcomposer@4.0.1",
  "_where": "/Users/vt/Documents/development/canada/src/core/assets/basecode/node_modules/nodemailer",
  "author": {
    "name": "Andris Reinman"
  },
  "bugs": {
    "url": "https://github.com/andris9/mailcomposer/issues"
  },
  "dependencies": {
    "buildmail": "4.0.1",
    "libmime": "3.0.0"
  },
  "description": "Compose E-Mail messages",
  "devDependencies": {
    "chai": "^3.5.0",
    "grunt": "^1.0.1",
    "grunt-cli": "^1.2.0",
    "grunt-eslint": "^19.0.0",
    "grunt-mocha-test": "^0.13.2",
    "mocha": "^3.2.0",
    "sinon": "^1.17.7"
  },
  "directories": {},
  "dist": {
    "shasum": "0e1c44b2a07cf740ee17dc149ba009f19cadfeb4",
    "tarball": "https://registry.npmjs.org/mailcomposer/-/mailcomposer-4.0.1.tgz"
  },
  "engine": {
    "node": ">=0.10"
  },
  "gitHead": "4903b5f7a2bd0261ee77540f87853a864a13b093",
  "homepage": "https://github.com/andris9/mailcomposer#readme",
  "keywords": [
    "e-mail",
    "mime",
    "parser"
  ],
  "license": "MIT",
  "main": "./lib/mailcomposer",
  "maintainers": [
    {
      "name": "andris",
      "email": "andris@kreata.ee"
    }
  ],
  "name": "mailcomposer",
  "optionalDependencies": {},
  "readme": "# mailcomposer\n\n**mailcomposer** is a Node.JS module for generating e-mail messages that can be streamed to SMTP or file.\n\n> **NB!** This module is not backwards compatible with versions 0.x\n\n[![Build Status](https://secure.travis-ci.org/andris9/mailcomposer.png)](http://travis-ci.org/andris9/mailcomposer)\n\n## Support mailcomposer development\n\n[![Donate to author](https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=DB26KWR2BQX5W)\n\n## Installation\n\nInstall through NPM\n\n    npm install mailcomposer\n\n## Usage\n\n### Include mailcomposer module\n\n```javascript\nvar mailcomposer = require(\"mailcomposer\");\n```\n\n### Create a new `MailComposer` instance\n\n```javascript\nvar mail = mailcomposer(mailOptions);\n```\n\nWhere `mailOptions` is an object that defines the components of the message, see below\n\n## API\n\n### createReadStream\n\nTo create a stream that outputs a raw rfc822 message from the defined input, use `createReadStream()`\n\n```javascript\nvar mail = mailcomposer({from: '...', ...});\nvar stream = mail.createReadStream();\nstream.pipe(process.stdout);\n```\n\n### build\n\nTo generate the message and return it with a callback use `build()`\n\n```javascript\nvar mail = mailcomposer({from: '...', ...});\nmail.build(function(err, message){\n    process.stdout.write(message);\n});\n```\n\n### E-mail message fields\n\nThe following are the possible fields of an e-mail message:\n\n  - **from** - The e-mail address of the sender. All e-mail addresses can be plain `'sender@server.com'` or formatted `'Sender Name <sender@server.com>'`, see [here](#address-formatting) for details\n  - **sender** - An e-mail address that will appear on the *Sender:* field\n  - **to** - Comma separated list or an array of recipients e-mail addresses that will appear on the *To:* field\n  - **cc** - Comma separated list or an array of recipients e-mail addresses that will appear on the *Cc:* field\n  - **bcc** - Comma separated list or an array of recipients e-mail addresses that will appear on the *Bcc:* field\n  - **replyTo** - An e-mail address that will appear on the *Reply-To:* field\n  - **inReplyTo** - The message-id this message is replying\n  - **references** - Message-id list (an array or space separated string)\n  - **subject** - The subject of the e-mail\n  - **text** - The plaintext version of the message as an Unicode string, Buffer, Stream or an object *{path: '...'}*\n  - **html** - The HTML version of the message as an Unicode string, Buffer, Stream or an object *{path: '...'}*\n  - **watchHtml** - Apple Watch specific HTML version of the message, same usage as with `text` and `html`\n  - **icalEvent** - iCalendar event, same usage as with `text` and `html`. Event `method` attribute defaults to 'PUBLISH' or define it yourself: `{method: 'REQUEST', content: iCalString}`. This value is added as an additional alternative to html or text. Only utf-8 content is allowed\n  - **headers** - An object or array of additional header fields (e.g. *{\"X-Key-Name\": \"key value\"}* or *[{key: \"X-Key-Name\", value: \"val1\"}, {key: \"X-Key-Name\", value: \"val2\"}]*)\n  - **attachments** - An array of attachment objects  (see [below](#attachments) for details)\n  - **alternatives** - An array of alternative text contents (in addition to text and html parts)  (see [below](#alternatives) for details)\n  - **envelope** - optional SMTP envelope, if auto generated envelope is not suitable (see [below](#smtp-envelope) for details)\n  - **messageId** - optional Message-Id value, random value will be generated if not set\n  - **date** - optional Date value, current UTC string will be used if not set\n  - **encoding** - optional transfer encoding for the textual parts\n  - **raw** - if set then overwrites entire message output with this value. The value is not parsed, so you should still set address headers or the envelope value for the message to work\n  - **textEncoding** - set explicitly which encoding to use for text parts (*quoted-printable* or *base64*). If not set then encoding is detected from text content (mostly ascii means *quoted-printable*, otherwise *base64*)\n  - **disableUrlAccess** - if set to true then fails with an error when a node tries to load content from URL\n  - **disableFileAccess** - if set to true then fails with an error when a node tries to load content from a file\n\nAll text fields (e-mail addresses, plaintext body, html body) use UTF-8 as the encoding.\nAttachments are streamed as binary.\n\n### Attachments\n\nAttachment object consists of the following properties:\n\n  * **filename** - filename to be reported as the name of the attached file, use of unicode is allowed. If you do not want to use a filename, set this value as `false`, otherwise a filename is generated automatically\n  * **cid** - optional content id for using inline images in HTML message source. Using `cid` sets the default `contentDisposition` to `'inline'` and moves the attachment into a *multipart/related* mime node, so use it only if you actually want to use this attachment as an embedded image\n  * **content** - String, Buffer or a Stream contents for the attachment\n  * **encoding** - If set and `content` is string, then encodes the content to a Buffer using the specified encoding. Example values: `base64`, `hex`, `binary` etc. Useful if you want to use binary attachments in a JSON formatted e-mail object\n  * **path** - path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments)\n  * **contentType** - optional content type for the attachment, if not set will be derived from the `filename` property\n  * **contentTransferEncoding** - optional transfer encoding for the attachment, if not set it will be derived from the `contentType` property. Example values: `quoted-printable`, `base64`\n  * **contentDisposition** - optional content disposition type for the attachment, defaults to 'attachment'\n  * **headers** is an object of additional headers, similar to *message.headers* option `{'X-My-Header': 'value'}`\n  * **raw** is an optional value that overrides entire node content in the mime message. If used then all other options set for this node are ignored. The value is either a string, a buffer, a stream or an attachment-like object (eg. provides `path` or `content`)\n\nAttachments can be added as many as you want.\n\n```javascript\nvar mailOptions = {\n    ...\n    attachments: [\n        {   // utf-8 string as an attachment\n            filename: 'text1.txt',\n            content: 'hello world!'\n        },\n        {   // binary buffer as an attachment\n            filename: 'text2.txt',\n            content: new Buffer('hello world!','utf-8')\n        },\n        {   // file on disk as an attachment\n            filename: 'text3.txt',\n            path: '/path/to/file.txt' // stream this file\n        },\n        {   // filename and content type is derived from path\n            path: '/path/to/file.txt'\n        },\n        {   // stream as an attachment\n            filename: 'text4.txt',\n            content: fs.createReadStream('file.txt')\n        },\n        {   // define custom content type for the attachment\n            filename: 'text.bin',\n            content: 'hello world!',\n            contentType: 'text/plain'\n        },\n        {   // use URL as an attachment\n            filename: 'license.txt',\n            path: 'https://raw.github.com/andris9/Nodemailer/master/LICENSE'\n        },\n        {   // encoded string as an attachment\n            filename: 'text1.txt',\n            content: 'aGVsbG8gd29ybGQh',\n            encoding: 'base64'\n        },\n        {   // data uri as an attachment\n            path: 'data:text/plain;base64,aGVsbG8gd29ybGQ='\n        }\n    ]\n}\n```\n\n### Alternatives\n\nIn addition to text and HTML, any kind of data can be inserted as an alternative content of the main body - for example a word processing document with the same text as in the HTML field. It is the job of the e-mail client to select and show the best fitting alternative to the reader. Usually this field is used for calendar events and such.\n\nAlternative objects use the same options as [attachment objects](#attachments). The difference between an attachment and an alternative is the fact that attachments are placed into *multipart/mixed* or *multipart/related* parts of the message white alternatives are placed into *multipart/alternative* part.\n\n**Usage example:**\n\n```javascript\nvar mailOptions = {\n    ...\n    html: '<b>Hello world!</b>',\n    alternatives: [\n        {\n            contentType: 'text/x-web-markdown',\n            content: '**Hello world!**'\n        }\n    ]\n}\n```\n\nAlternatives can be added as many as you want.\n\n### Address Formatting\n\nAll the e-mail addresses can be plain e-mail addresses\n\n```\nfoobar@blurdybloop.com\n```\n\nor with formatted name (includes unicode support)\n\n```\n\"Ноде Майлер\" <foobar@blurdybloop.com>\n```\n\n> Notice that all address fields (even `from`) are comma separated lists, so if you want to use a comma in the name part, make sure you enclose the name in double quotes: `\"Майлер, Ноде\" <foobar@blurdybloop.com>`\n\nor as an address object (in this case you do not need to worry about the formatting, no need to use quotes etc.)\n\n```\n{\n    name: 'Майлер, Ноде',\n    address: 'foobar@blurdybloop.com'\n}\n```\n\nAll address fields accept comma separated list of e-mails or an array of\ne-mails or an array of comma separated list of e-mails or address objects - use it as you like.\nFormatting can be mixed.\n\n```\n...,\nto: 'foobar@blurdybloop.com, \"Ноде Майлер\" <bar@blurdybloop.com>, \"Name, User\" <baz@blurdybloop.com>',\ncc: ['foobar@blurdybloop.com', '\"Ноде Майлер\" <bar@blurdybloop.com>, \"Name, User\" <baz@blurdybloop.com>'],\nbcc: ['foobar@blurdybloop.com', {name: 'Майлер, Ноде', address: 'foobar@blurdybloop.com'}]\n...\n```\n\nYou can even use unicode domains, these are automatically converted to punycode\n\n```\n'\"Unicode Domain\" <info@müriaad-polüteism.info>'\n```\n\n### SMTP envelope\n\nSMTP envelope is usually auto generated from `from`, `to`, `cc` and `bcc` fields but\nif for some reason you want to specify it yourself, you can do it with `envelope` property.\n\n`envelope` is an object with the following params: `from`, `to`, `cc` and `bcc` just like\nwith regular mail options. You can also use the regular address format, unicode domains etc.\n\n```javascript\nmailOptions = {\n    ...,\n    from: 'mailer@kreata.ee',\n    to: 'daemon@kreata.ee',\n    envelope: {\n        from: 'Daemon <deamon@kreata.ee>',\n        to: 'mailer@kreata.ee, Mailer <mailer2@kreata.ee>'\n    }\n}\n```\n\n> Not all transports can use the `envelope` object, for example SES ignores it and uses the data from the From:, To: etc. headers.\n\n### Using Embedded Images\n\nAttachments can be used as embedded images in the HTML body. To use this feature, you need to set additional property of the attachment - `cid` (unique identifier of the file) which is a reference to the attachment file. The same `cid` value must be used as the image URL in HTML (using `cid:` as the URL protocol, see example below).\n\n**NB!** the cid value should be as unique as possible!\n\n```javascript\nvar mailOptions = {\n    ...\n    html: 'Embedded image: <img src=\"cid:unique@kreata.ee\"/>',\n    attachments: [{\n        filename: 'image.png',\n        path: '/path/to/file',\n        cid: 'unique@kreata.ee' //same cid value as in the html img src\n    }]\n}\n```\n\n## License\n\n**MIT**\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/andris9/mailcomposer.git"
  },
  "scripts": {
    "test": "grunt mochaTest"
  },
  "version": "4.0.1"
}
